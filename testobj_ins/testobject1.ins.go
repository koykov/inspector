// Code generated by inspc. DO NOT EDIT.
// source: github.com/koykov/inspector/testobj

package testobj_ins

import (
	"bytes"
	"encoding/json"
	"github.com/koykov/fastconv"
	"github.com/koykov/inspector"
	"github.com/koykov/inspector/testobj"
	"strconv"
)

type TestObject1Inspector struct {
	inspector.BaseInspector
}

func (i6 TestObject1Inspector) TypeName() string {
	return "TestObject1"
}

func (i6 TestObject1Inspector) Get(src interface{}, path ...string) (interface{}, error) {
	var buf interface{}
	err := i6.GetTo(src, &buf, path...)
	return buf, err
}

func (i6 TestObject1Inspector) GetTo(src interface{}, buf *interface{}, path ...string) (err error) {
	if src == nil {
		return
	}
	var x *testobj.TestObject1
	_ = x
	if p, ok := src.(**testobj.TestObject1); ok {
		x = *p
	} else if p, ok := src.(*testobj.TestObject1); ok {
		x = p
	} else if v, ok := src.(testobj.TestObject1); ok {
		x = &v
	} else {
		return
	}
	if len(path) == 0 {
		*buf = &(*x)
		return
	}

	if len(path) > 0 {
		if path[0] == "IntSlice" {
			x0 := x.IntSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t44, err44 := strconv.ParseInt(path[1], 0, 0)
				if err44 != nil {
					return err44
				}
				i = int(t44)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					*buf = &x1
					return
				}
			}
			*buf = &x.IntSlice
			return
		}
		if path[0] == "IntPtrSlice" {
			x0 := x.IntPtrSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t45, err45 := strconv.ParseInt(path[1], 0, 0)
				if err45 != nil {
					return err45
				}
				i = int(t45)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.IntPtrSlice
			return
		}
		if path[0] == "IntSlicePtr" {
			x0 := x.IntSlicePtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t46, err46 := strconv.ParseInt(path[1], 0, 0)
				if err46 != nil {
					return err46
				}
				i = int(t46)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					*buf = &x1
					return
				}
			}
			*buf = &x.IntSlicePtr
			return
		}
		if path[0] == "IntPtrSlicePtr" {
			x0 := x.IntPtrSlicePtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t47, err47 := strconv.ParseInt(path[1], 0, 0)
				if err47 != nil {
					return err47
				}
				i = int(t47)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.IntPtrSlicePtr
			return
		}
		if path[0] == "ByteSlice" {
			*buf = &x.ByteSlice
			return
		}
		if path[0] == "BytePtrSlice" {
			x0 := x.BytePtrSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t48, err48 := strconv.ParseInt(path[1], 0, 0)
				if err48 != nil {
					return err48
				}
				i = int(t48)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.BytePtrSlice
			return
		}
		if path[0] == "FloatSlice" {
			x0 := x.FloatSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t49, err49 := strconv.ParseInt(path[1], 0, 0)
				if err49 != nil {
					return err49
				}
				i = int(t49)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					*buf = &x1
					return
				}
			}
			*buf = &x.FloatSlice
			return
		}
		if path[0] == "FloatPtrSlice" {
			x0 := x.FloatPtrSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t50, err50 := strconv.ParseInt(path[1], 0, 0)
				if err50 != nil {
					return err50
				}
				i = int(t50)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.FloatPtrSlice
			return
		}
		if path[0] == "FloatSlicePtr" {
			x0 := x.FloatSlicePtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t51, err51 := strconv.ParseInt(path[1], 0, 0)
				if err51 != nil {
					return err51
				}
				i = int(t51)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					*buf = &x1
					return
				}
			}
			*buf = &x.FloatSlicePtr
			return
		}
		if path[0] == "FloatPtrSlicePtr" {
			x0 := x.FloatPtrSlicePtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t52, err52 := strconv.ParseInt(path[1], 0, 0)
				if err52 != nil {
					return err52
				}
				i = int(t52)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.FloatPtrSlicePtr
			return
		}
		if path[0] == "IntStringMap" {
			x0 := x.IntStringMap
			_ = x0
			if len(path) > 1 {
				var k int
				t53, err53 := strconv.ParseInt(path[1], 0, 0)
				if err53 != nil {
					return err53
				}
				k = int(t53)
				x1 := (x0)[k]
				_ = x1
				*buf = &x1
				return
			}
			*buf = &x.IntStringMap
			return
		}
		if path[0] == "IntStringPtrMap" {
			x0 := x.IntStringPtrMap
			_ = x0
			if len(path) > 1 {
				var k int
				t54, err54 := strconv.ParseInt(path[1], 0, 0)
				if err54 != nil {
					return err54
				}
				k = int(t54)
				x1 := (x0)[k]
				_ = x1
				if x1 == nil {
					return
				}
				*buf = &x1
				return
			}
			*buf = &x.IntStringPtrMap
			return
		}
		if path[0] == "IntStringMapPtr" {
			x0 := x.IntStringMapPtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var k int
				t55, err55 := strconv.ParseInt(path[1], 0, 0)
				if err55 != nil {
					return err55
				}
				k = int(t55)
				x1 := (*x0)[k]
				_ = x1
				*buf = &x1
				return
			}
			*buf = &x.IntStringMapPtr
			return
		}
		if path[0] == "IntStringPtrMapPtr" {
			x0 := x.IntStringPtrMapPtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var k int
				t56, err56 := strconv.ParseInt(path[1], 0, 0)
				if err56 != nil {
					return err56
				}
				k = int(t56)
				x1 := (*x0)[k]
				_ = x1
				if x1 == nil {
					return
				}
				*buf = &x1
				return
			}
			*buf = &x.IntStringPtrMapPtr
			return
		}
		if path[0] == "IntPtrStringPtrMapPtr" {
			x0 := x.IntPtrStringPtrMapPtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var k int
				t57, err57 := strconv.ParseInt(path[1], 0, 0)
				if err57 != nil {
					return err57
				}
				k = int(t57)
				x1 := (*x0)[&k]
				_ = x1
				if x1 == nil {
					return
				}
				*buf = &x1
				return
			}
			*buf = &x.IntPtrStringPtrMapPtr
			return
		}
		if path[0] == "StringFloatMap" {
			x0 := x.StringFloatMap
			_ = x0
			if len(path) > 1 {
				if x1, ok := (x0)[path[1]]; ok {
					_ = x1
					*buf = &x1
					return
				}
			}
			*buf = &x.StringFloatMap
			return
		}
		if path[0] == "StringFloatPtrMap" {
			x0 := x.StringFloatPtrMap
			_ = x0
			if len(path) > 1 {
				if x1, ok := (x0)[path[1]]; ok {
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.StringFloatPtrMap
			return
		}
		if path[0] == "StringFloatMapPtr" {
			x0 := x.StringFloatMapPtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				if x1, ok := (*x0)[path[1]]; ok {
					_ = x1
					*buf = &x1
					return
				}
			}
			*buf = &x.StringFloatMapPtr
			return
		}
		if path[0] == "StringFloatPtrMapPtr" {
			x0 := x.StringFloatPtrMapPtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				if x1, ok := (*x0)[path[1]]; ok {
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.StringFloatPtrMapPtr
			return
		}
		if path[0] == "StringPtrFloatPtrMapPtr" {
			x0 := x.StringPtrFloatPtrMapPtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				if x1, ok := (*x0)[&path[1]]; ok {
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.StringPtrFloatPtrMapPtr
			return
		}
	}
	return
}

func (i6 TestObject1Inspector) Cmp(src interface{}, cond inspector.Op, right string, result *bool, path ...string) (err error) {
	if len(path) == 0 {
		return
	}
	if src == nil {
		return
	}
	var x *testobj.TestObject1
	_ = x
	if p, ok := src.(**testobj.TestObject1); ok {
		x = *p
	} else if p, ok := src.(*testobj.TestObject1); ok {
		x = p
	} else if v, ok := src.(testobj.TestObject1); ok {
		x = &v
	} else {
		return
	}

	if len(path) > 0 {
		if path[0] == "IntSlice" {
			x0 := x.IntSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t58, err58 := strconv.ParseInt(path[1], 0, 0)
				if err58 != nil {
					return err58
				}
				i = int(t58)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					var rightExact int32
					t59, err59 := strconv.ParseInt(right, 0, 0)
					if err59 != nil {
						return err59
					}
					rightExact = int32(t59)
					switch cond {
					case inspector.OpEq:
						*result = x1 == rightExact
					case inspector.OpNq:
						*result = x1 != rightExact
					case inspector.OpGt:
						*result = x1 > rightExact
					case inspector.OpGtq:
						*result = x1 >= rightExact
					case inspector.OpLt:
						*result = x1 < rightExact
					case inspector.OpLtq:
						*result = x1 <= rightExact
					}
					return
				}
			}
		}
		if path[0] == "IntPtrSlice" {
			x0 := x.IntPtrSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t60, err60 := strconv.ParseInt(path[1], 0, 0)
				if err60 != nil {
					return err60
				}
				i = int(t60)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
		if path[0] == "IntSlicePtr" {
			x0 := x.IntSlicePtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t61, err61 := strconv.ParseInt(path[1], 0, 0)
				if err61 != nil {
					return err61
				}
				i = int(t61)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					var rightExact int32
					t62, err62 := strconv.ParseInt(right, 0, 0)
					if err62 != nil {
						return err62
					}
					rightExact = int32(t62)
					switch cond {
					case inspector.OpEq:
						*result = x1 == rightExact
					case inspector.OpNq:
						*result = x1 != rightExact
					case inspector.OpGt:
						*result = x1 > rightExact
					case inspector.OpGtq:
						*result = x1 >= rightExact
					case inspector.OpLt:
						*result = x1 < rightExact
					case inspector.OpLtq:
						*result = x1 <= rightExact
					}
					return
				}
			}
		}
		if path[0] == "IntPtrSlicePtr" {
			x0 := x.IntPtrSlicePtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t63, err63 := strconv.ParseInt(path[1], 0, 0)
				if err63 != nil {
					return err63
				}
				i = int(t63)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
		if path[0] == "ByteSlice" {
			var rightExact []byte
			rightExact = fastconv.S2B(right)

			if cond == inspector.OpEq {
				*result = bytes.Equal(x.ByteSlice, rightExact)
			} else {
				*result = !bytes.Equal(x.ByteSlice, rightExact)
			}
			return
		}
		if path[0] == "BytePtrSlice" {
			x0 := x.BytePtrSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t65, err65 := strconv.ParseInt(path[1], 0, 0)
				if err65 != nil {
					return err65
				}
				i = int(t65)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
		if path[0] == "FloatSlice" {
			x0 := x.FloatSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t66, err66 := strconv.ParseInt(path[1], 0, 0)
				if err66 != nil {
					return err66
				}
				i = int(t66)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					var rightExact float32
					t67, err67 := strconv.ParseFloat(right, 0)
					if err67 != nil {
						return err67
					}
					rightExact = float32(t67)
					switch cond {
					case inspector.OpEq:
						*result = x1 == rightExact
					case inspector.OpNq:
						*result = x1 != rightExact
					case inspector.OpGt:
						*result = x1 > rightExact
					case inspector.OpGtq:
						*result = x1 >= rightExact
					case inspector.OpLt:
						*result = x1 < rightExact
					case inspector.OpLtq:
						*result = x1 <= rightExact
					}
					return
				}
			}
		}
		if path[0] == "FloatPtrSlice" {
			x0 := x.FloatPtrSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t68, err68 := strconv.ParseInt(path[1], 0, 0)
				if err68 != nil {
					return err68
				}
				i = int(t68)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
		if path[0] == "FloatSlicePtr" {
			x0 := x.FloatSlicePtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t69, err69 := strconv.ParseInt(path[1], 0, 0)
				if err69 != nil {
					return err69
				}
				i = int(t69)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					var rightExact float32
					t70, err70 := strconv.ParseFloat(right, 0)
					if err70 != nil {
						return err70
					}
					rightExact = float32(t70)
					switch cond {
					case inspector.OpEq:
						*result = x1 == rightExact
					case inspector.OpNq:
						*result = x1 != rightExact
					case inspector.OpGt:
						*result = x1 > rightExact
					case inspector.OpGtq:
						*result = x1 >= rightExact
					case inspector.OpLt:
						*result = x1 < rightExact
					case inspector.OpLtq:
						*result = x1 <= rightExact
					}
					return
				}
			}
		}
		if path[0] == "FloatPtrSlicePtr" {
			x0 := x.FloatPtrSlicePtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t71, err71 := strconv.ParseInt(path[1], 0, 0)
				if err71 != nil {
					return err71
				}
				i = int(t71)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
		if path[0] == "IntStringMap" {
			x0 := x.IntStringMap
			_ = x0
			if len(path) > 1 {
				var k int
				t72, err72 := strconv.ParseInt(path[1], 0, 0)
				if err72 != nil {
					return err72
				}
				k = int(t72)
				x1 := (x0)[k]
				_ = x1
				var rightExact string
				rightExact = right

				switch cond {
				case inspector.OpEq:
					*result = x1 == rightExact
				case inspector.OpNq:
					*result = x1 != rightExact
				case inspector.OpGt:
					*result = x1 > rightExact
				case inspector.OpGtq:
					*result = x1 >= rightExact
				case inspector.OpLt:
					*result = x1 < rightExact
				case inspector.OpLtq:
					*result = x1 <= rightExact
				}
				return
			}
		}
		if path[0] == "IntStringPtrMap" {
			x0 := x.IntStringPtrMap
			_ = x0
			if len(path) > 1 {
				var k int
				t74, err74 := strconv.ParseInt(path[1], 0, 0)
				if err74 != nil {
					return err74
				}
				k = int(t74)
				x1 := (x0)[k]
				_ = x1
				if x1 == nil {
					return
				}
				if right == inspector.Nil {
					if cond == inspector.OpEq {
						*result = x1 == nil
					} else {
						*result = x1 != nil
					}
					return
				}
				return
			}
		}
		if path[0] == "IntStringMapPtr" {
			x0 := x.IntStringMapPtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var k int
				t75, err75 := strconv.ParseInt(path[1], 0, 0)
				if err75 != nil {
					return err75
				}
				k = int(t75)
				x1 := (*x0)[k]
				_ = x1
				var rightExact string
				rightExact = right

				switch cond {
				case inspector.OpEq:
					*result = x1 == rightExact
				case inspector.OpNq:
					*result = x1 != rightExact
				case inspector.OpGt:
					*result = x1 > rightExact
				case inspector.OpGtq:
					*result = x1 >= rightExact
				case inspector.OpLt:
					*result = x1 < rightExact
				case inspector.OpLtq:
					*result = x1 <= rightExact
				}
				return
			}
		}
		if path[0] == "IntStringPtrMapPtr" {
			x0 := x.IntStringPtrMapPtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var k int
				t77, err77 := strconv.ParseInt(path[1], 0, 0)
				if err77 != nil {
					return err77
				}
				k = int(t77)
				x1 := (*x0)[k]
				_ = x1
				if x1 == nil {
					return
				}
				if right == inspector.Nil {
					if cond == inspector.OpEq {
						*result = x1 == nil
					} else {
						*result = x1 != nil
					}
					return
				}
				return
			}
		}
		if path[0] == "IntPtrStringPtrMapPtr" {
			x0 := x.IntPtrStringPtrMapPtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var k int
				t78, err78 := strconv.ParseInt(path[1], 0, 0)
				if err78 != nil {
					return err78
				}
				k = int(t78)
				x1 := (*x0)[&k]
				_ = x1
				if x1 == nil {
					return
				}
				if right == inspector.Nil {
					if cond == inspector.OpEq {
						*result = x1 == nil
					} else {
						*result = x1 != nil
					}
					return
				}
				return
			}
		}
		if path[0] == "StringFloatMap" {
			x0 := x.StringFloatMap
			_ = x0
			if len(path) > 1 {
				if x1, ok := (x0)[path[1]]; ok {
					_ = x1
					var rightExact float64
					t79, err79 := strconv.ParseFloat(right, 0)
					if err79 != nil {
						return err79
					}
					rightExact = float64(t79)
					switch cond {
					case inspector.OpEq:
						*result = x1 == rightExact
					case inspector.OpNq:
						*result = x1 != rightExact
					case inspector.OpGt:
						*result = x1 > rightExact
					case inspector.OpGtq:
						*result = x1 >= rightExact
					case inspector.OpLt:
						*result = x1 < rightExact
					case inspector.OpLtq:
						*result = x1 <= rightExact
					}
					return
				}
			}
		}
		if path[0] == "StringFloatPtrMap" {
			x0 := x.StringFloatPtrMap
			_ = x0
			if len(path) > 1 {
				if x1, ok := (x0)[path[1]]; ok {
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
		if path[0] == "StringFloatMapPtr" {
			x0 := x.StringFloatMapPtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				if x1, ok := (*x0)[path[1]]; ok {
					_ = x1
					var rightExact float64
					t80, err80 := strconv.ParseFloat(right, 0)
					if err80 != nil {
						return err80
					}
					rightExact = float64(t80)
					switch cond {
					case inspector.OpEq:
						*result = x1 == rightExact
					case inspector.OpNq:
						*result = x1 != rightExact
					case inspector.OpGt:
						*result = x1 > rightExact
					case inspector.OpGtq:
						*result = x1 >= rightExact
					case inspector.OpLt:
						*result = x1 < rightExact
					case inspector.OpLtq:
						*result = x1 <= rightExact
					}
					return
				}
			}
		}
		if path[0] == "StringFloatPtrMapPtr" {
			x0 := x.StringFloatPtrMapPtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				if x1, ok := (*x0)[path[1]]; ok {
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
		if path[0] == "StringPtrFloatPtrMapPtr" {
			x0 := x.StringPtrFloatPtrMapPtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				if x1, ok := (*x0)[&path[1]]; ok {
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
	}
	return
}

func (i6 TestObject1Inspector) Loop(src interface{}, l inspector.Looper, buf *[]byte, path ...string) (err error) {
	if len(path) == 0 {
		return
	}
	if src == nil {
		return
	}
	var x *testobj.TestObject1
	_ = x
	if p, ok := src.(**testobj.TestObject1); ok {
		x = *p
	} else if p, ok := src.(*testobj.TestObject1); ok {
		x = p
	} else if v, ok := src.(testobj.TestObject1); ok {
		x = &v
	} else {
		return
	}

	if len(path) > 0 {
		if path[0] == "IntSlice" {
			x0 := x.IntSlice
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "IntPtrSlice" {
			x0 := x.IntPtrSlice
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "IntSlicePtr" {
			x0 := x.IntSlicePtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "IntPtrSlicePtr" {
			x0 := x.IntPtrSlicePtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "BytePtrSlice" {
			x0 := x.BytePtrSlice
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "FloatSlice" {
			x0 := x.FloatSlice
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "FloatPtrSlice" {
			x0 := x.FloatPtrSlice
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "FloatSlicePtr" {
			x0 := x.FloatSlicePtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "FloatPtrSlicePtr" {
			x0 := x.FloatPtrSlicePtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "IntStringMap" {
			x0 := x.IntStringMap
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "IntStringPtrMap" {
			x0 := x.IntStringPtrMap
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "IntStringMapPtr" {
			x0 := x.IntStringMapPtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "IntStringPtrMapPtr" {
			x0 := x.IntStringPtrMapPtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "IntPtrStringPtrMapPtr" {
			x0 := x.IntPtrStringPtrMapPtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(*k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "StringFloatMap" {
			x0 := x.StringFloatMap
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = append((*buf)[:0], k...)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "StringFloatPtrMap" {
			x0 := x.StringFloatPtrMap
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = append((*buf)[:0], k...)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "StringFloatMapPtr" {
			x0 := x.StringFloatMapPtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = append((*buf)[:0], k...)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "StringFloatPtrMapPtr" {
			x0 := x.StringFloatPtrMapPtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = append((*buf)[:0], k...)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "StringPtrFloatPtrMapPtr" {
			x0 := x.StringPtrFloatPtrMapPtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = append((*buf)[:0], *k...)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
	}
	return
}

func (i6 TestObject1Inspector) SetWB(dst, value interface{}, buf inspector.AccumulativeBuffer, path ...string) error {
	if len(path) == 0 {
		return nil
	}
	if dst == nil {
		return nil
	}
	var x *testobj.TestObject1
	_ = x
	if p, ok := dst.(**testobj.TestObject1); ok {
		x = *p
	} else if p, ok := dst.(*testobj.TestObject1); ok {
		x = p
	} else if v, ok := dst.(testobj.TestObject1); ok {
		x = &v
	} else {
		return nil
	}

	if len(path) > 0 {
		if path[0] == "IntSlice" {
			x0 := x.IntSlice
			if uvalue, ok := value.(*[]int32); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make([]int32, 0)
				x0 = z
				x.IntSlice = x0
			}
			_ = x0
			if len(path) > 1 {
				var i int
				t81, err81 := strconv.ParseInt(path[1], 0, 0)
				if err81 != nil {
					return err81
				}
				i = int(t81)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					inspector.AssignBuf(&x1, value, buf)
					return nil
					(x0)[i] = x1
					return nil
				}
			}
			x.IntSlice = x0
		}
		if path[0] == "IntPtrSlice" {
			x0 := x.IntPtrSlice
			if uvalue, ok := value.(*[]*int32); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make([]*int32, 0)
				x0 = z
				x.IntPtrSlice = x0
			}
			_ = x0
			if len(path) > 1 {
				var i int
				t82, err82 := strconv.ParseInt(path[1], 0, 0)
				if err82 != nil {
					return err82
				}
				i = int(t82)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return nil
					}
					inspector.AssignBuf(x1, value, buf)
					return nil
					(x0)[i] = x1
					return nil
				}
			}
			x.IntPtrSlice = x0
		}
		if path[0] == "IntSlicePtr" {
			x0 := x.IntSlicePtr
			if uvalue, ok := value.(*[]int32); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make([]int32, 0)
				x0 = &z
				x.IntSlicePtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var i int
				t83, err83 := strconv.ParseInt(path[1], 0, 0)
				if err83 != nil {
					return err83
				}
				i = int(t83)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					inspector.AssignBuf(&x1, value, buf)
					return nil
					(*x0)[i] = x1
					return nil
				}
			}
			x.IntSlicePtr = x0
		}
		if path[0] == "IntPtrSlicePtr" {
			x0 := x.IntPtrSlicePtr
			if uvalue, ok := value.(*[]*int32); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make([]*int32, 0)
				x0 = &z
				x.IntPtrSlicePtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var i int
				t84, err84 := strconv.ParseInt(path[1], 0, 0)
				if err84 != nil {
					return err84
				}
				i = int(t84)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if x1 == nil {
						return nil
					}
					inspector.AssignBuf(x1, value, buf)
					return nil
					(*x0)[i] = x1
					return nil
				}
			}
			x.IntPtrSlicePtr = x0
		}
		if path[0] == "ByteSlice" {
			inspector.AssignBuf(&x.ByteSlice, value, buf)
			return nil
		}
		if path[0] == "BytePtrSlice" {
			x0 := x.BytePtrSlice
			if uvalue, ok := value.(*[]*byte); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make([]*byte, 0)
				x0 = z
				x.BytePtrSlice = x0
			}
			_ = x0
			if len(path) > 1 {
				var i int
				t85, err85 := strconv.ParseInt(path[1], 0, 0)
				if err85 != nil {
					return err85
				}
				i = int(t85)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return nil
					}
					inspector.AssignBuf(x1, value, buf)
					return nil
					(x0)[i] = x1
					return nil
				}
			}
			x.BytePtrSlice = x0
		}
		if path[0] == "FloatSlice" {
			x0 := x.FloatSlice
			if uvalue, ok := value.(*testobj.TestFloatSlice); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make(testobj.TestFloatSlice, 0)
				x0 = z
				x.FloatSlice = x0
			}
			_ = x0
			if len(path) > 1 {
				var i int
				t86, err86 := strconv.ParseInt(path[1], 0, 0)
				if err86 != nil {
					return err86
				}
				i = int(t86)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					inspector.AssignBuf(&x1, value, buf)
					return nil
					(x0)[i] = x1
					return nil
				}
			}
			x.FloatSlice = x0
		}
		if path[0] == "FloatPtrSlice" {
			x0 := x.FloatPtrSlice
			if uvalue, ok := value.(*testobj.TestFloatPtrSlice); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make(testobj.TestFloatPtrSlice, 0)
				x0 = z
				x.FloatPtrSlice = x0
			}
			_ = x0
			if len(path) > 1 {
				var i int
				t87, err87 := strconv.ParseInt(path[1], 0, 0)
				if err87 != nil {
					return err87
				}
				i = int(t87)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return nil
					}
					inspector.AssignBuf(x1, value, buf)
					return nil
					(x0)[i] = x1
					return nil
				}
			}
			x.FloatPtrSlice = x0
		}
		if path[0] == "FloatSlicePtr" {
			x0 := x.FloatSlicePtr
			if uvalue, ok := value.(*testobj.TestFloatSlice); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(testobj.TestFloatSlice, 0)
				x0 = &z
				x.FloatSlicePtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var i int
				t88, err88 := strconv.ParseInt(path[1], 0, 0)
				if err88 != nil {
					return err88
				}
				i = int(t88)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					inspector.AssignBuf(&x1, value, buf)
					return nil
					(*x0)[i] = x1
					return nil
				}
			}
			x.FloatSlicePtr = x0
		}
		if path[0] == "FloatPtrSlicePtr" {
			x0 := x.FloatPtrSlicePtr
			if uvalue, ok := value.(*testobj.TestFloatPtrSlice); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(testobj.TestFloatPtrSlice, 0)
				x0 = &z
				x.FloatPtrSlicePtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var i int
				t89, err89 := strconv.ParseInt(path[1], 0, 0)
				if err89 != nil {
					return err89
				}
				i = int(t89)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if x1 == nil {
						return nil
					}
					inspector.AssignBuf(x1, value, buf)
					return nil
					(*x0)[i] = x1
					return nil
				}
			}
			x.FloatPtrSlicePtr = x0
		}
		if path[0] == "IntStringMap" {
			x0 := x.IntStringMap
			if uvalue, ok := value.(*map[int]string); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make(map[int]string)
				x0 = z
				x.IntStringMap = x0
			}
			_ = x0
			if len(path) > 1 {
				var k int
				t90, err90 := strconv.ParseInt(path[1], 0, 0)
				if err90 != nil {
					return err90
				}
				k = int(t90)
				x1 := (x0)[k]
				_ = x1
				inspector.AssignBuf(&x1, value, buf)
				(x0)[k] = x1
				return nil
			}
			x.IntStringMap = x0
		}
		if path[0] == "IntStringPtrMap" {
			x0 := x.IntStringPtrMap
			if uvalue, ok := value.(*map[int]*string); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make(map[int]*string)
				x0 = z
				x.IntStringPtrMap = x0
			}
			_ = x0
			if len(path) > 1 {
				var k int
				t91, err91 := strconv.ParseInt(path[1], 0, 0)
				if err91 != nil {
					return err91
				}
				k = int(t91)
				x1 := (x0)[k]
				_ = x1
				if x1 == nil {
					return nil
				}
				inspector.AssignBuf(x1, value, buf)
				(x0)[k] = x1
				return nil
			}
			x.IntStringPtrMap = x0
		}
		if path[0] == "IntStringMapPtr" {
			x0 := x.IntStringMapPtr
			if uvalue, ok := value.(*map[int]string); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(map[int]string)
				x0 = &z
				x.IntStringMapPtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var k int
				t92, err92 := strconv.ParseInt(path[1], 0, 0)
				if err92 != nil {
					return err92
				}
				k = int(t92)
				x1 := (*x0)[k]
				_ = x1
				inspector.AssignBuf(&x1, value, buf)
				(*x0)[k] = x1
				return nil
			}
			x.IntStringMapPtr = x0
		}
		if path[0] == "IntStringPtrMapPtr" {
			x0 := x.IntStringPtrMapPtr
			if uvalue, ok := value.(*map[int]*string); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(map[int]*string)
				x0 = &z
				x.IntStringPtrMapPtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var k int
				t93, err93 := strconv.ParseInt(path[1], 0, 0)
				if err93 != nil {
					return err93
				}
				k = int(t93)
				x1 := (*x0)[k]
				_ = x1
				if x1 == nil {
					return nil
				}
				inspector.AssignBuf(x1, value, buf)
				(*x0)[k] = x1
				return nil
			}
			x.IntStringPtrMapPtr = x0
		}
		if path[0] == "IntPtrStringPtrMapPtr" {
			x0 := x.IntPtrStringPtrMapPtr
			if uvalue, ok := value.(*map[*int]*string); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(map[*int]*string)
				x0 = &z
				x.IntPtrStringPtrMapPtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var k int
				t94, err94 := strconv.ParseInt(path[1], 0, 0)
				if err94 != nil {
					return err94
				}
				k = int(t94)
				x1 := (*x0)[&k]
				_ = x1
				if x1 == nil {
					return nil
				}
				inspector.AssignBuf(x1, value, buf)
				(*x0)[&k] = x1
				return nil
			}
			x.IntPtrStringPtrMapPtr = x0
		}
		if path[0] == "StringFloatMap" {
			x0 := x.StringFloatMap
			if uvalue, ok := value.(*testobj.TestStringFloatMap); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make(testobj.TestStringFloatMap)
				x0 = z
				x.StringFloatMap = x0
			}
			_ = x0
			if len(path) > 1 {
				x1 := (x0)[path[1]]
				_ = x1
				inspector.AssignBuf(&x1, value, buf)
				(x0)[path[1]] = x1
				return nil
			}
			x.StringFloatMap = x0
		}
		if path[0] == "StringFloatPtrMap" {
			x0 := x.StringFloatPtrMap
			if uvalue, ok := value.(*testobj.TestStringFloatPtrMap); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make(testobj.TestStringFloatPtrMap)
				x0 = z
				x.StringFloatPtrMap = x0
			}
			_ = x0
			if len(path) > 1 {
				x1 := (x0)[path[1]]
				_ = x1
				if x1 == nil {
					return nil
				}
				inspector.AssignBuf(x1, value, buf)
				(x0)[path[1]] = x1
				return nil
			}
			x.StringFloatPtrMap = x0
		}
		if path[0] == "StringFloatMapPtr" {
			x0 := x.StringFloatMapPtr
			if uvalue, ok := value.(*testobj.TestStringFloatMap); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(testobj.TestStringFloatMap)
				x0 = &z
				x.StringFloatMapPtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				x1 := (*x0)[path[1]]
				_ = x1
				inspector.AssignBuf(&x1, value, buf)
				(*x0)[path[1]] = x1
				return nil
			}
			x.StringFloatMapPtr = x0
		}
		if path[0] == "StringFloatPtrMapPtr" {
			x0 := x.StringFloatPtrMapPtr
			if uvalue, ok := value.(*testobj.TestStringFloatPtrMap); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(testobj.TestStringFloatPtrMap)
				x0 = &z
				x.StringFloatPtrMapPtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				x1 := (*x0)[path[1]]
				_ = x1
				if x1 == nil {
					return nil
				}
				inspector.AssignBuf(x1, value, buf)
				(*x0)[path[1]] = x1
				return nil
			}
			x.StringFloatPtrMapPtr = x0
		}
		if path[0] == "StringPtrFloatPtrMapPtr" {
			x0 := x.StringPtrFloatPtrMapPtr
			if uvalue, ok := value.(*testobj.TestStringPtrFloatPtrMap); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(testobj.TestStringPtrFloatPtrMap)
				x0 = &z
				x.StringPtrFloatPtrMapPtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				x1 := (*x0)[&path[1]]
				_ = x1
				if x1 == nil {
					return nil
				}
				inspector.AssignBuf(x1, value, buf)
				(*x0)[&path[1]] = x1
				return nil
			}
			x.StringPtrFloatPtrMapPtr = x0
		}
	}
	return nil
}

func (i6 TestObject1Inspector) Set(dst, value interface{}, path ...string) error {
	return i6.SetWB(dst, value, nil, path...)
}

func (i6 TestObject1Inspector) DeepEqual(l, r interface{}) bool {
	return i6.DeepEqualWithOptions(l, r, nil)
}

func (i6 TestObject1Inspector) DeepEqualWithOptions(l, r interface{}, opts *inspector.DEQOptions) bool {
	var (
		lx, rx   *testobj.TestObject1
		leq, req bool
	)
	_, _, _, _ = lx, rx, leq, req
	if lp, ok := l.(**testobj.TestObject1); ok {
		lx, leq = *lp, true
	} else if lp, ok := l.(*testobj.TestObject1); ok {
		lx, leq = lp, true
	} else if lp, ok := l.(testobj.TestObject1); ok {
		lx, leq = &lp, true
	}
	if rp, ok := r.(**testobj.TestObject1); ok {
		rx, req = *rp, true
	} else if rp, ok := r.(*testobj.TestObject1); ok {
		rx, req = rp, true
	} else if rp, ok := r.(testobj.TestObject1); ok {
		rx, req = &rp, true
	}
	if !leq || !req {
		return false
	}
	if lx == nil && rx == nil {
		return true
	}
	if (lx == nil && rx != nil) || (lx != nil && rx == nil) {
		return false
	}

	lx1 := lx.IntSlice
	rx1 := rx.IntSlice
	_, _ = lx1, rx1
	if inspector.DEQMustCheck("IntSlice", opts) {
		if len(lx1) != len(rx1) {
			return false
		}
		for i := 0; i < len(lx1); i++ {
			lx2 := (lx1)[i]
			rx2 := (rx1)[i]
			_, _ = lx2, rx2
			if lx2 != rx2 {
				return false
			}
		}
	}
	lx3 := lx.IntPtrSlice
	rx3 := rx.IntPtrSlice
	_, _ = lx3, rx3
	if inspector.DEQMustCheck("IntPtrSlice", opts) {
		if len(lx3) != len(rx3) {
			return false
		}
		for i := 0; i < len(lx3); i++ {
			lx4 := (lx3)[i]
			rx4 := (rx3)[i]
			_, _ = lx4, rx4
			if (lx4 == nil && rx4 != nil) || (lx4 != nil && rx4 == nil) {
				return false
			}
			if lx4 != nil && rx4 != nil {
				if *lx4 != *rx4 {
					return false
				}
			}
		}
	}
	lx5 := lx.IntSlicePtr
	rx5 := rx.IntSlicePtr
	_, _ = lx5, rx5
	if (lx5 == nil && rx5 != nil) || (lx5 != nil && rx5 == nil) {
		return false
	}
	if lx5 != nil && rx5 != nil {
		if inspector.DEQMustCheck("IntSlicePtr", opts) {
			if len(*lx5) != len(*rx5) {
				return false
			}
			for i := 0; i < len(*lx5); i++ {
				lx6 := (*lx5)[i]
				rx6 := (*rx5)[i]
				_, _ = lx6, rx6
				if lx6 != rx6 {
					return false
				}
			}
		}
	}
	lx7 := lx.IntPtrSlicePtr
	rx7 := rx.IntPtrSlicePtr
	_, _ = lx7, rx7
	if (lx7 == nil && rx7 != nil) || (lx7 != nil && rx7 == nil) {
		return false
	}
	if lx7 != nil && rx7 != nil {
		if inspector.DEQMustCheck("IntPtrSlicePtr", opts) {
			if len(*lx7) != len(*rx7) {
				return false
			}
			for i := 0; i < len(*lx7); i++ {
				lx8 := (*lx7)[i]
				rx8 := (*rx7)[i]
				_, _ = lx8, rx8
				if (lx8 == nil && rx8 != nil) || (lx8 != nil && rx8 == nil) {
					return false
				}
				if lx8 != nil && rx8 != nil {
					if *lx8 != *rx8 {
						return false
					}
				}
			}
		}
	}
	if !bytes.Equal(lx.ByteSlice, rx.ByteSlice) && inspector.DEQMustCheck("ByteSlice", opts) {
		return false
	}
	lx9 := lx.BytePtrSlice
	rx9 := rx.BytePtrSlice
	_, _ = lx9, rx9
	if inspector.DEQMustCheck("BytePtrSlice", opts) {
		if len(lx9) != len(rx9) {
			return false
		}
		for i := 0; i < len(lx9); i++ {
			lx10 := (lx9)[i]
			rx10 := (rx9)[i]
			_, _ = lx10, rx10
			if (lx10 == nil && rx10 != nil) || (lx10 != nil && rx10 == nil) {
				return false
			}
			if lx10 != nil && rx10 != nil {
				if *lx10 != *rx10 {
					return false
				}
			}
		}
	}
	lx11 := lx.FloatSlice
	rx11 := rx.FloatSlice
	_, _ = lx11, rx11
	if inspector.DEQMustCheck("FloatSlice", opts) {
		if len(lx11) != len(rx11) {
			return false
		}
		for i := 0; i < len(lx11); i++ {
			lx12 := (lx11)[i]
			rx12 := (rx11)[i]
			_, _ = lx12, rx12
			if lx12 != rx12 {
				return false
			}
		}
	}
	lx13 := lx.FloatPtrSlice
	rx13 := rx.FloatPtrSlice
	_, _ = lx13, rx13
	if inspector.DEQMustCheck("FloatPtrSlice", opts) {
		if len(lx13) != len(rx13) {
			return false
		}
		for i := 0; i < len(lx13); i++ {
			lx14 := (lx13)[i]
			rx14 := (rx13)[i]
			_, _ = lx14, rx14
			if (lx14 == nil && rx14 != nil) || (lx14 != nil && rx14 == nil) {
				return false
			}
			if lx14 != nil && rx14 != nil {
				if *lx14 != *rx14 {
					return false
				}
			}
		}
	}
	lx15 := lx.FloatSlicePtr
	rx15 := rx.FloatSlicePtr
	_, _ = lx15, rx15
	if (lx15 == nil && rx15 != nil) || (lx15 != nil && rx15 == nil) {
		return false
	}
	if lx15 != nil && rx15 != nil {
		if inspector.DEQMustCheck("FloatSlicePtr", opts) {
			if len(*lx15) != len(*rx15) {
				return false
			}
			for i := 0; i < len(*lx15); i++ {
				lx16 := (*lx15)[i]
				rx16 := (*rx15)[i]
				_, _ = lx16, rx16
				if lx16 != rx16 {
					return false
				}
			}
		}
	}
	lx17 := lx.FloatPtrSlicePtr
	rx17 := rx.FloatPtrSlicePtr
	_, _ = lx17, rx17
	if (lx17 == nil && rx17 != nil) || (lx17 != nil && rx17 == nil) {
		return false
	}
	if lx17 != nil && rx17 != nil {
		if inspector.DEQMustCheck("FloatPtrSlicePtr", opts) {
			if len(*lx17) != len(*rx17) {
				return false
			}
			for i := 0; i < len(*lx17); i++ {
				lx18 := (*lx17)[i]
				rx18 := (*rx17)[i]
				_, _ = lx18, rx18
				if (lx18 == nil && rx18 != nil) || (lx18 != nil && rx18 == nil) {
					return false
				}
				if lx18 != nil && rx18 != nil {
					if *lx18 != *rx18 {
						return false
					}
				}
			}
		}
	}
	lx19 := lx.IntStringMap
	rx19 := rx.IntStringMap
	_, _ = lx19, rx19
	if inspector.DEQMustCheck("IntStringMap", opts) {
		if len(lx19) != len(rx19) {
			return false
		}
		for k := range lx19 {
			lx20 := (lx19)[k]
			rx20, ok20 := (rx19)[k]
			_, _, _ = lx20, rx20, ok20
			if !ok20 {
				return false
			}
			if lx20 != rx20 {
				return false
			}
		}
	}
	lx21 := lx.IntStringPtrMap
	rx21 := rx.IntStringPtrMap
	_, _ = lx21, rx21
	if inspector.DEQMustCheck("IntStringPtrMap", opts) {
		if len(lx21) != len(rx21) {
			return false
		}
		for k := range lx21 {
			lx22 := (lx21)[k]
			rx22, ok22 := (rx21)[k]
			_, _, _ = lx22, rx22, ok22
			if !ok22 {
				return false
			}
			if (lx22 == nil && rx22 != nil) || (lx22 != nil && rx22 == nil) {
				return false
			}
			if lx22 != nil && rx22 != nil {
				if *lx22 != *rx22 {
					return false
				}
			}
		}
	}
	lx23 := lx.IntStringMapPtr
	rx23 := rx.IntStringMapPtr
	_, _ = lx23, rx23
	if (lx23 == nil && rx23 != nil) || (lx23 != nil && rx23 == nil) {
		return false
	}
	if lx23 != nil && rx23 != nil {
		if inspector.DEQMustCheck("IntStringMapPtr", opts) {
			if len(*lx23) != len(*rx23) {
				return false
			}
			for k := range *lx23 {
				lx24 := (*lx23)[k]
				rx24, ok24 := (*rx23)[k]
				_, _, _ = lx24, rx24, ok24
				if !ok24 {
					return false
				}
				if lx24 != rx24 {
					return false
				}
			}
		}
	}
	lx25 := lx.IntStringPtrMapPtr
	rx25 := rx.IntStringPtrMapPtr
	_, _ = lx25, rx25
	if (lx25 == nil && rx25 != nil) || (lx25 != nil && rx25 == nil) {
		return false
	}
	if lx25 != nil && rx25 != nil {
		if inspector.DEQMustCheck("IntStringPtrMapPtr", opts) {
			if len(*lx25) != len(*rx25) {
				return false
			}
			for k := range *lx25 {
				lx26 := (*lx25)[k]
				rx26, ok26 := (*rx25)[k]
				_, _, _ = lx26, rx26, ok26
				if !ok26 {
					return false
				}
				if (lx26 == nil && rx26 != nil) || (lx26 != nil && rx26 == nil) {
					return false
				}
				if lx26 != nil && rx26 != nil {
					if *lx26 != *rx26 {
						return false
					}
				}
			}
		}
	}
	lx27 := lx.IntPtrStringPtrMapPtr
	rx27 := rx.IntPtrStringPtrMapPtr
	_, _ = lx27, rx27
	if (lx27 == nil && rx27 != nil) || (lx27 != nil && rx27 == nil) {
		return false
	}
	if lx27 != nil && rx27 != nil {
		if inspector.DEQMustCheck("IntPtrStringPtrMapPtr", opts) {
			if len(*lx27) != len(*rx27) {
				return false
			}
			for k := range *lx27 {
				lx28 := (*lx27)[k]
				rx28, ok28 := (*rx27)[k]
				_, _, _ = lx28, rx28, ok28
				if !ok28 {
					return false
				}
				if (lx28 == nil && rx28 != nil) || (lx28 != nil && rx28 == nil) {
					return false
				}
				if lx28 != nil && rx28 != nil {
					if *lx28 != *rx28 {
						return false
					}
				}
			}
		}
	}
	lx29 := lx.StringFloatMap
	rx29 := rx.StringFloatMap
	_, _ = lx29, rx29
	if inspector.DEQMustCheck("StringFloatMap", opts) {
		if len(lx29) != len(rx29) {
			return false
		}
		for k := range lx29 {
			lx30 := (lx29)[k]
			rx30, ok30 := (rx29)[k]
			_, _, _ = lx30, rx30, ok30
			if !ok30 {
				return false
			}
			if lx30 != rx30 {
				return false
			}
		}
	}
	lx31 := lx.StringFloatPtrMap
	rx31 := rx.StringFloatPtrMap
	_, _ = lx31, rx31
	if inspector.DEQMustCheck("StringFloatPtrMap", opts) {
		if len(lx31) != len(rx31) {
			return false
		}
		for k := range lx31 {
			lx32 := (lx31)[k]
			rx32, ok32 := (rx31)[k]
			_, _, _ = lx32, rx32, ok32
			if !ok32 {
				return false
			}
			if (lx32 == nil && rx32 != nil) || (lx32 != nil && rx32 == nil) {
				return false
			}
			if lx32 != nil && rx32 != nil {
				if *lx32 != *rx32 {
					return false
				}
			}
		}
	}
	lx33 := lx.StringFloatMapPtr
	rx33 := rx.StringFloatMapPtr
	_, _ = lx33, rx33
	if (lx33 == nil && rx33 != nil) || (lx33 != nil && rx33 == nil) {
		return false
	}
	if lx33 != nil && rx33 != nil {
		if inspector.DEQMustCheck("StringFloatMapPtr", opts) {
			if len(*lx33) != len(*rx33) {
				return false
			}
			for k := range *lx33 {
				lx34 := (*lx33)[k]
				rx34, ok34 := (*rx33)[k]
				_, _, _ = lx34, rx34, ok34
				if !ok34 {
					return false
				}
				if lx34 != rx34 {
					return false
				}
			}
		}
	}
	lx35 := lx.StringFloatPtrMapPtr
	rx35 := rx.StringFloatPtrMapPtr
	_, _ = lx35, rx35
	if (lx35 == nil && rx35 != nil) || (lx35 != nil && rx35 == nil) {
		return false
	}
	if lx35 != nil && rx35 != nil {
		if inspector.DEQMustCheck("StringFloatPtrMapPtr", opts) {
			if len(*lx35) != len(*rx35) {
				return false
			}
			for k := range *lx35 {
				lx36 := (*lx35)[k]
				rx36, ok36 := (*rx35)[k]
				_, _, _ = lx36, rx36, ok36
				if !ok36 {
					return false
				}
				if (lx36 == nil && rx36 != nil) || (lx36 != nil && rx36 == nil) {
					return false
				}
				if lx36 != nil && rx36 != nil {
					if *lx36 != *rx36 {
						return false
					}
				}
			}
		}
	}
	lx37 := lx.StringPtrFloatPtrMapPtr
	rx37 := rx.StringPtrFloatPtrMapPtr
	_, _ = lx37, rx37
	if (lx37 == nil && rx37 != nil) || (lx37 != nil && rx37 == nil) {
		return false
	}
	if lx37 != nil && rx37 != nil {
		if inspector.DEQMustCheck("StringPtrFloatPtrMapPtr", opts) {
			if len(*lx37) != len(*rx37) {
				return false
			}
			for k := range *lx37 {
				lx38 := (*lx37)[k]
				rx38, ok38 := (*rx37)[k]
				_, _, _ = lx38, rx38, ok38
				if !ok38 {
					return false
				}
				if (lx38 == nil && rx38 != nil) || (lx38 != nil && rx38 == nil) {
					return false
				}
				if lx38 != nil && rx38 != nil {
					if *lx38 != *rx38 {
						return false
					}
				}
			}
		}
	}
	return true
}

func (i6 TestObject1Inspector) Unmarshal(p []byte, typ inspector.Encoding) (interface{}, error) {
	var x testobj.TestObject1
	switch typ {
	case inspector.EncodingJSON:
		err := json.Unmarshal(p, &x)
		return &x, err
	default:
		return nil, inspector.ErrUnknownEncodingType
	}
}

func (i6 TestObject1Inspector) Copy(x interface{}) (interface{}, error) {
	var origin, cpy testobj.TestObject1
	switch x.(type) {
	case testobj.TestObject1:
		origin = x.(testobj.TestObject1)
	case *testobj.TestObject1:
		origin = *x.(*testobj.TestObject1)
	case **testobj.TestObject1:
		origin = **x.(**testobj.TestObject1)
	default:
		return nil, inspector.ErrUnsupportedType
	}
	bc := i6.calcBytes(&origin)
	buf := make([]byte, 0, bc)
	if err := i6.cpy(buf, &cpy, &origin); err != nil {
		return nil, err
	}
	return cpy, nil
}

func (i6 TestObject1Inspector) calcBytes(x *testobj.TestObject1) (c int) {
	c += len(x.ByteSlice)
	for k1, v1 := range x.IntStringMap {
		_, _ = k1, v1
		c += len(v1)
	}
	for k1, v1 := range x.IntStringPtrMap {
		_, _ = k1, v1
		c += len(*v1)
	}
	if x.IntStringMapPtr != nil {
		for k1, v1 := range *x.IntStringMapPtr {
			_, _ = k1, v1
			c += len(v1)
		}
	}
	if x.IntStringPtrMapPtr != nil {
		for k1, v1 := range *x.IntStringPtrMapPtr {
			_, _ = k1, v1
			c += len(*v1)
		}
	}
	if x.IntPtrStringPtrMapPtr != nil {
		for k1, v1 := range *x.IntPtrStringPtrMapPtr {
			_, _ = k1, v1
			c += len(*v1)
		}
	}
	for k1, v1 := range x.StringFloatMap {
		_, _ = k1, v1
		c += len(k1)
	}
	for k1, v1 := range x.StringFloatPtrMap {
		_, _ = k1, v1
		c += len(k1)
	}
	if x.StringFloatMapPtr != nil {
		for k1, v1 := range *x.StringFloatMapPtr {
			_, _ = k1, v1
			c += len(k1)
		}
	}
	if x.StringFloatPtrMapPtr != nil {
		for k1, v1 := range *x.StringFloatPtrMapPtr {
			_, _ = k1, v1
			c += len(k1)
		}
	}
	if x.StringPtrFloatPtrMapPtr != nil {
		for k1, v1 := range *x.StringPtrFloatPtrMapPtr {
			_, _ = k1, v1
			c += len(*k1)
		}
	}
	return c
}

func (i6 TestObject1Inspector) cpy(buf []byte, l, r *testobj.TestObject1) error {
	if len(r.IntSlice) > 0 {
		buf1 := make([]int32, 0, len(r.IntSlice))
		for i1 := 0; i1 < len(r.IntSlice); i1++ {
			var b1 int32
			x1 := (l.IntSlice)[i1]
			b1 = x1
			buf1 = append(buf1, b1)
		}
		l.IntSlice = buf1
	}
	if len(r.IntPtrSlice) > 0 {
		buf1 := make([]*int32, 0, len(r.IntPtrSlice))
		for i1 := 0; i1 < len(r.IntPtrSlice); i1++ {
			var b1 *int32
			x1 := (l.IntPtrSlice)[i1]
			b1 = x1
			buf1 = append(buf1, b1)
		}
		l.IntPtrSlice = buf1
	}
	if l.IntSlicePtr != nil {
		if len(*r.IntSlicePtr) > 0 {
			buf1 := make([]int32, 0, len(*r.IntSlicePtr))
			for i1 := 0; i1 < len(*r.IntSlicePtr); i1++ {
				var b1 int32
				x1 := (*l.IntSlicePtr)[i1]
				b1 = x1
				buf1 = append(buf1, b1)
			}
			l.IntSlicePtr = &buf1
		}
	}
	if l.IntPtrSlicePtr != nil {
		if len(*r.IntPtrSlicePtr) > 0 {
			buf1 := make([]*int32, 0, len(*r.IntPtrSlicePtr))
			for i1 := 0; i1 < len(*r.IntPtrSlicePtr); i1++ {
				var b1 *int32
				x1 := (*l.IntPtrSlicePtr)[i1]
				b1 = x1
				buf1 = append(buf1, b1)
			}
			l.IntPtrSlicePtr = &buf1
		}
	}
	buf, l.ByteSlice = inspector.Bufferize(buf, r.ByteSlice)
	if len(r.BytePtrSlice) > 0 {
		buf1 := make([]*byte, 0, len(r.BytePtrSlice))
		for i1 := 0; i1 < len(r.BytePtrSlice); i1++ {
			var b1 *byte
			x1 := (l.BytePtrSlice)[i1]
			b1 = x1
			buf1 = append(buf1, b1)
		}
		l.BytePtrSlice = buf1
	}
	if len(r.FloatSlice) > 0 {
		buf1 := make(testobj.TestFloatSlice, 0, len(r.FloatSlice))
		for i1 := 0; i1 < len(r.FloatSlice); i1++ {
			var b1 float32
			x1 := (l.FloatSlice)[i1]
			b1 = x1
			buf1 = append(buf1, b1)
		}
		l.FloatSlice = buf1
	}
	if len(r.FloatPtrSlice) > 0 {
		buf1 := make(testobj.TestFloatPtrSlice, 0, len(r.FloatPtrSlice))
		for i1 := 0; i1 < len(r.FloatPtrSlice); i1++ {
			var b1 *float32
			x1 := (l.FloatPtrSlice)[i1]
			b1 = x1
			buf1 = append(buf1, b1)
		}
		l.FloatPtrSlice = buf1
	}
	if l.FloatSlicePtr != nil {
		if len(*r.FloatSlicePtr) > 0 {
			buf1 := make(testobj.TestFloatSlice, 0, len(*r.FloatSlicePtr))
			for i1 := 0; i1 < len(*r.FloatSlicePtr); i1++ {
				var b1 float32
				x1 := (*l.FloatSlicePtr)[i1]
				b1 = x1
				buf1 = append(buf1, b1)
			}
			l.FloatSlicePtr = &buf1
		}
	}
	if l.FloatPtrSlicePtr != nil {
		if len(*r.FloatPtrSlicePtr) > 0 {
			buf1 := make(testobj.TestFloatPtrSlice, 0, len(*r.FloatPtrSlicePtr))
			for i1 := 0; i1 < len(*r.FloatPtrSlicePtr); i1++ {
				var b1 *float32
				x1 := (*l.FloatPtrSlicePtr)[i1]
				b1 = x1
				buf1 = append(buf1, b1)
			}
			l.FloatPtrSlicePtr = &buf1
		}
	}
	if len(r.IntStringMap) > 0 {
		buf1 := make(map[int]string, len(r.IntStringMap))
		_ = buf1
		for rk, rv := range r.IntStringMap {
			_, _ = rk, rv
			var lk int
			lk = rk
			var lv string
			buf, lv = inspector.BufferizeString(buf, rv)
			(l.IntStringMap)[lk] = lv
		}
	}
	if len(r.IntStringPtrMap) > 0 {
		buf1 := make(map[int]*string, len(r.IntStringPtrMap))
		_ = buf1
		for rk, rv := range r.IntStringPtrMap {
			_, _ = rk, rv
			var lk int
			lk = rk
			var lv *string
			buf, *lv = inspector.BufferizeString(buf, *rv)
			(l.IntStringPtrMap)[lk] = lv
		}
	}
	if l.IntStringMapPtr != nil {
		if len(*r.IntStringMapPtr) > 0 {
			buf1 := make(map[int]string, len(*r.IntStringMapPtr))
			_ = buf1
			for rk, rv := range *r.IntStringMapPtr {
				_, _ = rk, rv
				var lk int
				lk = rk
				var lv string
				buf, lv = inspector.BufferizeString(buf, rv)
				(*l.IntStringMapPtr)[lk] = lv
			}
		}
	}
	if l.IntStringPtrMapPtr != nil {
		if len(*r.IntStringPtrMapPtr) > 0 {
			buf1 := make(map[int]*string, len(*r.IntStringPtrMapPtr))
			_ = buf1
			for rk, rv := range *r.IntStringPtrMapPtr {
				_, _ = rk, rv
				var lk int
				lk = rk
				var lv *string
				buf, *lv = inspector.BufferizeString(buf, *rv)
				(*l.IntStringPtrMapPtr)[lk] = lv
			}
		}
	}
	if l.IntPtrStringPtrMapPtr != nil {
		if len(*r.IntPtrStringPtrMapPtr) > 0 {
			buf1 := make(map[*int]*string, len(*r.IntPtrStringPtrMapPtr))
			_ = buf1
			for rk, rv := range *r.IntPtrStringPtrMapPtr {
				_, _ = rk, rv
				var lk *int
				lk = rk
				var lv *string
				buf, *lv = inspector.BufferizeString(buf, *rv)
				(*l.IntPtrStringPtrMapPtr)[lk] = lv
			}
		}
	}
	if len(r.StringFloatMap) > 0 {
		buf1 := make(testobj.TestStringFloatMap, len(r.StringFloatMap))
		_ = buf1
		for rk, rv := range r.StringFloatMap {
			_, _ = rk, rv
			var lk string
			buf, lk = inspector.BufferizeString(buf, rk)
			var lv float64
			lv = rv
			(l.StringFloatMap)[lk] = lv
		}
	}
	if len(r.StringFloatPtrMap) > 0 {
		buf1 := make(testobj.TestStringFloatPtrMap, len(r.StringFloatPtrMap))
		_ = buf1
		for rk, rv := range r.StringFloatPtrMap {
			_, _ = rk, rv
			var lk string
			buf, lk = inspector.BufferizeString(buf, rk)
			var lv *float64
			lv = rv
			(l.StringFloatPtrMap)[lk] = lv
		}
	}
	if l.StringFloatMapPtr != nil {
		if len(*r.StringFloatMapPtr) > 0 {
			buf1 := make(testobj.TestStringFloatMap, len(*r.StringFloatMapPtr))
			_ = buf1
			for rk, rv := range *r.StringFloatMapPtr {
				_, _ = rk, rv
				var lk string
				buf, lk = inspector.BufferizeString(buf, rk)
				var lv float64
				lv = rv
				(*l.StringFloatMapPtr)[lk] = lv
			}
		}
	}
	if l.StringFloatPtrMapPtr != nil {
		if len(*r.StringFloatPtrMapPtr) > 0 {
			buf1 := make(testobj.TestStringFloatPtrMap, len(*r.StringFloatPtrMapPtr))
			_ = buf1
			for rk, rv := range *r.StringFloatPtrMapPtr {
				_, _ = rk, rv
				var lk string
				buf, lk = inspector.BufferizeString(buf, rk)
				var lv *float64
				lv = rv
				(*l.StringFloatPtrMapPtr)[lk] = lv
			}
		}
	}
	if l.StringPtrFloatPtrMapPtr != nil {
		if len(*r.StringPtrFloatPtrMapPtr) > 0 {
			buf1 := make(testobj.TestStringPtrFloatPtrMap, len(*r.StringPtrFloatPtrMapPtr))
			_ = buf1
			for rk, rv := range *r.StringPtrFloatPtrMapPtr {
				_, _ = rk, rv
				var lk *string
				buf, *lk = inspector.BufferizeString(buf, *rk)
				var lv *float64
				lv = rv
				(*l.StringPtrFloatPtrMapPtr)[lk] = lv
			}
		}
	}
	return nil
}
