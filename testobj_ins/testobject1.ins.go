// Code generated by inspc. DO NOT EDIT.
// source: github.com/koykov/inspector/testobj

package testobj_ins

import (
	"bytes"
	"encoding/json"
	"github.com/koykov/fastconv"
	"github.com/koykov/inspector"
	"github.com/koykov/inspector/testobj"
	"strconv"
)

type TestObject1Inspector struct {
	inspector.BaseInspector
}

func (i6 TestObject1Inspector) TypeName() string {
	return "TestObject1"
}

func (i6 TestObject1Inspector) Get(src interface{}, path ...string) (interface{}, error) {
	var buf interface{}
	err := i6.GetTo(src, &buf, path...)
	return buf, err
}

func (i6 TestObject1Inspector) GetTo(src interface{}, buf *interface{}, path ...string) (err error) {
	if src == nil {
		return
	}
	var x *testobj.TestObject1
	_ = x
	if p, ok := src.(**testobj.TestObject1); ok {
		x = *p
	} else if p, ok := src.(*testobj.TestObject1); ok {
		x = p
	} else if v, ok := src.(testobj.TestObject1); ok {
		x = &v
	} else {
		return
	}
	if len(path) == 0 {
		*buf = &(*x)
		return
	}

	if len(path) > 0 {
		if path[0] == "IntSlice" {
			x0 := x.IntSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t44, err44 := strconv.ParseInt(path[1], 0, 0)
				if err44 != nil {
					return err44
				}
				i = int(t44)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					*buf = &x1
					return
				}
			}
			*buf = &x.IntSlice
			return
		}
		if path[0] == "IntPtrSlice" {
			x0 := x.IntPtrSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t45, err45 := strconv.ParseInt(path[1], 0, 0)
				if err45 != nil {
					return err45
				}
				i = int(t45)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.IntPtrSlice
			return
		}
		if path[0] == "IntSlicePtr" {
			x0 := x.IntSlicePtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t46, err46 := strconv.ParseInt(path[1], 0, 0)
				if err46 != nil {
					return err46
				}
				i = int(t46)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					*buf = &x1
					return
				}
			}
			*buf = &x.IntSlicePtr
			return
		}
		if path[0] == "IntPtrSlicePtr" {
			x0 := x.IntPtrSlicePtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t47, err47 := strconv.ParseInt(path[1], 0, 0)
				if err47 != nil {
					return err47
				}
				i = int(t47)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.IntPtrSlicePtr
			return
		}
		if path[0] == "ByteSlice" {
			*buf = &x.ByteSlice
			return
		}
		if path[0] == "BytePtrSlice" {
			x0 := x.BytePtrSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t48, err48 := strconv.ParseInt(path[1], 0, 0)
				if err48 != nil {
					return err48
				}
				i = int(t48)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.BytePtrSlice
			return
		}
		if path[0] == "ByteSlicePtr" {
			*buf = &x.ByteSlicePtr
			return
		}
		if path[0] == "BytePtrSlicePtr" {
			x0 := x.BytePtrSlicePtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t49, err49 := strconv.ParseInt(path[1], 0, 0)
				if err49 != nil {
					return err49
				}
				i = int(t49)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.BytePtrSlicePtr
			return
		}
		if path[0] == "FloatSlice" {
			x0 := x.FloatSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t50, err50 := strconv.ParseInt(path[1], 0, 0)
				if err50 != nil {
					return err50
				}
				i = int(t50)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					*buf = &x1
					return
				}
			}
			*buf = &x.FloatSlice
			return
		}
		if path[0] == "FloatPtrSlice" {
			x0 := x.FloatPtrSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t51, err51 := strconv.ParseInt(path[1], 0, 0)
				if err51 != nil {
					return err51
				}
				i = int(t51)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.FloatPtrSlice
			return
		}
		if path[0] == "FloatSlicePtr" {
			x0 := x.FloatSlicePtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t52, err52 := strconv.ParseInt(path[1], 0, 0)
				if err52 != nil {
					return err52
				}
				i = int(t52)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					*buf = &x1
					return
				}
			}
			*buf = &x.FloatSlicePtr
			return
		}
		if path[0] == "FloatPtrSlicePtr" {
			x0 := x.FloatPtrSlicePtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t53, err53 := strconv.ParseInt(path[1], 0, 0)
				if err53 != nil {
					return err53
				}
				i = int(t53)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.FloatPtrSlicePtr
			return
		}
		if path[0] == "StructSlice" {
			x0 := x.StructSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t54, err54 := strconv.ParseInt(path[1], 0, 0)
				if err54 != nil {
					return err54
				}
				i = int(t54)
				if len(x0) > i {
					x1 := &(x0)[i]
					_ = x1
					if len(path) > 2 {
						if path[2] == "A" {
							*buf = &x1.A
							return
						}
						if path[2] == "S" {
							*buf = &x1.S
							return
						}
						if path[2] == "B" {
							*buf = &x1.B
							return
						}
						if path[2] == "I" {
							*buf = &x1.I
							return
						}
						if path[2] == "I8" {
							*buf = &x1.I8
							return
						}
						if path[2] == "I16" {
							*buf = &x1.I16
							return
						}
						if path[2] == "I32" {
							*buf = &x1.I32
							return
						}
						if path[2] == "I64" {
							*buf = &x1.I64
							return
						}
						if path[2] == "U" {
							*buf = &x1.U
							return
						}
						if path[2] == "U8" {
							*buf = &x1.U8
							return
						}
						if path[2] == "U16" {
							*buf = &x1.U16
							return
						}
						if path[2] == "U32" {
							*buf = &x1.U32
							return
						}
						if path[2] == "U64" {
							*buf = &x1.U64
							return
						}
						if path[2] == "F" {
							*buf = &x1.F
							return
						}
						if path[2] == "D" {
							*buf = &x1.D
							return
						}
					}
					*buf = x1
				}
			}
			*buf = &x.StructSlice
			return
		}
		if path[0] == "StructPtrSlice" {
			x0 := x.StructPtrSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t55, err55 := strconv.ParseInt(path[1], 0, 0)
				if err55 != nil {
					return err55
				}
				i = int(t55)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if len(path) > 2 {
						if x1 == nil {
							return
						}
						if path[2] == "A" {
							*buf = &x1.A
							return
						}
						if path[2] == "S" {
							*buf = &x1.S
							return
						}
						if path[2] == "B" {
							*buf = &x1.B
							return
						}
						if path[2] == "I" {
							*buf = &x1.I
							return
						}
						if path[2] == "I8" {
							*buf = &x1.I8
							return
						}
						if path[2] == "I16" {
							*buf = &x1.I16
							return
						}
						if path[2] == "I32" {
							*buf = &x1.I32
							return
						}
						if path[2] == "I64" {
							*buf = &x1.I64
							return
						}
						if path[2] == "U" {
							*buf = &x1.U
							return
						}
						if path[2] == "U8" {
							*buf = &x1.U8
							return
						}
						if path[2] == "U16" {
							*buf = &x1.U16
							return
						}
						if path[2] == "U32" {
							*buf = &x1.U32
							return
						}
						if path[2] == "U64" {
							*buf = &x1.U64
							return
						}
						if path[2] == "F" {
							*buf = &x1.F
							return
						}
						if path[2] == "D" {
							*buf = &x1.D
							return
						}
					}
					*buf = x1
				}
			}
			*buf = &x.StructPtrSlice
			return
		}
		if path[0] == "StructSlicePtr" {
			x0 := x.StructSlicePtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t56, err56 := strconv.ParseInt(path[1], 0, 0)
				if err56 != nil {
					return err56
				}
				i = int(t56)
				if len(*x0) > i {
					x1 := &(*x0)[i]
					_ = x1
					if len(path) > 2 {
						if path[2] == "A" {
							*buf = &x1.A
							return
						}
						if path[2] == "S" {
							*buf = &x1.S
							return
						}
						if path[2] == "B" {
							*buf = &x1.B
							return
						}
						if path[2] == "I" {
							*buf = &x1.I
							return
						}
						if path[2] == "I8" {
							*buf = &x1.I8
							return
						}
						if path[2] == "I16" {
							*buf = &x1.I16
							return
						}
						if path[2] == "I32" {
							*buf = &x1.I32
							return
						}
						if path[2] == "I64" {
							*buf = &x1.I64
							return
						}
						if path[2] == "U" {
							*buf = &x1.U
							return
						}
						if path[2] == "U8" {
							*buf = &x1.U8
							return
						}
						if path[2] == "U16" {
							*buf = &x1.U16
							return
						}
						if path[2] == "U32" {
							*buf = &x1.U32
							return
						}
						if path[2] == "U64" {
							*buf = &x1.U64
							return
						}
						if path[2] == "F" {
							*buf = &x1.F
							return
						}
						if path[2] == "D" {
							*buf = &x1.D
							return
						}
					}
					*buf = x1
				}
			}
			*buf = &x.StructSlicePtr
			return
		}
		if path[0] == "StructPtrSlicePtr" {
			x0 := x.StructPtrSlicePtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t57, err57 := strconv.ParseInt(path[1], 0, 0)
				if err57 != nil {
					return err57
				}
				i = int(t57)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if len(path) > 2 {
						if x1 == nil {
							return
						}
						if path[2] == "A" {
							*buf = &x1.A
							return
						}
						if path[2] == "S" {
							*buf = &x1.S
							return
						}
						if path[2] == "B" {
							*buf = &x1.B
							return
						}
						if path[2] == "I" {
							*buf = &x1.I
							return
						}
						if path[2] == "I8" {
							*buf = &x1.I8
							return
						}
						if path[2] == "I16" {
							*buf = &x1.I16
							return
						}
						if path[2] == "I32" {
							*buf = &x1.I32
							return
						}
						if path[2] == "I64" {
							*buf = &x1.I64
							return
						}
						if path[2] == "U" {
							*buf = &x1.U
							return
						}
						if path[2] == "U8" {
							*buf = &x1.U8
							return
						}
						if path[2] == "U16" {
							*buf = &x1.U16
							return
						}
						if path[2] == "U32" {
							*buf = &x1.U32
							return
						}
						if path[2] == "U64" {
							*buf = &x1.U64
							return
						}
						if path[2] == "F" {
							*buf = &x1.F
							return
						}
						if path[2] == "D" {
							*buf = &x1.D
							return
						}
					}
					*buf = x1
				}
			}
			*buf = &x.StructPtrSlicePtr
			return
		}
		if path[0] == "IntStringMap" {
			x0 := x.IntStringMap
			_ = x0
			if len(path) > 1 {
				var k int
				t58, err58 := strconv.ParseInt(path[1], 0, 0)
				if err58 != nil {
					return err58
				}
				k = int(t58)
				x1 := (x0)[k]
				_ = x1
				*buf = &x1
				return
			}
			*buf = &x.IntStringMap
			return
		}
		if path[0] == "IntStringPtrMap" {
			x0 := x.IntStringPtrMap
			_ = x0
			if len(path) > 1 {
				var k int
				t59, err59 := strconv.ParseInt(path[1], 0, 0)
				if err59 != nil {
					return err59
				}
				k = int(t59)
				x1 := (x0)[k]
				_ = x1
				if x1 == nil {
					return
				}
				*buf = &x1
				return
			}
			*buf = &x.IntStringPtrMap
			return
		}
		if path[0] == "IntStringMapPtr" {
			x0 := x.IntStringMapPtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var k int
				t60, err60 := strconv.ParseInt(path[1], 0, 0)
				if err60 != nil {
					return err60
				}
				k = int(t60)
				x1 := (*x0)[k]
				_ = x1
				*buf = &x1
				return
			}
			*buf = &x.IntStringMapPtr
			return
		}
		if path[0] == "IntStringPtrMapPtr" {
			x0 := x.IntStringPtrMapPtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var k int
				t61, err61 := strconv.ParseInt(path[1], 0, 0)
				if err61 != nil {
					return err61
				}
				k = int(t61)
				x1 := (*x0)[k]
				_ = x1
				if x1 == nil {
					return
				}
				*buf = &x1
				return
			}
			*buf = &x.IntStringPtrMapPtr
			return
		}
		if path[0] == "IntPtrStringPtrMapPtr" {
			x0 := x.IntPtrStringPtrMapPtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var k int
				t62, err62 := strconv.ParseInt(path[1], 0, 0)
				if err62 != nil {
					return err62
				}
				k = int(t62)
				x1 := (*x0)[&k]
				_ = x1
				if x1 == nil {
					return
				}
				*buf = &x1
				return
			}
			*buf = &x.IntPtrStringPtrMapPtr
			return
		}
		if path[0] == "StringFloatMap" {
			x0 := x.StringFloatMap
			_ = x0
			if len(path) > 1 {
				if x1, ok := (x0)[path[1]]; ok {
					_ = x1
					*buf = &x1
					return
				}
			}
			*buf = &x.StringFloatMap
			return
		}
		if path[0] == "StringFloatPtrMap" {
			x0 := x.StringFloatPtrMap
			_ = x0
			if len(path) > 1 {
				if x1, ok := (x0)[path[1]]; ok {
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.StringFloatPtrMap
			return
		}
		if path[0] == "StringFloatMapPtr" {
			x0 := x.StringFloatMapPtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				if x1, ok := (*x0)[path[1]]; ok {
					_ = x1
					*buf = &x1
					return
				}
			}
			*buf = &x.StringFloatMapPtr
			return
		}
		if path[0] == "StringFloatPtrMapPtr" {
			x0 := x.StringFloatPtrMapPtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				if x1, ok := (*x0)[path[1]]; ok {
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.StringFloatPtrMapPtr
			return
		}
		if path[0] == "StringPtrFloatPtrMapPtr" {
			x0 := x.StringPtrFloatPtrMapPtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				if x1, ok := (*x0)[&path[1]]; ok {
					_ = x1
					if x1 == nil {
						return
					}
					*buf = &x1
					return
				}
			}
			*buf = &x.StringPtrFloatPtrMapPtr
			return
		}
		if path[0] == "FloatStructMap" {
			x0 := x.FloatStructMap
			_ = x0
			if len(path) > 1 {
				var k float64
				t63, err63 := strconv.ParseFloat(path[1], 0)
				if err63 != nil {
					return err63
				}
				k = float64(t63)
				x1 := (x0)[k]
				_ = x1
				if len(path) > 2 {
					if path[2] == "A" {
						*buf = &x1.A
						return
					}
					if path[2] == "S" {
						*buf = &x1.S
						return
					}
					if path[2] == "B" {
						*buf = &x1.B
						return
					}
					if path[2] == "I" {
						*buf = &x1.I
						return
					}
					if path[2] == "I8" {
						*buf = &x1.I8
						return
					}
					if path[2] == "I16" {
						*buf = &x1.I16
						return
					}
					if path[2] == "I32" {
						*buf = &x1.I32
						return
					}
					if path[2] == "I64" {
						*buf = &x1.I64
						return
					}
					if path[2] == "U" {
						*buf = &x1.U
						return
					}
					if path[2] == "U8" {
						*buf = &x1.U8
						return
					}
					if path[2] == "U16" {
						*buf = &x1.U16
						return
					}
					if path[2] == "U32" {
						*buf = &x1.U32
						return
					}
					if path[2] == "U64" {
						*buf = &x1.U64
						return
					}
					if path[2] == "F" {
						*buf = &x1.F
						return
					}
					if path[2] == "D" {
						*buf = &x1.D
						return
					}
				}
				*buf = &x1
			}
			*buf = &x.FloatStructMap
			return
		}
		if path[0] == "FloatStructPtrMap" {
			x0 := x.FloatStructPtrMap
			_ = x0
			if len(path) > 1 {
				var k float64
				t64, err64 := strconv.ParseFloat(path[1], 0)
				if err64 != nil {
					return err64
				}
				k = float64(t64)
				x1 := (x0)[k]
				_ = x1
				if len(path) > 2 {
					if x1 == nil {
						return
					}
					if path[2] == "A" {
						*buf = &x1.A
						return
					}
					if path[2] == "S" {
						*buf = &x1.S
						return
					}
					if path[2] == "B" {
						*buf = &x1.B
						return
					}
					if path[2] == "I" {
						*buf = &x1.I
						return
					}
					if path[2] == "I8" {
						*buf = &x1.I8
						return
					}
					if path[2] == "I16" {
						*buf = &x1.I16
						return
					}
					if path[2] == "I32" {
						*buf = &x1.I32
						return
					}
					if path[2] == "I64" {
						*buf = &x1.I64
						return
					}
					if path[2] == "U" {
						*buf = &x1.U
						return
					}
					if path[2] == "U8" {
						*buf = &x1.U8
						return
					}
					if path[2] == "U16" {
						*buf = &x1.U16
						return
					}
					if path[2] == "U32" {
						*buf = &x1.U32
						return
					}
					if path[2] == "U64" {
						*buf = &x1.U64
						return
					}
					if path[2] == "F" {
						*buf = &x1.F
						return
					}
					if path[2] == "D" {
						*buf = &x1.D
						return
					}
				}
				*buf = &x1
			}
			*buf = &x.FloatStructPtrMap
			return
		}
		if path[0] == "FloatPtrStructMap" {
			x0 := x.FloatPtrStructMap
			_ = x0
			if len(path) > 1 {
				var k float64
				t65, err65 := strconv.ParseFloat(path[1], 0)
				if err65 != nil {
					return err65
				}
				k = float64(t65)
				x1 := (x0)[&k]
				_ = x1
				if len(path) > 2 {
					if path[2] == "A" {
						*buf = &x1.A
						return
					}
					if path[2] == "S" {
						*buf = &x1.S
						return
					}
					if path[2] == "B" {
						*buf = &x1.B
						return
					}
					if path[2] == "I" {
						*buf = &x1.I
						return
					}
					if path[2] == "I8" {
						*buf = &x1.I8
						return
					}
					if path[2] == "I16" {
						*buf = &x1.I16
						return
					}
					if path[2] == "I32" {
						*buf = &x1.I32
						return
					}
					if path[2] == "I64" {
						*buf = &x1.I64
						return
					}
					if path[2] == "U" {
						*buf = &x1.U
						return
					}
					if path[2] == "U8" {
						*buf = &x1.U8
						return
					}
					if path[2] == "U16" {
						*buf = &x1.U16
						return
					}
					if path[2] == "U32" {
						*buf = &x1.U32
						return
					}
					if path[2] == "U64" {
						*buf = &x1.U64
						return
					}
					if path[2] == "F" {
						*buf = &x1.F
						return
					}
					if path[2] == "D" {
						*buf = &x1.D
						return
					}
				}
				*buf = &x1
			}
			*buf = &x.FloatPtrStructMap
			return
		}
		if path[0] == "FloatPtrStructPtrMap" {
			x0 := x.FloatPtrStructPtrMap
			_ = x0
			if len(path) > 1 {
				var k float64
				t66, err66 := strconv.ParseFloat(path[1], 0)
				if err66 != nil {
					return err66
				}
				k = float64(t66)
				x1 := (x0)[&k]
				_ = x1
				if len(path) > 2 {
					if x1 == nil {
						return
					}
					if path[2] == "A" {
						*buf = &x1.A
						return
					}
					if path[2] == "S" {
						*buf = &x1.S
						return
					}
					if path[2] == "B" {
						*buf = &x1.B
						return
					}
					if path[2] == "I" {
						*buf = &x1.I
						return
					}
					if path[2] == "I8" {
						*buf = &x1.I8
						return
					}
					if path[2] == "I16" {
						*buf = &x1.I16
						return
					}
					if path[2] == "I32" {
						*buf = &x1.I32
						return
					}
					if path[2] == "I64" {
						*buf = &x1.I64
						return
					}
					if path[2] == "U" {
						*buf = &x1.U
						return
					}
					if path[2] == "U8" {
						*buf = &x1.U8
						return
					}
					if path[2] == "U16" {
						*buf = &x1.U16
						return
					}
					if path[2] == "U32" {
						*buf = &x1.U32
						return
					}
					if path[2] == "U64" {
						*buf = &x1.U64
						return
					}
					if path[2] == "F" {
						*buf = &x1.F
						return
					}
					if path[2] == "D" {
						*buf = &x1.D
						return
					}
				}
				*buf = &x1
			}
			*buf = &x.FloatPtrStructPtrMap
			return
		}
		if path[0] == "FloatPtrStructPtrMapPtr" {
			x0 := x.FloatPtrStructPtrMapPtr
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var k float64
				t67, err67 := strconv.ParseFloat(path[1], 0)
				if err67 != nil {
					return err67
				}
				k = float64(t67)
				x1 := (*x0)[&k]
				_ = x1
				if len(path) > 2 {
					if x1 == nil {
						return
					}
					if path[2] == "A" {
						*buf = &x1.A
						return
					}
					if path[2] == "S" {
						*buf = &x1.S
						return
					}
					if path[2] == "B" {
						*buf = &x1.B
						return
					}
					if path[2] == "I" {
						*buf = &x1.I
						return
					}
					if path[2] == "I8" {
						*buf = &x1.I8
						return
					}
					if path[2] == "I16" {
						*buf = &x1.I16
						return
					}
					if path[2] == "I32" {
						*buf = &x1.I32
						return
					}
					if path[2] == "I64" {
						*buf = &x1.I64
						return
					}
					if path[2] == "U" {
						*buf = &x1.U
						return
					}
					if path[2] == "U8" {
						*buf = &x1.U8
						return
					}
					if path[2] == "U16" {
						*buf = &x1.U16
						return
					}
					if path[2] == "U32" {
						*buf = &x1.U32
						return
					}
					if path[2] == "U64" {
						*buf = &x1.U64
						return
					}
					if path[2] == "F" {
						*buf = &x1.F
						return
					}
					if path[2] == "D" {
						*buf = &x1.D
						return
					}
				}
				*buf = &x1
			}
			*buf = &x.FloatPtrStructPtrMapPtr
			return
		}
	}
	return
}

func (i6 TestObject1Inspector) Cmp(src interface{}, cond inspector.Op, right string, result *bool, path ...string) (err error) {
	if len(path) == 0 {
		return
	}
	if src == nil {
		return
	}
	var x *testobj.TestObject1
	_ = x
	if p, ok := src.(**testobj.TestObject1); ok {
		x = *p
	} else if p, ok := src.(*testobj.TestObject1); ok {
		x = p
	} else if v, ok := src.(testobj.TestObject1); ok {
		x = &v
	} else {
		return
	}

	if len(path) > 0 {
		if path[0] == "IntSlice" {
			x0 := x.IntSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t68, err68 := strconv.ParseInt(path[1], 0, 0)
				if err68 != nil {
					return err68
				}
				i = int(t68)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					var rightExact int32
					t69, err69 := strconv.ParseInt(right, 0, 0)
					if err69 != nil {
						return err69
					}
					rightExact = int32(t69)
					switch cond {
					case inspector.OpEq:
						*result = x1 == rightExact
					case inspector.OpNq:
						*result = x1 != rightExact
					case inspector.OpGt:
						*result = x1 > rightExact
					case inspector.OpGtq:
						*result = x1 >= rightExact
					case inspector.OpLt:
						*result = x1 < rightExact
					case inspector.OpLtq:
						*result = x1 <= rightExact
					}
					return
				}
			}
		}
		if path[0] == "IntPtrSlice" {
			x0 := x.IntPtrSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t70, err70 := strconv.ParseInt(path[1], 0, 0)
				if err70 != nil {
					return err70
				}
				i = int(t70)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
		if path[0] == "IntSlicePtr" {
			x0 := x.IntSlicePtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t71, err71 := strconv.ParseInt(path[1], 0, 0)
				if err71 != nil {
					return err71
				}
				i = int(t71)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					var rightExact int32
					t72, err72 := strconv.ParseInt(right, 0, 0)
					if err72 != nil {
						return err72
					}
					rightExact = int32(t72)
					switch cond {
					case inspector.OpEq:
						*result = x1 == rightExact
					case inspector.OpNq:
						*result = x1 != rightExact
					case inspector.OpGt:
						*result = x1 > rightExact
					case inspector.OpGtq:
						*result = x1 >= rightExact
					case inspector.OpLt:
						*result = x1 < rightExact
					case inspector.OpLtq:
						*result = x1 <= rightExact
					}
					return
				}
			}
		}
		if path[0] == "IntPtrSlicePtr" {
			x0 := x.IntPtrSlicePtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t73, err73 := strconv.ParseInt(path[1], 0, 0)
				if err73 != nil {
					return err73
				}
				i = int(t73)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
		if path[0] == "ByteSlice" {
			var rightExact []byte
			rightExact = fastconv.S2B(right)

			if cond == inspector.OpEq {
				*result = bytes.Equal(x.ByteSlice, rightExact)
			} else {
				*result = !bytes.Equal(x.ByteSlice, rightExact)
			}
			return
		}
		if path[0] == "BytePtrSlice" {
			x0 := x.BytePtrSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t75, err75 := strconv.ParseInt(path[1], 0, 0)
				if err75 != nil {
					return err75
				}
				i = int(t75)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
		if path[0] == "ByteSlicePtr" {
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x.ByteSlicePtr == nil
				} else {
					*result = x.ByteSlicePtr != nil
				}
				return
			}
			return
		}
		if path[0] == "BytePtrSlicePtr" {
			x0 := x.BytePtrSlicePtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t76, err76 := strconv.ParseInt(path[1], 0, 0)
				if err76 != nil {
					return err76
				}
				i = int(t76)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
		if path[0] == "FloatSlice" {
			x0 := x.FloatSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t77, err77 := strconv.ParseInt(path[1], 0, 0)
				if err77 != nil {
					return err77
				}
				i = int(t77)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					var rightExact float32
					t78, err78 := strconv.ParseFloat(right, 0)
					if err78 != nil {
						return err78
					}
					rightExact = float32(t78)
					switch cond {
					case inspector.OpEq:
						*result = x1 == rightExact
					case inspector.OpNq:
						*result = x1 != rightExact
					case inspector.OpGt:
						*result = x1 > rightExact
					case inspector.OpGtq:
						*result = x1 >= rightExact
					case inspector.OpLt:
						*result = x1 < rightExact
					case inspector.OpLtq:
						*result = x1 <= rightExact
					}
					return
				}
			}
		}
		if path[0] == "FloatPtrSlice" {
			x0 := x.FloatPtrSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t79, err79 := strconv.ParseInt(path[1], 0, 0)
				if err79 != nil {
					return err79
				}
				i = int(t79)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
		if path[0] == "FloatSlicePtr" {
			x0 := x.FloatSlicePtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t80, err80 := strconv.ParseInt(path[1], 0, 0)
				if err80 != nil {
					return err80
				}
				i = int(t80)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					var rightExact float32
					t81, err81 := strconv.ParseFloat(right, 0)
					if err81 != nil {
						return err81
					}
					rightExact = float32(t81)
					switch cond {
					case inspector.OpEq:
						*result = x1 == rightExact
					case inspector.OpNq:
						*result = x1 != rightExact
					case inspector.OpGt:
						*result = x1 > rightExact
					case inspector.OpGtq:
						*result = x1 >= rightExact
					case inspector.OpLt:
						*result = x1 < rightExact
					case inspector.OpLtq:
						*result = x1 <= rightExact
					}
					return
				}
			}
		}
		if path[0] == "FloatPtrSlicePtr" {
			x0 := x.FloatPtrSlicePtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t82, err82 := strconv.ParseInt(path[1], 0, 0)
				if err82 != nil {
					return err82
				}
				i = int(t82)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
		if path[0] == "StructSlice" {
			x0 := x.StructSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t83, err83 := strconv.ParseInt(path[1], 0, 0)
				if err83 != nil {
					return err83
				}
				i = int(t83)
				if len(x0) > i {
					x1 := &(x0)[i]
					_ = x1
					if len(path) > 2 {
						if path[2] == "A" {
							var rightExact byte
							t84 := fastconv.S2B(right)
							if len(t84) > 0 {
								rightExact = t84[0]
							}

							switch cond {
							case inspector.OpEq:
								*result = x1.A == rightExact
							case inspector.OpNq:
								*result = x1.A != rightExact
							case inspector.OpGt:
								*result = x1.A > rightExact
							case inspector.OpGtq:
								*result = x1.A >= rightExact
							case inspector.OpLt:
								*result = x1.A < rightExact
							case inspector.OpLtq:
								*result = x1.A <= rightExact
							}
							return
						}
						if path[2] == "S" {
							var rightExact string
							rightExact = right

							switch cond {
							case inspector.OpEq:
								*result = x1.S == rightExact
							case inspector.OpNq:
								*result = x1.S != rightExact
							case inspector.OpGt:
								*result = x1.S > rightExact
							case inspector.OpGtq:
								*result = x1.S >= rightExact
							case inspector.OpLt:
								*result = x1.S < rightExact
							case inspector.OpLtq:
								*result = x1.S <= rightExact
							}
							return
						}
						if path[2] == "B" {
							var rightExact []byte
							rightExact = fastconv.S2B(right)

							if cond == inspector.OpEq {
								*result = bytes.Equal(x1.B, rightExact)
							} else {
								*result = !bytes.Equal(x1.B, rightExact)
							}
							return
						}
						if path[2] == "I" {
							var rightExact int
							t87, err87 := strconv.ParseInt(right, 0, 0)
							if err87 != nil {
								return err87
							}
							rightExact = int(t87)
							switch cond {
							case inspector.OpEq:
								*result = x1.I == rightExact
							case inspector.OpNq:
								*result = x1.I != rightExact
							case inspector.OpGt:
								*result = x1.I > rightExact
							case inspector.OpGtq:
								*result = x1.I >= rightExact
							case inspector.OpLt:
								*result = x1.I < rightExact
							case inspector.OpLtq:
								*result = x1.I <= rightExact
							}
							return
						}
						if path[2] == "I8" {
							var rightExact int8
							t88, err88 := strconv.ParseInt(right, 0, 0)
							if err88 != nil {
								return err88
							}
							rightExact = int8(t88)
							switch cond {
							case inspector.OpEq:
								*result = x1.I8 == rightExact
							case inspector.OpNq:
								*result = x1.I8 != rightExact
							case inspector.OpGt:
								*result = x1.I8 > rightExact
							case inspector.OpGtq:
								*result = x1.I8 >= rightExact
							case inspector.OpLt:
								*result = x1.I8 < rightExact
							case inspector.OpLtq:
								*result = x1.I8 <= rightExact
							}
							return
						}
						if path[2] == "I16" {
							var rightExact int16
							t89, err89 := strconv.ParseInt(right, 0, 0)
							if err89 != nil {
								return err89
							}
							rightExact = int16(t89)
							switch cond {
							case inspector.OpEq:
								*result = x1.I16 == rightExact
							case inspector.OpNq:
								*result = x1.I16 != rightExact
							case inspector.OpGt:
								*result = x1.I16 > rightExact
							case inspector.OpGtq:
								*result = x1.I16 >= rightExact
							case inspector.OpLt:
								*result = x1.I16 < rightExact
							case inspector.OpLtq:
								*result = x1.I16 <= rightExact
							}
							return
						}
						if path[2] == "I32" {
							var rightExact int32
							t90, err90 := strconv.ParseInt(right, 0, 0)
							if err90 != nil {
								return err90
							}
							rightExact = int32(t90)
							switch cond {
							case inspector.OpEq:
								*result = x1.I32 == rightExact
							case inspector.OpNq:
								*result = x1.I32 != rightExact
							case inspector.OpGt:
								*result = x1.I32 > rightExact
							case inspector.OpGtq:
								*result = x1.I32 >= rightExact
							case inspector.OpLt:
								*result = x1.I32 < rightExact
							case inspector.OpLtq:
								*result = x1.I32 <= rightExact
							}
							return
						}
						if path[2] == "I64" {
							var rightExact int64
							t91, err91 := strconv.ParseInt(right, 0, 0)
							if err91 != nil {
								return err91
							}
							rightExact = int64(t91)
							switch cond {
							case inspector.OpEq:
								*result = x1.I64 == rightExact
							case inspector.OpNq:
								*result = x1.I64 != rightExact
							case inspector.OpGt:
								*result = x1.I64 > rightExact
							case inspector.OpGtq:
								*result = x1.I64 >= rightExact
							case inspector.OpLt:
								*result = x1.I64 < rightExact
							case inspector.OpLtq:
								*result = x1.I64 <= rightExact
							}
							return
						}
						if path[2] == "U" {
							var rightExact uint
							t92, err92 := strconv.ParseUint(right, 0, 0)
							if err92 != nil {
								return err92
							}
							rightExact = uint(t92)
							switch cond {
							case inspector.OpEq:
								*result = x1.U == rightExact
							case inspector.OpNq:
								*result = x1.U != rightExact
							case inspector.OpGt:
								*result = x1.U > rightExact
							case inspector.OpGtq:
								*result = x1.U >= rightExact
							case inspector.OpLt:
								*result = x1.U < rightExact
							case inspector.OpLtq:
								*result = x1.U <= rightExact
							}
							return
						}
						if path[2] == "U8" {
							var rightExact uint8
							t93, err93 := strconv.ParseUint(right, 0, 0)
							if err93 != nil {
								return err93
							}
							rightExact = uint8(t93)
							switch cond {
							case inspector.OpEq:
								*result = x1.U8 == rightExact
							case inspector.OpNq:
								*result = x1.U8 != rightExact
							case inspector.OpGt:
								*result = x1.U8 > rightExact
							case inspector.OpGtq:
								*result = x1.U8 >= rightExact
							case inspector.OpLt:
								*result = x1.U8 < rightExact
							case inspector.OpLtq:
								*result = x1.U8 <= rightExact
							}
							return
						}
						if path[2] == "U16" {
							var rightExact uint16
							t94, err94 := strconv.ParseUint(right, 0, 0)
							if err94 != nil {
								return err94
							}
							rightExact = uint16(t94)
							switch cond {
							case inspector.OpEq:
								*result = x1.U16 == rightExact
							case inspector.OpNq:
								*result = x1.U16 != rightExact
							case inspector.OpGt:
								*result = x1.U16 > rightExact
							case inspector.OpGtq:
								*result = x1.U16 >= rightExact
							case inspector.OpLt:
								*result = x1.U16 < rightExact
							case inspector.OpLtq:
								*result = x1.U16 <= rightExact
							}
							return
						}
						if path[2] == "U32" {
							var rightExact uint32
							t95, err95 := strconv.ParseUint(right, 0, 0)
							if err95 != nil {
								return err95
							}
							rightExact = uint32(t95)
							switch cond {
							case inspector.OpEq:
								*result = x1.U32 == rightExact
							case inspector.OpNq:
								*result = x1.U32 != rightExact
							case inspector.OpGt:
								*result = x1.U32 > rightExact
							case inspector.OpGtq:
								*result = x1.U32 >= rightExact
							case inspector.OpLt:
								*result = x1.U32 < rightExact
							case inspector.OpLtq:
								*result = x1.U32 <= rightExact
							}
							return
						}
						if path[2] == "U64" {
							var rightExact uint64
							t96, err96 := strconv.ParseUint(right, 0, 0)
							if err96 != nil {
								return err96
							}
							rightExact = uint64(t96)
							switch cond {
							case inspector.OpEq:
								*result = x1.U64 == rightExact
							case inspector.OpNq:
								*result = x1.U64 != rightExact
							case inspector.OpGt:
								*result = x1.U64 > rightExact
							case inspector.OpGtq:
								*result = x1.U64 >= rightExact
							case inspector.OpLt:
								*result = x1.U64 < rightExact
							case inspector.OpLtq:
								*result = x1.U64 <= rightExact
							}
							return
						}
						if path[2] == "F" {
							var rightExact float32
							t97, err97 := strconv.ParseFloat(right, 0)
							if err97 != nil {
								return err97
							}
							rightExact = float32(t97)
							switch cond {
							case inspector.OpEq:
								*result = x1.F == rightExact
							case inspector.OpNq:
								*result = x1.F != rightExact
							case inspector.OpGt:
								*result = x1.F > rightExact
							case inspector.OpGtq:
								*result = x1.F >= rightExact
							case inspector.OpLt:
								*result = x1.F < rightExact
							case inspector.OpLtq:
								*result = x1.F <= rightExact
							}
							return
						}
						if path[2] == "D" {
							var rightExact float64
							t98, err98 := strconv.ParseFloat(right, 0)
							if err98 != nil {
								return err98
							}
							rightExact = float64(t98)
							switch cond {
							case inspector.OpEq:
								*result = x1.D == rightExact
							case inspector.OpNq:
								*result = x1.D != rightExact
							case inspector.OpGt:
								*result = x1.D > rightExact
							case inspector.OpGtq:
								*result = x1.D >= rightExact
							case inspector.OpLt:
								*result = x1.D < rightExact
							case inspector.OpLtq:
								*result = x1.D <= rightExact
							}
							return
						}
					}
				}
			}
		}
		if path[0] == "StructPtrSlice" {
			x0 := x.StructPtrSlice
			_ = x0
			if len(path) > 1 {
				var i int
				t99, err99 := strconv.ParseInt(path[1], 0, 0)
				if err99 != nil {
					return err99
				}
				i = int(t99)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if len(path) > 2 {
						if x1 == nil {
							return
						}
						if path[2] == "A" {
							var rightExact byte
							t100 := fastconv.S2B(right)
							if len(t100) > 0 {
								rightExact = t100[0]
							}

							switch cond {
							case inspector.OpEq:
								*result = x1.A == rightExact
							case inspector.OpNq:
								*result = x1.A != rightExact
							case inspector.OpGt:
								*result = x1.A > rightExact
							case inspector.OpGtq:
								*result = x1.A >= rightExact
							case inspector.OpLt:
								*result = x1.A < rightExact
							case inspector.OpLtq:
								*result = x1.A <= rightExact
							}
							return
						}
						if path[2] == "S" {
							var rightExact string
							rightExact = right

							switch cond {
							case inspector.OpEq:
								*result = x1.S == rightExact
							case inspector.OpNq:
								*result = x1.S != rightExact
							case inspector.OpGt:
								*result = x1.S > rightExact
							case inspector.OpGtq:
								*result = x1.S >= rightExact
							case inspector.OpLt:
								*result = x1.S < rightExact
							case inspector.OpLtq:
								*result = x1.S <= rightExact
							}
							return
						}
						if path[2] == "B" {
							var rightExact []byte
							rightExact = fastconv.S2B(right)

							if cond == inspector.OpEq {
								*result = bytes.Equal(x1.B, rightExact)
							} else {
								*result = !bytes.Equal(x1.B, rightExact)
							}
							return
						}
						if path[2] == "I" {
							var rightExact int
							t103, err103 := strconv.ParseInt(right, 0, 0)
							if err103 != nil {
								return err103
							}
							rightExact = int(t103)
							switch cond {
							case inspector.OpEq:
								*result = x1.I == rightExact
							case inspector.OpNq:
								*result = x1.I != rightExact
							case inspector.OpGt:
								*result = x1.I > rightExact
							case inspector.OpGtq:
								*result = x1.I >= rightExact
							case inspector.OpLt:
								*result = x1.I < rightExact
							case inspector.OpLtq:
								*result = x1.I <= rightExact
							}
							return
						}
						if path[2] == "I8" {
							var rightExact int8
							t104, err104 := strconv.ParseInt(right, 0, 0)
							if err104 != nil {
								return err104
							}
							rightExact = int8(t104)
							switch cond {
							case inspector.OpEq:
								*result = x1.I8 == rightExact
							case inspector.OpNq:
								*result = x1.I8 != rightExact
							case inspector.OpGt:
								*result = x1.I8 > rightExact
							case inspector.OpGtq:
								*result = x1.I8 >= rightExact
							case inspector.OpLt:
								*result = x1.I8 < rightExact
							case inspector.OpLtq:
								*result = x1.I8 <= rightExact
							}
							return
						}
						if path[2] == "I16" {
							var rightExact int16
							t105, err105 := strconv.ParseInt(right, 0, 0)
							if err105 != nil {
								return err105
							}
							rightExact = int16(t105)
							switch cond {
							case inspector.OpEq:
								*result = x1.I16 == rightExact
							case inspector.OpNq:
								*result = x1.I16 != rightExact
							case inspector.OpGt:
								*result = x1.I16 > rightExact
							case inspector.OpGtq:
								*result = x1.I16 >= rightExact
							case inspector.OpLt:
								*result = x1.I16 < rightExact
							case inspector.OpLtq:
								*result = x1.I16 <= rightExact
							}
							return
						}
						if path[2] == "I32" {
							var rightExact int32
							t106, err106 := strconv.ParseInt(right, 0, 0)
							if err106 != nil {
								return err106
							}
							rightExact = int32(t106)
							switch cond {
							case inspector.OpEq:
								*result = x1.I32 == rightExact
							case inspector.OpNq:
								*result = x1.I32 != rightExact
							case inspector.OpGt:
								*result = x1.I32 > rightExact
							case inspector.OpGtq:
								*result = x1.I32 >= rightExact
							case inspector.OpLt:
								*result = x1.I32 < rightExact
							case inspector.OpLtq:
								*result = x1.I32 <= rightExact
							}
							return
						}
						if path[2] == "I64" {
							var rightExact int64
							t107, err107 := strconv.ParseInt(right, 0, 0)
							if err107 != nil {
								return err107
							}
							rightExact = int64(t107)
							switch cond {
							case inspector.OpEq:
								*result = x1.I64 == rightExact
							case inspector.OpNq:
								*result = x1.I64 != rightExact
							case inspector.OpGt:
								*result = x1.I64 > rightExact
							case inspector.OpGtq:
								*result = x1.I64 >= rightExact
							case inspector.OpLt:
								*result = x1.I64 < rightExact
							case inspector.OpLtq:
								*result = x1.I64 <= rightExact
							}
							return
						}
						if path[2] == "U" {
							var rightExact uint
							t108, err108 := strconv.ParseUint(right, 0, 0)
							if err108 != nil {
								return err108
							}
							rightExact = uint(t108)
							switch cond {
							case inspector.OpEq:
								*result = x1.U == rightExact
							case inspector.OpNq:
								*result = x1.U != rightExact
							case inspector.OpGt:
								*result = x1.U > rightExact
							case inspector.OpGtq:
								*result = x1.U >= rightExact
							case inspector.OpLt:
								*result = x1.U < rightExact
							case inspector.OpLtq:
								*result = x1.U <= rightExact
							}
							return
						}
						if path[2] == "U8" {
							var rightExact uint8
							t109, err109 := strconv.ParseUint(right, 0, 0)
							if err109 != nil {
								return err109
							}
							rightExact = uint8(t109)
							switch cond {
							case inspector.OpEq:
								*result = x1.U8 == rightExact
							case inspector.OpNq:
								*result = x1.U8 != rightExact
							case inspector.OpGt:
								*result = x1.U8 > rightExact
							case inspector.OpGtq:
								*result = x1.U8 >= rightExact
							case inspector.OpLt:
								*result = x1.U8 < rightExact
							case inspector.OpLtq:
								*result = x1.U8 <= rightExact
							}
							return
						}
						if path[2] == "U16" {
							var rightExact uint16
							t110, err110 := strconv.ParseUint(right, 0, 0)
							if err110 != nil {
								return err110
							}
							rightExact = uint16(t110)
							switch cond {
							case inspector.OpEq:
								*result = x1.U16 == rightExact
							case inspector.OpNq:
								*result = x1.U16 != rightExact
							case inspector.OpGt:
								*result = x1.U16 > rightExact
							case inspector.OpGtq:
								*result = x1.U16 >= rightExact
							case inspector.OpLt:
								*result = x1.U16 < rightExact
							case inspector.OpLtq:
								*result = x1.U16 <= rightExact
							}
							return
						}
						if path[2] == "U32" {
							var rightExact uint32
							t111, err111 := strconv.ParseUint(right, 0, 0)
							if err111 != nil {
								return err111
							}
							rightExact = uint32(t111)
							switch cond {
							case inspector.OpEq:
								*result = x1.U32 == rightExact
							case inspector.OpNq:
								*result = x1.U32 != rightExact
							case inspector.OpGt:
								*result = x1.U32 > rightExact
							case inspector.OpGtq:
								*result = x1.U32 >= rightExact
							case inspector.OpLt:
								*result = x1.U32 < rightExact
							case inspector.OpLtq:
								*result = x1.U32 <= rightExact
							}
							return
						}
						if path[2] == "U64" {
							var rightExact uint64
							t112, err112 := strconv.ParseUint(right, 0, 0)
							if err112 != nil {
								return err112
							}
							rightExact = uint64(t112)
							switch cond {
							case inspector.OpEq:
								*result = x1.U64 == rightExact
							case inspector.OpNq:
								*result = x1.U64 != rightExact
							case inspector.OpGt:
								*result = x1.U64 > rightExact
							case inspector.OpGtq:
								*result = x1.U64 >= rightExact
							case inspector.OpLt:
								*result = x1.U64 < rightExact
							case inspector.OpLtq:
								*result = x1.U64 <= rightExact
							}
							return
						}
						if path[2] == "F" {
							var rightExact float32
							t113, err113 := strconv.ParseFloat(right, 0)
							if err113 != nil {
								return err113
							}
							rightExact = float32(t113)
							switch cond {
							case inspector.OpEq:
								*result = x1.F == rightExact
							case inspector.OpNq:
								*result = x1.F != rightExact
							case inspector.OpGt:
								*result = x1.F > rightExact
							case inspector.OpGtq:
								*result = x1.F >= rightExact
							case inspector.OpLt:
								*result = x1.F < rightExact
							case inspector.OpLtq:
								*result = x1.F <= rightExact
							}
							return
						}
						if path[2] == "D" {
							var rightExact float64
							t114, err114 := strconv.ParseFloat(right, 0)
							if err114 != nil {
								return err114
							}
							rightExact = float64(t114)
							switch cond {
							case inspector.OpEq:
								*result = x1.D == rightExact
							case inspector.OpNq:
								*result = x1.D != rightExact
							case inspector.OpGt:
								*result = x1.D > rightExact
							case inspector.OpGtq:
								*result = x1.D >= rightExact
							case inspector.OpLt:
								*result = x1.D < rightExact
							case inspector.OpLtq:
								*result = x1.D <= rightExact
							}
							return
						}
					}
				}
			}
		}
		if path[0] == "StructSlicePtr" {
			x0 := x.StructSlicePtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t115, err115 := strconv.ParseInt(path[1], 0, 0)
				if err115 != nil {
					return err115
				}
				i = int(t115)
				if len(*x0) > i {
					x1 := &(*x0)[i]
					_ = x1
					if len(path) > 2 {
						if path[2] == "A" {
							var rightExact byte
							t116 := fastconv.S2B(right)
							if len(t116) > 0 {
								rightExact = t116[0]
							}

							switch cond {
							case inspector.OpEq:
								*result = x1.A == rightExact
							case inspector.OpNq:
								*result = x1.A != rightExact
							case inspector.OpGt:
								*result = x1.A > rightExact
							case inspector.OpGtq:
								*result = x1.A >= rightExact
							case inspector.OpLt:
								*result = x1.A < rightExact
							case inspector.OpLtq:
								*result = x1.A <= rightExact
							}
							return
						}
						if path[2] == "S" {
							var rightExact string
							rightExact = right

							switch cond {
							case inspector.OpEq:
								*result = x1.S == rightExact
							case inspector.OpNq:
								*result = x1.S != rightExact
							case inspector.OpGt:
								*result = x1.S > rightExact
							case inspector.OpGtq:
								*result = x1.S >= rightExact
							case inspector.OpLt:
								*result = x1.S < rightExact
							case inspector.OpLtq:
								*result = x1.S <= rightExact
							}
							return
						}
						if path[2] == "B" {
							var rightExact []byte
							rightExact = fastconv.S2B(right)

							if cond == inspector.OpEq {
								*result = bytes.Equal(x1.B, rightExact)
							} else {
								*result = !bytes.Equal(x1.B, rightExact)
							}
							return
						}
						if path[2] == "I" {
							var rightExact int
							t119, err119 := strconv.ParseInt(right, 0, 0)
							if err119 != nil {
								return err119
							}
							rightExact = int(t119)
							switch cond {
							case inspector.OpEq:
								*result = x1.I == rightExact
							case inspector.OpNq:
								*result = x1.I != rightExact
							case inspector.OpGt:
								*result = x1.I > rightExact
							case inspector.OpGtq:
								*result = x1.I >= rightExact
							case inspector.OpLt:
								*result = x1.I < rightExact
							case inspector.OpLtq:
								*result = x1.I <= rightExact
							}
							return
						}
						if path[2] == "I8" {
							var rightExact int8
							t120, err120 := strconv.ParseInt(right, 0, 0)
							if err120 != nil {
								return err120
							}
							rightExact = int8(t120)
							switch cond {
							case inspector.OpEq:
								*result = x1.I8 == rightExact
							case inspector.OpNq:
								*result = x1.I8 != rightExact
							case inspector.OpGt:
								*result = x1.I8 > rightExact
							case inspector.OpGtq:
								*result = x1.I8 >= rightExact
							case inspector.OpLt:
								*result = x1.I8 < rightExact
							case inspector.OpLtq:
								*result = x1.I8 <= rightExact
							}
							return
						}
						if path[2] == "I16" {
							var rightExact int16
							t121, err121 := strconv.ParseInt(right, 0, 0)
							if err121 != nil {
								return err121
							}
							rightExact = int16(t121)
							switch cond {
							case inspector.OpEq:
								*result = x1.I16 == rightExact
							case inspector.OpNq:
								*result = x1.I16 != rightExact
							case inspector.OpGt:
								*result = x1.I16 > rightExact
							case inspector.OpGtq:
								*result = x1.I16 >= rightExact
							case inspector.OpLt:
								*result = x1.I16 < rightExact
							case inspector.OpLtq:
								*result = x1.I16 <= rightExact
							}
							return
						}
						if path[2] == "I32" {
							var rightExact int32
							t122, err122 := strconv.ParseInt(right, 0, 0)
							if err122 != nil {
								return err122
							}
							rightExact = int32(t122)
							switch cond {
							case inspector.OpEq:
								*result = x1.I32 == rightExact
							case inspector.OpNq:
								*result = x1.I32 != rightExact
							case inspector.OpGt:
								*result = x1.I32 > rightExact
							case inspector.OpGtq:
								*result = x1.I32 >= rightExact
							case inspector.OpLt:
								*result = x1.I32 < rightExact
							case inspector.OpLtq:
								*result = x1.I32 <= rightExact
							}
							return
						}
						if path[2] == "I64" {
							var rightExact int64
							t123, err123 := strconv.ParseInt(right, 0, 0)
							if err123 != nil {
								return err123
							}
							rightExact = int64(t123)
							switch cond {
							case inspector.OpEq:
								*result = x1.I64 == rightExact
							case inspector.OpNq:
								*result = x1.I64 != rightExact
							case inspector.OpGt:
								*result = x1.I64 > rightExact
							case inspector.OpGtq:
								*result = x1.I64 >= rightExact
							case inspector.OpLt:
								*result = x1.I64 < rightExact
							case inspector.OpLtq:
								*result = x1.I64 <= rightExact
							}
							return
						}
						if path[2] == "U" {
							var rightExact uint
							t124, err124 := strconv.ParseUint(right, 0, 0)
							if err124 != nil {
								return err124
							}
							rightExact = uint(t124)
							switch cond {
							case inspector.OpEq:
								*result = x1.U == rightExact
							case inspector.OpNq:
								*result = x1.U != rightExact
							case inspector.OpGt:
								*result = x1.U > rightExact
							case inspector.OpGtq:
								*result = x1.U >= rightExact
							case inspector.OpLt:
								*result = x1.U < rightExact
							case inspector.OpLtq:
								*result = x1.U <= rightExact
							}
							return
						}
						if path[2] == "U8" {
							var rightExact uint8
							t125, err125 := strconv.ParseUint(right, 0, 0)
							if err125 != nil {
								return err125
							}
							rightExact = uint8(t125)
							switch cond {
							case inspector.OpEq:
								*result = x1.U8 == rightExact
							case inspector.OpNq:
								*result = x1.U8 != rightExact
							case inspector.OpGt:
								*result = x1.U8 > rightExact
							case inspector.OpGtq:
								*result = x1.U8 >= rightExact
							case inspector.OpLt:
								*result = x1.U8 < rightExact
							case inspector.OpLtq:
								*result = x1.U8 <= rightExact
							}
							return
						}
						if path[2] == "U16" {
							var rightExact uint16
							t126, err126 := strconv.ParseUint(right, 0, 0)
							if err126 != nil {
								return err126
							}
							rightExact = uint16(t126)
							switch cond {
							case inspector.OpEq:
								*result = x1.U16 == rightExact
							case inspector.OpNq:
								*result = x1.U16 != rightExact
							case inspector.OpGt:
								*result = x1.U16 > rightExact
							case inspector.OpGtq:
								*result = x1.U16 >= rightExact
							case inspector.OpLt:
								*result = x1.U16 < rightExact
							case inspector.OpLtq:
								*result = x1.U16 <= rightExact
							}
							return
						}
						if path[2] == "U32" {
							var rightExact uint32
							t127, err127 := strconv.ParseUint(right, 0, 0)
							if err127 != nil {
								return err127
							}
							rightExact = uint32(t127)
							switch cond {
							case inspector.OpEq:
								*result = x1.U32 == rightExact
							case inspector.OpNq:
								*result = x1.U32 != rightExact
							case inspector.OpGt:
								*result = x1.U32 > rightExact
							case inspector.OpGtq:
								*result = x1.U32 >= rightExact
							case inspector.OpLt:
								*result = x1.U32 < rightExact
							case inspector.OpLtq:
								*result = x1.U32 <= rightExact
							}
							return
						}
						if path[2] == "U64" {
							var rightExact uint64
							t128, err128 := strconv.ParseUint(right, 0, 0)
							if err128 != nil {
								return err128
							}
							rightExact = uint64(t128)
							switch cond {
							case inspector.OpEq:
								*result = x1.U64 == rightExact
							case inspector.OpNq:
								*result = x1.U64 != rightExact
							case inspector.OpGt:
								*result = x1.U64 > rightExact
							case inspector.OpGtq:
								*result = x1.U64 >= rightExact
							case inspector.OpLt:
								*result = x1.U64 < rightExact
							case inspector.OpLtq:
								*result = x1.U64 <= rightExact
							}
							return
						}
						if path[2] == "F" {
							var rightExact float32
							t129, err129 := strconv.ParseFloat(right, 0)
							if err129 != nil {
								return err129
							}
							rightExact = float32(t129)
							switch cond {
							case inspector.OpEq:
								*result = x1.F == rightExact
							case inspector.OpNq:
								*result = x1.F != rightExact
							case inspector.OpGt:
								*result = x1.F > rightExact
							case inspector.OpGtq:
								*result = x1.F >= rightExact
							case inspector.OpLt:
								*result = x1.F < rightExact
							case inspector.OpLtq:
								*result = x1.F <= rightExact
							}
							return
						}
						if path[2] == "D" {
							var rightExact float64
							t130, err130 := strconv.ParseFloat(right, 0)
							if err130 != nil {
								return err130
							}
							rightExact = float64(t130)
							switch cond {
							case inspector.OpEq:
								*result = x1.D == rightExact
							case inspector.OpNq:
								*result = x1.D != rightExact
							case inspector.OpGt:
								*result = x1.D > rightExact
							case inspector.OpGtq:
								*result = x1.D >= rightExact
							case inspector.OpLt:
								*result = x1.D < rightExact
							case inspector.OpLtq:
								*result = x1.D <= rightExact
							}
							return
						}
					}
				}
			}
		}
		if path[0] == "StructPtrSlicePtr" {
			x0 := x.StructPtrSlicePtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var i int
				t131, err131 := strconv.ParseInt(path[1], 0, 0)
				if err131 != nil {
					return err131
				}
				i = int(t131)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if len(path) > 2 {
						if x1 == nil {
							return
						}
						if path[2] == "A" {
							var rightExact byte
							t132 := fastconv.S2B(right)
							if len(t132) > 0 {
								rightExact = t132[0]
							}

							switch cond {
							case inspector.OpEq:
								*result = x1.A == rightExact
							case inspector.OpNq:
								*result = x1.A != rightExact
							case inspector.OpGt:
								*result = x1.A > rightExact
							case inspector.OpGtq:
								*result = x1.A >= rightExact
							case inspector.OpLt:
								*result = x1.A < rightExact
							case inspector.OpLtq:
								*result = x1.A <= rightExact
							}
							return
						}
						if path[2] == "S" {
							var rightExact string
							rightExact = right

							switch cond {
							case inspector.OpEq:
								*result = x1.S == rightExact
							case inspector.OpNq:
								*result = x1.S != rightExact
							case inspector.OpGt:
								*result = x1.S > rightExact
							case inspector.OpGtq:
								*result = x1.S >= rightExact
							case inspector.OpLt:
								*result = x1.S < rightExact
							case inspector.OpLtq:
								*result = x1.S <= rightExact
							}
							return
						}
						if path[2] == "B" {
							var rightExact []byte
							rightExact = fastconv.S2B(right)

							if cond == inspector.OpEq {
								*result = bytes.Equal(x1.B, rightExact)
							} else {
								*result = !bytes.Equal(x1.B, rightExact)
							}
							return
						}
						if path[2] == "I" {
							var rightExact int
							t135, err135 := strconv.ParseInt(right, 0, 0)
							if err135 != nil {
								return err135
							}
							rightExact = int(t135)
							switch cond {
							case inspector.OpEq:
								*result = x1.I == rightExact
							case inspector.OpNq:
								*result = x1.I != rightExact
							case inspector.OpGt:
								*result = x1.I > rightExact
							case inspector.OpGtq:
								*result = x1.I >= rightExact
							case inspector.OpLt:
								*result = x1.I < rightExact
							case inspector.OpLtq:
								*result = x1.I <= rightExact
							}
							return
						}
						if path[2] == "I8" {
							var rightExact int8
							t136, err136 := strconv.ParseInt(right, 0, 0)
							if err136 != nil {
								return err136
							}
							rightExact = int8(t136)
							switch cond {
							case inspector.OpEq:
								*result = x1.I8 == rightExact
							case inspector.OpNq:
								*result = x1.I8 != rightExact
							case inspector.OpGt:
								*result = x1.I8 > rightExact
							case inspector.OpGtq:
								*result = x1.I8 >= rightExact
							case inspector.OpLt:
								*result = x1.I8 < rightExact
							case inspector.OpLtq:
								*result = x1.I8 <= rightExact
							}
							return
						}
						if path[2] == "I16" {
							var rightExact int16
							t137, err137 := strconv.ParseInt(right, 0, 0)
							if err137 != nil {
								return err137
							}
							rightExact = int16(t137)
							switch cond {
							case inspector.OpEq:
								*result = x1.I16 == rightExact
							case inspector.OpNq:
								*result = x1.I16 != rightExact
							case inspector.OpGt:
								*result = x1.I16 > rightExact
							case inspector.OpGtq:
								*result = x1.I16 >= rightExact
							case inspector.OpLt:
								*result = x1.I16 < rightExact
							case inspector.OpLtq:
								*result = x1.I16 <= rightExact
							}
							return
						}
						if path[2] == "I32" {
							var rightExact int32
							t138, err138 := strconv.ParseInt(right, 0, 0)
							if err138 != nil {
								return err138
							}
							rightExact = int32(t138)
							switch cond {
							case inspector.OpEq:
								*result = x1.I32 == rightExact
							case inspector.OpNq:
								*result = x1.I32 != rightExact
							case inspector.OpGt:
								*result = x1.I32 > rightExact
							case inspector.OpGtq:
								*result = x1.I32 >= rightExact
							case inspector.OpLt:
								*result = x1.I32 < rightExact
							case inspector.OpLtq:
								*result = x1.I32 <= rightExact
							}
							return
						}
						if path[2] == "I64" {
							var rightExact int64
							t139, err139 := strconv.ParseInt(right, 0, 0)
							if err139 != nil {
								return err139
							}
							rightExact = int64(t139)
							switch cond {
							case inspector.OpEq:
								*result = x1.I64 == rightExact
							case inspector.OpNq:
								*result = x1.I64 != rightExact
							case inspector.OpGt:
								*result = x1.I64 > rightExact
							case inspector.OpGtq:
								*result = x1.I64 >= rightExact
							case inspector.OpLt:
								*result = x1.I64 < rightExact
							case inspector.OpLtq:
								*result = x1.I64 <= rightExact
							}
							return
						}
						if path[2] == "U" {
							var rightExact uint
							t140, err140 := strconv.ParseUint(right, 0, 0)
							if err140 != nil {
								return err140
							}
							rightExact = uint(t140)
							switch cond {
							case inspector.OpEq:
								*result = x1.U == rightExact
							case inspector.OpNq:
								*result = x1.U != rightExact
							case inspector.OpGt:
								*result = x1.U > rightExact
							case inspector.OpGtq:
								*result = x1.U >= rightExact
							case inspector.OpLt:
								*result = x1.U < rightExact
							case inspector.OpLtq:
								*result = x1.U <= rightExact
							}
							return
						}
						if path[2] == "U8" {
							var rightExact uint8
							t141, err141 := strconv.ParseUint(right, 0, 0)
							if err141 != nil {
								return err141
							}
							rightExact = uint8(t141)
							switch cond {
							case inspector.OpEq:
								*result = x1.U8 == rightExact
							case inspector.OpNq:
								*result = x1.U8 != rightExact
							case inspector.OpGt:
								*result = x1.U8 > rightExact
							case inspector.OpGtq:
								*result = x1.U8 >= rightExact
							case inspector.OpLt:
								*result = x1.U8 < rightExact
							case inspector.OpLtq:
								*result = x1.U8 <= rightExact
							}
							return
						}
						if path[2] == "U16" {
							var rightExact uint16
							t142, err142 := strconv.ParseUint(right, 0, 0)
							if err142 != nil {
								return err142
							}
							rightExact = uint16(t142)
							switch cond {
							case inspector.OpEq:
								*result = x1.U16 == rightExact
							case inspector.OpNq:
								*result = x1.U16 != rightExact
							case inspector.OpGt:
								*result = x1.U16 > rightExact
							case inspector.OpGtq:
								*result = x1.U16 >= rightExact
							case inspector.OpLt:
								*result = x1.U16 < rightExact
							case inspector.OpLtq:
								*result = x1.U16 <= rightExact
							}
							return
						}
						if path[2] == "U32" {
							var rightExact uint32
							t143, err143 := strconv.ParseUint(right, 0, 0)
							if err143 != nil {
								return err143
							}
							rightExact = uint32(t143)
							switch cond {
							case inspector.OpEq:
								*result = x1.U32 == rightExact
							case inspector.OpNq:
								*result = x1.U32 != rightExact
							case inspector.OpGt:
								*result = x1.U32 > rightExact
							case inspector.OpGtq:
								*result = x1.U32 >= rightExact
							case inspector.OpLt:
								*result = x1.U32 < rightExact
							case inspector.OpLtq:
								*result = x1.U32 <= rightExact
							}
							return
						}
						if path[2] == "U64" {
							var rightExact uint64
							t144, err144 := strconv.ParseUint(right, 0, 0)
							if err144 != nil {
								return err144
							}
							rightExact = uint64(t144)
							switch cond {
							case inspector.OpEq:
								*result = x1.U64 == rightExact
							case inspector.OpNq:
								*result = x1.U64 != rightExact
							case inspector.OpGt:
								*result = x1.U64 > rightExact
							case inspector.OpGtq:
								*result = x1.U64 >= rightExact
							case inspector.OpLt:
								*result = x1.U64 < rightExact
							case inspector.OpLtq:
								*result = x1.U64 <= rightExact
							}
							return
						}
						if path[2] == "F" {
							var rightExact float32
							t145, err145 := strconv.ParseFloat(right, 0)
							if err145 != nil {
								return err145
							}
							rightExact = float32(t145)
							switch cond {
							case inspector.OpEq:
								*result = x1.F == rightExact
							case inspector.OpNq:
								*result = x1.F != rightExact
							case inspector.OpGt:
								*result = x1.F > rightExact
							case inspector.OpGtq:
								*result = x1.F >= rightExact
							case inspector.OpLt:
								*result = x1.F < rightExact
							case inspector.OpLtq:
								*result = x1.F <= rightExact
							}
							return
						}
						if path[2] == "D" {
							var rightExact float64
							t146, err146 := strconv.ParseFloat(right, 0)
							if err146 != nil {
								return err146
							}
							rightExact = float64(t146)
							switch cond {
							case inspector.OpEq:
								*result = x1.D == rightExact
							case inspector.OpNq:
								*result = x1.D != rightExact
							case inspector.OpGt:
								*result = x1.D > rightExact
							case inspector.OpGtq:
								*result = x1.D >= rightExact
							case inspector.OpLt:
								*result = x1.D < rightExact
							case inspector.OpLtq:
								*result = x1.D <= rightExact
							}
							return
						}
					}
				}
			}
		}
		if path[0] == "IntStringMap" {
			x0 := x.IntStringMap
			_ = x0
			if len(path) > 1 {
				var k int
				t147, err147 := strconv.ParseInt(path[1], 0, 0)
				if err147 != nil {
					return err147
				}
				k = int(t147)
				x1 := (x0)[k]
				_ = x1
				var rightExact string
				rightExact = right

				switch cond {
				case inspector.OpEq:
					*result = x1 == rightExact
				case inspector.OpNq:
					*result = x1 != rightExact
				case inspector.OpGt:
					*result = x1 > rightExact
				case inspector.OpGtq:
					*result = x1 >= rightExact
				case inspector.OpLt:
					*result = x1 < rightExact
				case inspector.OpLtq:
					*result = x1 <= rightExact
				}
				return
			}
		}
		if path[0] == "IntStringPtrMap" {
			x0 := x.IntStringPtrMap
			_ = x0
			if len(path) > 1 {
				var k int
				t149, err149 := strconv.ParseInt(path[1], 0, 0)
				if err149 != nil {
					return err149
				}
				k = int(t149)
				x1 := (x0)[k]
				_ = x1
				if x1 == nil {
					return
				}
				if right == inspector.Nil {
					if cond == inspector.OpEq {
						*result = x1 == nil
					} else {
						*result = x1 != nil
					}
					return
				}
				return
			}
		}
		if path[0] == "IntStringMapPtr" {
			x0 := x.IntStringMapPtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var k int
				t150, err150 := strconv.ParseInt(path[1], 0, 0)
				if err150 != nil {
					return err150
				}
				k = int(t150)
				x1 := (*x0)[k]
				_ = x1
				var rightExact string
				rightExact = right

				switch cond {
				case inspector.OpEq:
					*result = x1 == rightExact
				case inspector.OpNq:
					*result = x1 != rightExact
				case inspector.OpGt:
					*result = x1 > rightExact
				case inspector.OpGtq:
					*result = x1 >= rightExact
				case inspector.OpLt:
					*result = x1 < rightExact
				case inspector.OpLtq:
					*result = x1 <= rightExact
				}
				return
			}
		}
		if path[0] == "IntStringPtrMapPtr" {
			x0 := x.IntStringPtrMapPtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var k int
				t152, err152 := strconv.ParseInt(path[1], 0, 0)
				if err152 != nil {
					return err152
				}
				k = int(t152)
				x1 := (*x0)[k]
				_ = x1
				if x1 == nil {
					return
				}
				if right == inspector.Nil {
					if cond == inspector.OpEq {
						*result = x1 == nil
					} else {
						*result = x1 != nil
					}
					return
				}
				return
			}
		}
		if path[0] == "IntPtrStringPtrMapPtr" {
			x0 := x.IntPtrStringPtrMapPtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var k int
				t153, err153 := strconv.ParseInt(path[1], 0, 0)
				if err153 != nil {
					return err153
				}
				k = int(t153)
				x1 := (*x0)[&k]
				_ = x1
				if x1 == nil {
					return
				}
				if right == inspector.Nil {
					if cond == inspector.OpEq {
						*result = x1 == nil
					} else {
						*result = x1 != nil
					}
					return
				}
				return
			}
		}
		if path[0] == "StringFloatMap" {
			x0 := x.StringFloatMap
			_ = x0
			if len(path) > 1 {
				if x1, ok := (x0)[path[1]]; ok {
					_ = x1
					var rightExact float64
					t154, err154 := strconv.ParseFloat(right, 0)
					if err154 != nil {
						return err154
					}
					rightExact = float64(t154)
					switch cond {
					case inspector.OpEq:
						*result = x1 == rightExact
					case inspector.OpNq:
						*result = x1 != rightExact
					case inspector.OpGt:
						*result = x1 > rightExact
					case inspector.OpGtq:
						*result = x1 >= rightExact
					case inspector.OpLt:
						*result = x1 < rightExact
					case inspector.OpLtq:
						*result = x1 <= rightExact
					}
					return
				}
			}
		}
		if path[0] == "StringFloatPtrMap" {
			x0 := x.StringFloatPtrMap
			_ = x0
			if len(path) > 1 {
				if x1, ok := (x0)[path[1]]; ok {
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
		if path[0] == "StringFloatMapPtr" {
			x0 := x.StringFloatMapPtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				if x1, ok := (*x0)[path[1]]; ok {
					_ = x1
					var rightExact float64
					t155, err155 := strconv.ParseFloat(right, 0)
					if err155 != nil {
						return err155
					}
					rightExact = float64(t155)
					switch cond {
					case inspector.OpEq:
						*result = x1 == rightExact
					case inspector.OpNq:
						*result = x1 != rightExact
					case inspector.OpGt:
						*result = x1 > rightExact
					case inspector.OpGtq:
						*result = x1 >= rightExact
					case inspector.OpLt:
						*result = x1 < rightExact
					case inspector.OpLtq:
						*result = x1 <= rightExact
					}
					return
				}
			}
		}
		if path[0] == "StringFloatPtrMapPtr" {
			x0 := x.StringFloatPtrMapPtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				if x1, ok := (*x0)[path[1]]; ok {
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
		if path[0] == "StringPtrFloatPtrMapPtr" {
			x0 := x.StringPtrFloatPtrMapPtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				if x1, ok := (*x0)[&path[1]]; ok {
					_ = x1
					if x1 == nil {
						return
					}
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					return
				}
			}
		}
		if path[0] == "FloatStructMap" {
			x0 := x.FloatStructMap
			_ = x0
			if len(path) > 1 {
				var k float64
				t156, err156 := strconv.ParseFloat(path[1], 0)
				if err156 != nil {
					return err156
				}
				k = float64(t156)
				x1 := (x0)[k]
				_ = x1
				if len(path) > 2 {
					if path[2] == "A" {
						var rightExact byte
						t157 := fastconv.S2B(right)
						if len(t157) > 0 {
							rightExact = t157[0]
						}

						switch cond {
						case inspector.OpEq:
							*result = x1.A == rightExact
						case inspector.OpNq:
							*result = x1.A != rightExact
						case inspector.OpGt:
							*result = x1.A > rightExact
						case inspector.OpGtq:
							*result = x1.A >= rightExact
						case inspector.OpLt:
							*result = x1.A < rightExact
						case inspector.OpLtq:
							*result = x1.A <= rightExact
						}
						return
					}
					if path[2] == "S" {
						var rightExact string
						rightExact = right

						switch cond {
						case inspector.OpEq:
							*result = x1.S == rightExact
						case inspector.OpNq:
							*result = x1.S != rightExact
						case inspector.OpGt:
							*result = x1.S > rightExact
						case inspector.OpGtq:
							*result = x1.S >= rightExact
						case inspector.OpLt:
							*result = x1.S < rightExact
						case inspector.OpLtq:
							*result = x1.S <= rightExact
						}
						return
					}
					if path[2] == "B" {
						var rightExact []byte
						rightExact = fastconv.S2B(right)

						if cond == inspector.OpEq {
							*result = bytes.Equal(x1.B, rightExact)
						} else {
							*result = !bytes.Equal(x1.B, rightExact)
						}
						return
					}
					if path[2] == "I" {
						var rightExact int
						t160, err160 := strconv.ParseInt(right, 0, 0)
						if err160 != nil {
							return err160
						}
						rightExact = int(t160)
						switch cond {
						case inspector.OpEq:
							*result = x1.I == rightExact
						case inspector.OpNq:
							*result = x1.I != rightExact
						case inspector.OpGt:
							*result = x1.I > rightExact
						case inspector.OpGtq:
							*result = x1.I >= rightExact
						case inspector.OpLt:
							*result = x1.I < rightExact
						case inspector.OpLtq:
							*result = x1.I <= rightExact
						}
						return
					}
					if path[2] == "I8" {
						var rightExact int8
						t161, err161 := strconv.ParseInt(right, 0, 0)
						if err161 != nil {
							return err161
						}
						rightExact = int8(t161)
						switch cond {
						case inspector.OpEq:
							*result = x1.I8 == rightExact
						case inspector.OpNq:
							*result = x1.I8 != rightExact
						case inspector.OpGt:
							*result = x1.I8 > rightExact
						case inspector.OpGtq:
							*result = x1.I8 >= rightExact
						case inspector.OpLt:
							*result = x1.I8 < rightExact
						case inspector.OpLtq:
							*result = x1.I8 <= rightExact
						}
						return
					}
					if path[2] == "I16" {
						var rightExact int16
						t162, err162 := strconv.ParseInt(right, 0, 0)
						if err162 != nil {
							return err162
						}
						rightExact = int16(t162)
						switch cond {
						case inspector.OpEq:
							*result = x1.I16 == rightExact
						case inspector.OpNq:
							*result = x1.I16 != rightExact
						case inspector.OpGt:
							*result = x1.I16 > rightExact
						case inspector.OpGtq:
							*result = x1.I16 >= rightExact
						case inspector.OpLt:
							*result = x1.I16 < rightExact
						case inspector.OpLtq:
							*result = x1.I16 <= rightExact
						}
						return
					}
					if path[2] == "I32" {
						var rightExact int32
						t163, err163 := strconv.ParseInt(right, 0, 0)
						if err163 != nil {
							return err163
						}
						rightExact = int32(t163)
						switch cond {
						case inspector.OpEq:
							*result = x1.I32 == rightExact
						case inspector.OpNq:
							*result = x1.I32 != rightExact
						case inspector.OpGt:
							*result = x1.I32 > rightExact
						case inspector.OpGtq:
							*result = x1.I32 >= rightExact
						case inspector.OpLt:
							*result = x1.I32 < rightExact
						case inspector.OpLtq:
							*result = x1.I32 <= rightExact
						}
						return
					}
					if path[2] == "I64" {
						var rightExact int64
						t164, err164 := strconv.ParseInt(right, 0, 0)
						if err164 != nil {
							return err164
						}
						rightExact = int64(t164)
						switch cond {
						case inspector.OpEq:
							*result = x1.I64 == rightExact
						case inspector.OpNq:
							*result = x1.I64 != rightExact
						case inspector.OpGt:
							*result = x1.I64 > rightExact
						case inspector.OpGtq:
							*result = x1.I64 >= rightExact
						case inspector.OpLt:
							*result = x1.I64 < rightExact
						case inspector.OpLtq:
							*result = x1.I64 <= rightExact
						}
						return
					}
					if path[2] == "U" {
						var rightExact uint
						t165, err165 := strconv.ParseUint(right, 0, 0)
						if err165 != nil {
							return err165
						}
						rightExact = uint(t165)
						switch cond {
						case inspector.OpEq:
							*result = x1.U == rightExact
						case inspector.OpNq:
							*result = x1.U != rightExact
						case inspector.OpGt:
							*result = x1.U > rightExact
						case inspector.OpGtq:
							*result = x1.U >= rightExact
						case inspector.OpLt:
							*result = x1.U < rightExact
						case inspector.OpLtq:
							*result = x1.U <= rightExact
						}
						return
					}
					if path[2] == "U8" {
						var rightExact uint8
						t166, err166 := strconv.ParseUint(right, 0, 0)
						if err166 != nil {
							return err166
						}
						rightExact = uint8(t166)
						switch cond {
						case inspector.OpEq:
							*result = x1.U8 == rightExact
						case inspector.OpNq:
							*result = x1.U8 != rightExact
						case inspector.OpGt:
							*result = x1.U8 > rightExact
						case inspector.OpGtq:
							*result = x1.U8 >= rightExact
						case inspector.OpLt:
							*result = x1.U8 < rightExact
						case inspector.OpLtq:
							*result = x1.U8 <= rightExact
						}
						return
					}
					if path[2] == "U16" {
						var rightExact uint16
						t167, err167 := strconv.ParseUint(right, 0, 0)
						if err167 != nil {
							return err167
						}
						rightExact = uint16(t167)
						switch cond {
						case inspector.OpEq:
							*result = x1.U16 == rightExact
						case inspector.OpNq:
							*result = x1.U16 != rightExact
						case inspector.OpGt:
							*result = x1.U16 > rightExact
						case inspector.OpGtq:
							*result = x1.U16 >= rightExact
						case inspector.OpLt:
							*result = x1.U16 < rightExact
						case inspector.OpLtq:
							*result = x1.U16 <= rightExact
						}
						return
					}
					if path[2] == "U32" {
						var rightExact uint32
						t168, err168 := strconv.ParseUint(right, 0, 0)
						if err168 != nil {
							return err168
						}
						rightExact = uint32(t168)
						switch cond {
						case inspector.OpEq:
							*result = x1.U32 == rightExact
						case inspector.OpNq:
							*result = x1.U32 != rightExact
						case inspector.OpGt:
							*result = x1.U32 > rightExact
						case inspector.OpGtq:
							*result = x1.U32 >= rightExact
						case inspector.OpLt:
							*result = x1.U32 < rightExact
						case inspector.OpLtq:
							*result = x1.U32 <= rightExact
						}
						return
					}
					if path[2] == "U64" {
						var rightExact uint64
						t169, err169 := strconv.ParseUint(right, 0, 0)
						if err169 != nil {
							return err169
						}
						rightExact = uint64(t169)
						switch cond {
						case inspector.OpEq:
							*result = x1.U64 == rightExact
						case inspector.OpNq:
							*result = x1.U64 != rightExact
						case inspector.OpGt:
							*result = x1.U64 > rightExact
						case inspector.OpGtq:
							*result = x1.U64 >= rightExact
						case inspector.OpLt:
							*result = x1.U64 < rightExact
						case inspector.OpLtq:
							*result = x1.U64 <= rightExact
						}
						return
					}
					if path[2] == "F" {
						var rightExact float32
						t170, err170 := strconv.ParseFloat(right, 0)
						if err170 != nil {
							return err170
						}
						rightExact = float32(t170)
						switch cond {
						case inspector.OpEq:
							*result = x1.F == rightExact
						case inspector.OpNq:
							*result = x1.F != rightExact
						case inspector.OpGt:
							*result = x1.F > rightExact
						case inspector.OpGtq:
							*result = x1.F >= rightExact
						case inspector.OpLt:
							*result = x1.F < rightExact
						case inspector.OpLtq:
							*result = x1.F <= rightExact
						}
						return
					}
					if path[2] == "D" {
						var rightExact float64
						t171, err171 := strconv.ParseFloat(right, 0)
						if err171 != nil {
							return err171
						}
						rightExact = float64(t171)
						switch cond {
						case inspector.OpEq:
							*result = x1.D == rightExact
						case inspector.OpNq:
							*result = x1.D != rightExact
						case inspector.OpGt:
							*result = x1.D > rightExact
						case inspector.OpGtq:
							*result = x1.D >= rightExact
						case inspector.OpLt:
							*result = x1.D < rightExact
						case inspector.OpLtq:
							*result = x1.D <= rightExact
						}
						return
					}
				}
			}
		}
		if path[0] == "FloatStructPtrMap" {
			x0 := x.FloatStructPtrMap
			_ = x0
			if len(path) > 1 {
				var k float64
				t172, err172 := strconv.ParseFloat(path[1], 0)
				if err172 != nil {
					return err172
				}
				k = float64(t172)
				x1 := (x0)[k]
				_ = x1
				if len(path) > 2 {
					if x1 == nil {
						return
					}
					if path[2] == "A" {
						var rightExact byte
						t173 := fastconv.S2B(right)
						if len(t173) > 0 {
							rightExact = t173[0]
						}

						switch cond {
						case inspector.OpEq:
							*result = x1.A == rightExact
						case inspector.OpNq:
							*result = x1.A != rightExact
						case inspector.OpGt:
							*result = x1.A > rightExact
						case inspector.OpGtq:
							*result = x1.A >= rightExact
						case inspector.OpLt:
							*result = x1.A < rightExact
						case inspector.OpLtq:
							*result = x1.A <= rightExact
						}
						return
					}
					if path[2] == "S" {
						var rightExact string
						rightExact = right

						switch cond {
						case inspector.OpEq:
							*result = x1.S == rightExact
						case inspector.OpNq:
							*result = x1.S != rightExact
						case inspector.OpGt:
							*result = x1.S > rightExact
						case inspector.OpGtq:
							*result = x1.S >= rightExact
						case inspector.OpLt:
							*result = x1.S < rightExact
						case inspector.OpLtq:
							*result = x1.S <= rightExact
						}
						return
					}
					if path[2] == "B" {
						var rightExact []byte
						rightExact = fastconv.S2B(right)

						if cond == inspector.OpEq {
							*result = bytes.Equal(x1.B, rightExact)
						} else {
							*result = !bytes.Equal(x1.B, rightExact)
						}
						return
					}
					if path[2] == "I" {
						var rightExact int
						t176, err176 := strconv.ParseInt(right, 0, 0)
						if err176 != nil {
							return err176
						}
						rightExact = int(t176)
						switch cond {
						case inspector.OpEq:
							*result = x1.I == rightExact
						case inspector.OpNq:
							*result = x1.I != rightExact
						case inspector.OpGt:
							*result = x1.I > rightExact
						case inspector.OpGtq:
							*result = x1.I >= rightExact
						case inspector.OpLt:
							*result = x1.I < rightExact
						case inspector.OpLtq:
							*result = x1.I <= rightExact
						}
						return
					}
					if path[2] == "I8" {
						var rightExact int8
						t177, err177 := strconv.ParseInt(right, 0, 0)
						if err177 != nil {
							return err177
						}
						rightExact = int8(t177)
						switch cond {
						case inspector.OpEq:
							*result = x1.I8 == rightExact
						case inspector.OpNq:
							*result = x1.I8 != rightExact
						case inspector.OpGt:
							*result = x1.I8 > rightExact
						case inspector.OpGtq:
							*result = x1.I8 >= rightExact
						case inspector.OpLt:
							*result = x1.I8 < rightExact
						case inspector.OpLtq:
							*result = x1.I8 <= rightExact
						}
						return
					}
					if path[2] == "I16" {
						var rightExact int16
						t178, err178 := strconv.ParseInt(right, 0, 0)
						if err178 != nil {
							return err178
						}
						rightExact = int16(t178)
						switch cond {
						case inspector.OpEq:
							*result = x1.I16 == rightExact
						case inspector.OpNq:
							*result = x1.I16 != rightExact
						case inspector.OpGt:
							*result = x1.I16 > rightExact
						case inspector.OpGtq:
							*result = x1.I16 >= rightExact
						case inspector.OpLt:
							*result = x1.I16 < rightExact
						case inspector.OpLtq:
							*result = x1.I16 <= rightExact
						}
						return
					}
					if path[2] == "I32" {
						var rightExact int32
						t179, err179 := strconv.ParseInt(right, 0, 0)
						if err179 != nil {
							return err179
						}
						rightExact = int32(t179)
						switch cond {
						case inspector.OpEq:
							*result = x1.I32 == rightExact
						case inspector.OpNq:
							*result = x1.I32 != rightExact
						case inspector.OpGt:
							*result = x1.I32 > rightExact
						case inspector.OpGtq:
							*result = x1.I32 >= rightExact
						case inspector.OpLt:
							*result = x1.I32 < rightExact
						case inspector.OpLtq:
							*result = x1.I32 <= rightExact
						}
						return
					}
					if path[2] == "I64" {
						var rightExact int64
						t180, err180 := strconv.ParseInt(right, 0, 0)
						if err180 != nil {
							return err180
						}
						rightExact = int64(t180)
						switch cond {
						case inspector.OpEq:
							*result = x1.I64 == rightExact
						case inspector.OpNq:
							*result = x1.I64 != rightExact
						case inspector.OpGt:
							*result = x1.I64 > rightExact
						case inspector.OpGtq:
							*result = x1.I64 >= rightExact
						case inspector.OpLt:
							*result = x1.I64 < rightExact
						case inspector.OpLtq:
							*result = x1.I64 <= rightExact
						}
						return
					}
					if path[2] == "U" {
						var rightExact uint
						t181, err181 := strconv.ParseUint(right, 0, 0)
						if err181 != nil {
							return err181
						}
						rightExact = uint(t181)
						switch cond {
						case inspector.OpEq:
							*result = x1.U == rightExact
						case inspector.OpNq:
							*result = x1.U != rightExact
						case inspector.OpGt:
							*result = x1.U > rightExact
						case inspector.OpGtq:
							*result = x1.U >= rightExact
						case inspector.OpLt:
							*result = x1.U < rightExact
						case inspector.OpLtq:
							*result = x1.U <= rightExact
						}
						return
					}
					if path[2] == "U8" {
						var rightExact uint8
						t182, err182 := strconv.ParseUint(right, 0, 0)
						if err182 != nil {
							return err182
						}
						rightExact = uint8(t182)
						switch cond {
						case inspector.OpEq:
							*result = x1.U8 == rightExact
						case inspector.OpNq:
							*result = x1.U8 != rightExact
						case inspector.OpGt:
							*result = x1.U8 > rightExact
						case inspector.OpGtq:
							*result = x1.U8 >= rightExact
						case inspector.OpLt:
							*result = x1.U8 < rightExact
						case inspector.OpLtq:
							*result = x1.U8 <= rightExact
						}
						return
					}
					if path[2] == "U16" {
						var rightExact uint16
						t183, err183 := strconv.ParseUint(right, 0, 0)
						if err183 != nil {
							return err183
						}
						rightExact = uint16(t183)
						switch cond {
						case inspector.OpEq:
							*result = x1.U16 == rightExact
						case inspector.OpNq:
							*result = x1.U16 != rightExact
						case inspector.OpGt:
							*result = x1.U16 > rightExact
						case inspector.OpGtq:
							*result = x1.U16 >= rightExact
						case inspector.OpLt:
							*result = x1.U16 < rightExact
						case inspector.OpLtq:
							*result = x1.U16 <= rightExact
						}
						return
					}
					if path[2] == "U32" {
						var rightExact uint32
						t184, err184 := strconv.ParseUint(right, 0, 0)
						if err184 != nil {
							return err184
						}
						rightExact = uint32(t184)
						switch cond {
						case inspector.OpEq:
							*result = x1.U32 == rightExact
						case inspector.OpNq:
							*result = x1.U32 != rightExact
						case inspector.OpGt:
							*result = x1.U32 > rightExact
						case inspector.OpGtq:
							*result = x1.U32 >= rightExact
						case inspector.OpLt:
							*result = x1.U32 < rightExact
						case inspector.OpLtq:
							*result = x1.U32 <= rightExact
						}
						return
					}
					if path[2] == "U64" {
						var rightExact uint64
						t185, err185 := strconv.ParseUint(right, 0, 0)
						if err185 != nil {
							return err185
						}
						rightExact = uint64(t185)
						switch cond {
						case inspector.OpEq:
							*result = x1.U64 == rightExact
						case inspector.OpNq:
							*result = x1.U64 != rightExact
						case inspector.OpGt:
							*result = x1.U64 > rightExact
						case inspector.OpGtq:
							*result = x1.U64 >= rightExact
						case inspector.OpLt:
							*result = x1.U64 < rightExact
						case inspector.OpLtq:
							*result = x1.U64 <= rightExact
						}
						return
					}
					if path[2] == "F" {
						var rightExact float32
						t186, err186 := strconv.ParseFloat(right, 0)
						if err186 != nil {
							return err186
						}
						rightExact = float32(t186)
						switch cond {
						case inspector.OpEq:
							*result = x1.F == rightExact
						case inspector.OpNq:
							*result = x1.F != rightExact
						case inspector.OpGt:
							*result = x1.F > rightExact
						case inspector.OpGtq:
							*result = x1.F >= rightExact
						case inspector.OpLt:
							*result = x1.F < rightExact
						case inspector.OpLtq:
							*result = x1.F <= rightExact
						}
						return
					}
					if path[2] == "D" {
						var rightExact float64
						t187, err187 := strconv.ParseFloat(right, 0)
						if err187 != nil {
							return err187
						}
						rightExact = float64(t187)
						switch cond {
						case inspector.OpEq:
							*result = x1.D == rightExact
						case inspector.OpNq:
							*result = x1.D != rightExact
						case inspector.OpGt:
							*result = x1.D > rightExact
						case inspector.OpGtq:
							*result = x1.D >= rightExact
						case inspector.OpLt:
							*result = x1.D < rightExact
						case inspector.OpLtq:
							*result = x1.D <= rightExact
						}
						return
					}
				}
			}
		}
		if path[0] == "FloatPtrStructMap" {
			x0 := x.FloatPtrStructMap
			_ = x0
			if len(path) > 1 {
				var k float64
				t188, err188 := strconv.ParseFloat(path[1], 0)
				if err188 != nil {
					return err188
				}
				k = float64(t188)
				x1 := (x0)[&k]
				_ = x1
				if len(path) > 2 {
					if path[2] == "A" {
						var rightExact byte
						t189 := fastconv.S2B(right)
						if len(t189) > 0 {
							rightExact = t189[0]
						}

						switch cond {
						case inspector.OpEq:
							*result = x1.A == rightExact
						case inspector.OpNq:
							*result = x1.A != rightExact
						case inspector.OpGt:
							*result = x1.A > rightExact
						case inspector.OpGtq:
							*result = x1.A >= rightExact
						case inspector.OpLt:
							*result = x1.A < rightExact
						case inspector.OpLtq:
							*result = x1.A <= rightExact
						}
						return
					}
					if path[2] == "S" {
						var rightExact string
						rightExact = right

						switch cond {
						case inspector.OpEq:
							*result = x1.S == rightExact
						case inspector.OpNq:
							*result = x1.S != rightExact
						case inspector.OpGt:
							*result = x1.S > rightExact
						case inspector.OpGtq:
							*result = x1.S >= rightExact
						case inspector.OpLt:
							*result = x1.S < rightExact
						case inspector.OpLtq:
							*result = x1.S <= rightExact
						}
						return
					}
					if path[2] == "B" {
						var rightExact []byte
						rightExact = fastconv.S2B(right)

						if cond == inspector.OpEq {
							*result = bytes.Equal(x1.B, rightExact)
						} else {
							*result = !bytes.Equal(x1.B, rightExact)
						}
						return
					}
					if path[2] == "I" {
						var rightExact int
						t192, err192 := strconv.ParseInt(right, 0, 0)
						if err192 != nil {
							return err192
						}
						rightExact = int(t192)
						switch cond {
						case inspector.OpEq:
							*result = x1.I == rightExact
						case inspector.OpNq:
							*result = x1.I != rightExact
						case inspector.OpGt:
							*result = x1.I > rightExact
						case inspector.OpGtq:
							*result = x1.I >= rightExact
						case inspector.OpLt:
							*result = x1.I < rightExact
						case inspector.OpLtq:
							*result = x1.I <= rightExact
						}
						return
					}
					if path[2] == "I8" {
						var rightExact int8
						t193, err193 := strconv.ParseInt(right, 0, 0)
						if err193 != nil {
							return err193
						}
						rightExact = int8(t193)
						switch cond {
						case inspector.OpEq:
							*result = x1.I8 == rightExact
						case inspector.OpNq:
							*result = x1.I8 != rightExact
						case inspector.OpGt:
							*result = x1.I8 > rightExact
						case inspector.OpGtq:
							*result = x1.I8 >= rightExact
						case inspector.OpLt:
							*result = x1.I8 < rightExact
						case inspector.OpLtq:
							*result = x1.I8 <= rightExact
						}
						return
					}
					if path[2] == "I16" {
						var rightExact int16
						t194, err194 := strconv.ParseInt(right, 0, 0)
						if err194 != nil {
							return err194
						}
						rightExact = int16(t194)
						switch cond {
						case inspector.OpEq:
							*result = x1.I16 == rightExact
						case inspector.OpNq:
							*result = x1.I16 != rightExact
						case inspector.OpGt:
							*result = x1.I16 > rightExact
						case inspector.OpGtq:
							*result = x1.I16 >= rightExact
						case inspector.OpLt:
							*result = x1.I16 < rightExact
						case inspector.OpLtq:
							*result = x1.I16 <= rightExact
						}
						return
					}
					if path[2] == "I32" {
						var rightExact int32
						t195, err195 := strconv.ParseInt(right, 0, 0)
						if err195 != nil {
							return err195
						}
						rightExact = int32(t195)
						switch cond {
						case inspector.OpEq:
							*result = x1.I32 == rightExact
						case inspector.OpNq:
							*result = x1.I32 != rightExact
						case inspector.OpGt:
							*result = x1.I32 > rightExact
						case inspector.OpGtq:
							*result = x1.I32 >= rightExact
						case inspector.OpLt:
							*result = x1.I32 < rightExact
						case inspector.OpLtq:
							*result = x1.I32 <= rightExact
						}
						return
					}
					if path[2] == "I64" {
						var rightExact int64
						t196, err196 := strconv.ParseInt(right, 0, 0)
						if err196 != nil {
							return err196
						}
						rightExact = int64(t196)
						switch cond {
						case inspector.OpEq:
							*result = x1.I64 == rightExact
						case inspector.OpNq:
							*result = x1.I64 != rightExact
						case inspector.OpGt:
							*result = x1.I64 > rightExact
						case inspector.OpGtq:
							*result = x1.I64 >= rightExact
						case inspector.OpLt:
							*result = x1.I64 < rightExact
						case inspector.OpLtq:
							*result = x1.I64 <= rightExact
						}
						return
					}
					if path[2] == "U" {
						var rightExact uint
						t197, err197 := strconv.ParseUint(right, 0, 0)
						if err197 != nil {
							return err197
						}
						rightExact = uint(t197)
						switch cond {
						case inspector.OpEq:
							*result = x1.U == rightExact
						case inspector.OpNq:
							*result = x1.U != rightExact
						case inspector.OpGt:
							*result = x1.U > rightExact
						case inspector.OpGtq:
							*result = x1.U >= rightExact
						case inspector.OpLt:
							*result = x1.U < rightExact
						case inspector.OpLtq:
							*result = x1.U <= rightExact
						}
						return
					}
					if path[2] == "U8" {
						var rightExact uint8
						t198, err198 := strconv.ParseUint(right, 0, 0)
						if err198 != nil {
							return err198
						}
						rightExact = uint8(t198)
						switch cond {
						case inspector.OpEq:
							*result = x1.U8 == rightExact
						case inspector.OpNq:
							*result = x1.U8 != rightExact
						case inspector.OpGt:
							*result = x1.U8 > rightExact
						case inspector.OpGtq:
							*result = x1.U8 >= rightExact
						case inspector.OpLt:
							*result = x1.U8 < rightExact
						case inspector.OpLtq:
							*result = x1.U8 <= rightExact
						}
						return
					}
					if path[2] == "U16" {
						var rightExact uint16
						t199, err199 := strconv.ParseUint(right, 0, 0)
						if err199 != nil {
							return err199
						}
						rightExact = uint16(t199)
						switch cond {
						case inspector.OpEq:
							*result = x1.U16 == rightExact
						case inspector.OpNq:
							*result = x1.U16 != rightExact
						case inspector.OpGt:
							*result = x1.U16 > rightExact
						case inspector.OpGtq:
							*result = x1.U16 >= rightExact
						case inspector.OpLt:
							*result = x1.U16 < rightExact
						case inspector.OpLtq:
							*result = x1.U16 <= rightExact
						}
						return
					}
					if path[2] == "U32" {
						var rightExact uint32
						t200, err200 := strconv.ParseUint(right, 0, 0)
						if err200 != nil {
							return err200
						}
						rightExact = uint32(t200)
						switch cond {
						case inspector.OpEq:
							*result = x1.U32 == rightExact
						case inspector.OpNq:
							*result = x1.U32 != rightExact
						case inspector.OpGt:
							*result = x1.U32 > rightExact
						case inspector.OpGtq:
							*result = x1.U32 >= rightExact
						case inspector.OpLt:
							*result = x1.U32 < rightExact
						case inspector.OpLtq:
							*result = x1.U32 <= rightExact
						}
						return
					}
					if path[2] == "U64" {
						var rightExact uint64
						t201, err201 := strconv.ParseUint(right, 0, 0)
						if err201 != nil {
							return err201
						}
						rightExact = uint64(t201)
						switch cond {
						case inspector.OpEq:
							*result = x1.U64 == rightExact
						case inspector.OpNq:
							*result = x1.U64 != rightExact
						case inspector.OpGt:
							*result = x1.U64 > rightExact
						case inspector.OpGtq:
							*result = x1.U64 >= rightExact
						case inspector.OpLt:
							*result = x1.U64 < rightExact
						case inspector.OpLtq:
							*result = x1.U64 <= rightExact
						}
						return
					}
					if path[2] == "F" {
						var rightExact float32
						t202, err202 := strconv.ParseFloat(right, 0)
						if err202 != nil {
							return err202
						}
						rightExact = float32(t202)
						switch cond {
						case inspector.OpEq:
							*result = x1.F == rightExact
						case inspector.OpNq:
							*result = x1.F != rightExact
						case inspector.OpGt:
							*result = x1.F > rightExact
						case inspector.OpGtq:
							*result = x1.F >= rightExact
						case inspector.OpLt:
							*result = x1.F < rightExact
						case inspector.OpLtq:
							*result = x1.F <= rightExact
						}
						return
					}
					if path[2] == "D" {
						var rightExact float64
						t203, err203 := strconv.ParseFloat(right, 0)
						if err203 != nil {
							return err203
						}
						rightExact = float64(t203)
						switch cond {
						case inspector.OpEq:
							*result = x1.D == rightExact
						case inspector.OpNq:
							*result = x1.D != rightExact
						case inspector.OpGt:
							*result = x1.D > rightExact
						case inspector.OpGtq:
							*result = x1.D >= rightExact
						case inspector.OpLt:
							*result = x1.D < rightExact
						case inspector.OpLtq:
							*result = x1.D <= rightExact
						}
						return
					}
				}
			}
		}
		if path[0] == "FloatPtrStructPtrMap" {
			x0 := x.FloatPtrStructPtrMap
			_ = x0
			if len(path) > 1 {
				var k float64
				t204, err204 := strconv.ParseFloat(path[1], 0)
				if err204 != nil {
					return err204
				}
				k = float64(t204)
				x1 := (x0)[&k]
				_ = x1
				if len(path) > 2 {
					if x1 == nil {
						return
					}
					if path[2] == "A" {
						var rightExact byte
						t205 := fastconv.S2B(right)
						if len(t205) > 0 {
							rightExact = t205[0]
						}

						switch cond {
						case inspector.OpEq:
							*result = x1.A == rightExact
						case inspector.OpNq:
							*result = x1.A != rightExact
						case inspector.OpGt:
							*result = x1.A > rightExact
						case inspector.OpGtq:
							*result = x1.A >= rightExact
						case inspector.OpLt:
							*result = x1.A < rightExact
						case inspector.OpLtq:
							*result = x1.A <= rightExact
						}
						return
					}
					if path[2] == "S" {
						var rightExact string
						rightExact = right

						switch cond {
						case inspector.OpEq:
							*result = x1.S == rightExact
						case inspector.OpNq:
							*result = x1.S != rightExact
						case inspector.OpGt:
							*result = x1.S > rightExact
						case inspector.OpGtq:
							*result = x1.S >= rightExact
						case inspector.OpLt:
							*result = x1.S < rightExact
						case inspector.OpLtq:
							*result = x1.S <= rightExact
						}
						return
					}
					if path[2] == "B" {
						var rightExact []byte
						rightExact = fastconv.S2B(right)

						if cond == inspector.OpEq {
							*result = bytes.Equal(x1.B, rightExact)
						} else {
							*result = !bytes.Equal(x1.B, rightExact)
						}
						return
					}
					if path[2] == "I" {
						var rightExact int
						t208, err208 := strconv.ParseInt(right, 0, 0)
						if err208 != nil {
							return err208
						}
						rightExact = int(t208)
						switch cond {
						case inspector.OpEq:
							*result = x1.I == rightExact
						case inspector.OpNq:
							*result = x1.I != rightExact
						case inspector.OpGt:
							*result = x1.I > rightExact
						case inspector.OpGtq:
							*result = x1.I >= rightExact
						case inspector.OpLt:
							*result = x1.I < rightExact
						case inspector.OpLtq:
							*result = x1.I <= rightExact
						}
						return
					}
					if path[2] == "I8" {
						var rightExact int8
						t209, err209 := strconv.ParseInt(right, 0, 0)
						if err209 != nil {
							return err209
						}
						rightExact = int8(t209)
						switch cond {
						case inspector.OpEq:
							*result = x1.I8 == rightExact
						case inspector.OpNq:
							*result = x1.I8 != rightExact
						case inspector.OpGt:
							*result = x1.I8 > rightExact
						case inspector.OpGtq:
							*result = x1.I8 >= rightExact
						case inspector.OpLt:
							*result = x1.I8 < rightExact
						case inspector.OpLtq:
							*result = x1.I8 <= rightExact
						}
						return
					}
					if path[2] == "I16" {
						var rightExact int16
						t210, err210 := strconv.ParseInt(right, 0, 0)
						if err210 != nil {
							return err210
						}
						rightExact = int16(t210)
						switch cond {
						case inspector.OpEq:
							*result = x1.I16 == rightExact
						case inspector.OpNq:
							*result = x1.I16 != rightExact
						case inspector.OpGt:
							*result = x1.I16 > rightExact
						case inspector.OpGtq:
							*result = x1.I16 >= rightExact
						case inspector.OpLt:
							*result = x1.I16 < rightExact
						case inspector.OpLtq:
							*result = x1.I16 <= rightExact
						}
						return
					}
					if path[2] == "I32" {
						var rightExact int32
						t211, err211 := strconv.ParseInt(right, 0, 0)
						if err211 != nil {
							return err211
						}
						rightExact = int32(t211)
						switch cond {
						case inspector.OpEq:
							*result = x1.I32 == rightExact
						case inspector.OpNq:
							*result = x1.I32 != rightExact
						case inspector.OpGt:
							*result = x1.I32 > rightExact
						case inspector.OpGtq:
							*result = x1.I32 >= rightExact
						case inspector.OpLt:
							*result = x1.I32 < rightExact
						case inspector.OpLtq:
							*result = x1.I32 <= rightExact
						}
						return
					}
					if path[2] == "I64" {
						var rightExact int64
						t212, err212 := strconv.ParseInt(right, 0, 0)
						if err212 != nil {
							return err212
						}
						rightExact = int64(t212)
						switch cond {
						case inspector.OpEq:
							*result = x1.I64 == rightExact
						case inspector.OpNq:
							*result = x1.I64 != rightExact
						case inspector.OpGt:
							*result = x1.I64 > rightExact
						case inspector.OpGtq:
							*result = x1.I64 >= rightExact
						case inspector.OpLt:
							*result = x1.I64 < rightExact
						case inspector.OpLtq:
							*result = x1.I64 <= rightExact
						}
						return
					}
					if path[2] == "U" {
						var rightExact uint
						t213, err213 := strconv.ParseUint(right, 0, 0)
						if err213 != nil {
							return err213
						}
						rightExact = uint(t213)
						switch cond {
						case inspector.OpEq:
							*result = x1.U == rightExact
						case inspector.OpNq:
							*result = x1.U != rightExact
						case inspector.OpGt:
							*result = x1.U > rightExact
						case inspector.OpGtq:
							*result = x1.U >= rightExact
						case inspector.OpLt:
							*result = x1.U < rightExact
						case inspector.OpLtq:
							*result = x1.U <= rightExact
						}
						return
					}
					if path[2] == "U8" {
						var rightExact uint8
						t214, err214 := strconv.ParseUint(right, 0, 0)
						if err214 != nil {
							return err214
						}
						rightExact = uint8(t214)
						switch cond {
						case inspector.OpEq:
							*result = x1.U8 == rightExact
						case inspector.OpNq:
							*result = x1.U8 != rightExact
						case inspector.OpGt:
							*result = x1.U8 > rightExact
						case inspector.OpGtq:
							*result = x1.U8 >= rightExact
						case inspector.OpLt:
							*result = x1.U8 < rightExact
						case inspector.OpLtq:
							*result = x1.U8 <= rightExact
						}
						return
					}
					if path[2] == "U16" {
						var rightExact uint16
						t215, err215 := strconv.ParseUint(right, 0, 0)
						if err215 != nil {
							return err215
						}
						rightExact = uint16(t215)
						switch cond {
						case inspector.OpEq:
							*result = x1.U16 == rightExact
						case inspector.OpNq:
							*result = x1.U16 != rightExact
						case inspector.OpGt:
							*result = x1.U16 > rightExact
						case inspector.OpGtq:
							*result = x1.U16 >= rightExact
						case inspector.OpLt:
							*result = x1.U16 < rightExact
						case inspector.OpLtq:
							*result = x1.U16 <= rightExact
						}
						return
					}
					if path[2] == "U32" {
						var rightExact uint32
						t216, err216 := strconv.ParseUint(right, 0, 0)
						if err216 != nil {
							return err216
						}
						rightExact = uint32(t216)
						switch cond {
						case inspector.OpEq:
							*result = x1.U32 == rightExact
						case inspector.OpNq:
							*result = x1.U32 != rightExact
						case inspector.OpGt:
							*result = x1.U32 > rightExact
						case inspector.OpGtq:
							*result = x1.U32 >= rightExact
						case inspector.OpLt:
							*result = x1.U32 < rightExact
						case inspector.OpLtq:
							*result = x1.U32 <= rightExact
						}
						return
					}
					if path[2] == "U64" {
						var rightExact uint64
						t217, err217 := strconv.ParseUint(right, 0, 0)
						if err217 != nil {
							return err217
						}
						rightExact = uint64(t217)
						switch cond {
						case inspector.OpEq:
							*result = x1.U64 == rightExact
						case inspector.OpNq:
							*result = x1.U64 != rightExact
						case inspector.OpGt:
							*result = x1.U64 > rightExact
						case inspector.OpGtq:
							*result = x1.U64 >= rightExact
						case inspector.OpLt:
							*result = x1.U64 < rightExact
						case inspector.OpLtq:
							*result = x1.U64 <= rightExact
						}
						return
					}
					if path[2] == "F" {
						var rightExact float32
						t218, err218 := strconv.ParseFloat(right, 0)
						if err218 != nil {
							return err218
						}
						rightExact = float32(t218)
						switch cond {
						case inspector.OpEq:
							*result = x1.F == rightExact
						case inspector.OpNq:
							*result = x1.F != rightExact
						case inspector.OpGt:
							*result = x1.F > rightExact
						case inspector.OpGtq:
							*result = x1.F >= rightExact
						case inspector.OpLt:
							*result = x1.F < rightExact
						case inspector.OpLtq:
							*result = x1.F <= rightExact
						}
						return
					}
					if path[2] == "D" {
						var rightExact float64
						t219, err219 := strconv.ParseFloat(right, 0)
						if err219 != nil {
							return err219
						}
						rightExact = float64(t219)
						switch cond {
						case inspector.OpEq:
							*result = x1.D == rightExact
						case inspector.OpNq:
							*result = x1.D != rightExact
						case inspector.OpGt:
							*result = x1.D > rightExact
						case inspector.OpGtq:
							*result = x1.D >= rightExact
						case inspector.OpLt:
							*result = x1.D < rightExact
						case inspector.OpLtq:
							*result = x1.D <= rightExact
						}
						return
					}
				}
			}
		}
		if path[0] == "FloatPtrStructPtrMapPtr" {
			x0 := x.FloatPtrStructPtrMapPtr
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				var k float64
				t220, err220 := strconv.ParseFloat(path[1], 0)
				if err220 != nil {
					return err220
				}
				k = float64(t220)
				x1 := (*x0)[&k]
				_ = x1
				if len(path) > 2 {
					if x1 == nil {
						return
					}
					if path[2] == "A" {
						var rightExact byte
						t221 := fastconv.S2B(right)
						if len(t221) > 0 {
							rightExact = t221[0]
						}

						switch cond {
						case inspector.OpEq:
							*result = x1.A == rightExact
						case inspector.OpNq:
							*result = x1.A != rightExact
						case inspector.OpGt:
							*result = x1.A > rightExact
						case inspector.OpGtq:
							*result = x1.A >= rightExact
						case inspector.OpLt:
							*result = x1.A < rightExact
						case inspector.OpLtq:
							*result = x1.A <= rightExact
						}
						return
					}
					if path[2] == "S" {
						var rightExact string
						rightExact = right

						switch cond {
						case inspector.OpEq:
							*result = x1.S == rightExact
						case inspector.OpNq:
							*result = x1.S != rightExact
						case inspector.OpGt:
							*result = x1.S > rightExact
						case inspector.OpGtq:
							*result = x1.S >= rightExact
						case inspector.OpLt:
							*result = x1.S < rightExact
						case inspector.OpLtq:
							*result = x1.S <= rightExact
						}
						return
					}
					if path[2] == "B" {
						var rightExact []byte
						rightExact = fastconv.S2B(right)

						if cond == inspector.OpEq {
							*result = bytes.Equal(x1.B, rightExact)
						} else {
							*result = !bytes.Equal(x1.B, rightExact)
						}
						return
					}
					if path[2] == "I" {
						var rightExact int
						t224, err224 := strconv.ParseInt(right, 0, 0)
						if err224 != nil {
							return err224
						}
						rightExact = int(t224)
						switch cond {
						case inspector.OpEq:
							*result = x1.I == rightExact
						case inspector.OpNq:
							*result = x1.I != rightExact
						case inspector.OpGt:
							*result = x1.I > rightExact
						case inspector.OpGtq:
							*result = x1.I >= rightExact
						case inspector.OpLt:
							*result = x1.I < rightExact
						case inspector.OpLtq:
							*result = x1.I <= rightExact
						}
						return
					}
					if path[2] == "I8" {
						var rightExact int8
						t225, err225 := strconv.ParseInt(right, 0, 0)
						if err225 != nil {
							return err225
						}
						rightExact = int8(t225)
						switch cond {
						case inspector.OpEq:
							*result = x1.I8 == rightExact
						case inspector.OpNq:
							*result = x1.I8 != rightExact
						case inspector.OpGt:
							*result = x1.I8 > rightExact
						case inspector.OpGtq:
							*result = x1.I8 >= rightExact
						case inspector.OpLt:
							*result = x1.I8 < rightExact
						case inspector.OpLtq:
							*result = x1.I8 <= rightExact
						}
						return
					}
					if path[2] == "I16" {
						var rightExact int16
						t226, err226 := strconv.ParseInt(right, 0, 0)
						if err226 != nil {
							return err226
						}
						rightExact = int16(t226)
						switch cond {
						case inspector.OpEq:
							*result = x1.I16 == rightExact
						case inspector.OpNq:
							*result = x1.I16 != rightExact
						case inspector.OpGt:
							*result = x1.I16 > rightExact
						case inspector.OpGtq:
							*result = x1.I16 >= rightExact
						case inspector.OpLt:
							*result = x1.I16 < rightExact
						case inspector.OpLtq:
							*result = x1.I16 <= rightExact
						}
						return
					}
					if path[2] == "I32" {
						var rightExact int32
						t227, err227 := strconv.ParseInt(right, 0, 0)
						if err227 != nil {
							return err227
						}
						rightExact = int32(t227)
						switch cond {
						case inspector.OpEq:
							*result = x1.I32 == rightExact
						case inspector.OpNq:
							*result = x1.I32 != rightExact
						case inspector.OpGt:
							*result = x1.I32 > rightExact
						case inspector.OpGtq:
							*result = x1.I32 >= rightExact
						case inspector.OpLt:
							*result = x1.I32 < rightExact
						case inspector.OpLtq:
							*result = x1.I32 <= rightExact
						}
						return
					}
					if path[2] == "I64" {
						var rightExact int64
						t228, err228 := strconv.ParseInt(right, 0, 0)
						if err228 != nil {
							return err228
						}
						rightExact = int64(t228)
						switch cond {
						case inspector.OpEq:
							*result = x1.I64 == rightExact
						case inspector.OpNq:
							*result = x1.I64 != rightExact
						case inspector.OpGt:
							*result = x1.I64 > rightExact
						case inspector.OpGtq:
							*result = x1.I64 >= rightExact
						case inspector.OpLt:
							*result = x1.I64 < rightExact
						case inspector.OpLtq:
							*result = x1.I64 <= rightExact
						}
						return
					}
					if path[2] == "U" {
						var rightExact uint
						t229, err229 := strconv.ParseUint(right, 0, 0)
						if err229 != nil {
							return err229
						}
						rightExact = uint(t229)
						switch cond {
						case inspector.OpEq:
							*result = x1.U == rightExact
						case inspector.OpNq:
							*result = x1.U != rightExact
						case inspector.OpGt:
							*result = x1.U > rightExact
						case inspector.OpGtq:
							*result = x1.U >= rightExact
						case inspector.OpLt:
							*result = x1.U < rightExact
						case inspector.OpLtq:
							*result = x1.U <= rightExact
						}
						return
					}
					if path[2] == "U8" {
						var rightExact uint8
						t230, err230 := strconv.ParseUint(right, 0, 0)
						if err230 != nil {
							return err230
						}
						rightExact = uint8(t230)
						switch cond {
						case inspector.OpEq:
							*result = x1.U8 == rightExact
						case inspector.OpNq:
							*result = x1.U8 != rightExact
						case inspector.OpGt:
							*result = x1.U8 > rightExact
						case inspector.OpGtq:
							*result = x1.U8 >= rightExact
						case inspector.OpLt:
							*result = x1.U8 < rightExact
						case inspector.OpLtq:
							*result = x1.U8 <= rightExact
						}
						return
					}
					if path[2] == "U16" {
						var rightExact uint16
						t231, err231 := strconv.ParseUint(right, 0, 0)
						if err231 != nil {
							return err231
						}
						rightExact = uint16(t231)
						switch cond {
						case inspector.OpEq:
							*result = x1.U16 == rightExact
						case inspector.OpNq:
							*result = x1.U16 != rightExact
						case inspector.OpGt:
							*result = x1.U16 > rightExact
						case inspector.OpGtq:
							*result = x1.U16 >= rightExact
						case inspector.OpLt:
							*result = x1.U16 < rightExact
						case inspector.OpLtq:
							*result = x1.U16 <= rightExact
						}
						return
					}
					if path[2] == "U32" {
						var rightExact uint32
						t232, err232 := strconv.ParseUint(right, 0, 0)
						if err232 != nil {
							return err232
						}
						rightExact = uint32(t232)
						switch cond {
						case inspector.OpEq:
							*result = x1.U32 == rightExact
						case inspector.OpNq:
							*result = x1.U32 != rightExact
						case inspector.OpGt:
							*result = x1.U32 > rightExact
						case inspector.OpGtq:
							*result = x1.U32 >= rightExact
						case inspector.OpLt:
							*result = x1.U32 < rightExact
						case inspector.OpLtq:
							*result = x1.U32 <= rightExact
						}
						return
					}
					if path[2] == "U64" {
						var rightExact uint64
						t233, err233 := strconv.ParseUint(right, 0, 0)
						if err233 != nil {
							return err233
						}
						rightExact = uint64(t233)
						switch cond {
						case inspector.OpEq:
							*result = x1.U64 == rightExact
						case inspector.OpNq:
							*result = x1.U64 != rightExact
						case inspector.OpGt:
							*result = x1.U64 > rightExact
						case inspector.OpGtq:
							*result = x1.U64 >= rightExact
						case inspector.OpLt:
							*result = x1.U64 < rightExact
						case inspector.OpLtq:
							*result = x1.U64 <= rightExact
						}
						return
					}
					if path[2] == "F" {
						var rightExact float32
						t234, err234 := strconv.ParseFloat(right, 0)
						if err234 != nil {
							return err234
						}
						rightExact = float32(t234)
						switch cond {
						case inspector.OpEq:
							*result = x1.F == rightExact
						case inspector.OpNq:
							*result = x1.F != rightExact
						case inspector.OpGt:
							*result = x1.F > rightExact
						case inspector.OpGtq:
							*result = x1.F >= rightExact
						case inspector.OpLt:
							*result = x1.F < rightExact
						case inspector.OpLtq:
							*result = x1.F <= rightExact
						}
						return
					}
					if path[2] == "D" {
						var rightExact float64
						t235, err235 := strconv.ParseFloat(right, 0)
						if err235 != nil {
							return err235
						}
						rightExact = float64(t235)
						switch cond {
						case inspector.OpEq:
							*result = x1.D == rightExact
						case inspector.OpNq:
							*result = x1.D != rightExact
						case inspector.OpGt:
							*result = x1.D > rightExact
						case inspector.OpGtq:
							*result = x1.D >= rightExact
						case inspector.OpLt:
							*result = x1.D < rightExact
						case inspector.OpLtq:
							*result = x1.D <= rightExact
						}
						return
					}
				}
			}
		}
	}
	return
}

func (i6 TestObject1Inspector) Loop(src interface{}, l inspector.Looper, buf *[]byte, path ...string) (err error) {
	if len(path) == 0 {
		return
	}
	if src == nil {
		return
	}
	var x *testobj.TestObject1
	_ = x
	if p, ok := src.(**testobj.TestObject1); ok {
		x = *p
	} else if p, ok := src.(*testobj.TestObject1); ok {
		x = p
	} else if v, ok := src.(testobj.TestObject1); ok {
		x = &v
	} else {
		return
	}

	if len(path) > 0 {
		if path[0] == "IntSlice" {
			x0 := x.IntSlice
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "IntPtrSlice" {
			x0 := x.IntPtrSlice
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "IntSlicePtr" {
			x0 := x.IntSlicePtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "IntPtrSlicePtr" {
			x0 := x.IntPtrSlicePtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "BytePtrSlice" {
			x0 := x.BytePtrSlice
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "BytePtrSlicePtr" {
			x0 := x.BytePtrSlicePtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "FloatSlice" {
			x0 := x.FloatSlice
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "FloatPtrSlice" {
			x0 := x.FloatPtrSlice
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "FloatSlicePtr" {
			x0 := x.FloatSlicePtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "FloatPtrSlicePtr" {
			x0 := x.FloatPtrSlicePtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "StructSlice" {
			x0 := x.StructSlice
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(x0)[k], &TestStructInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "StructPtrSlice" {
			x0 := x.StructPtrSlice
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(x0)[k], &TestStructInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "StructSlicePtr" {
			x0 := x.StructSlicePtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(*x0)[k], &TestStructInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "StructPtrSlicePtr" {
			x0 := x.StructPtrSlicePtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(*x0)[k], &TestStructInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "IntStringMap" {
			x0 := x.IntStringMap
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "IntStringPtrMap" {
			x0 := x.IntStringPtrMap
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "IntStringMapPtr" {
			x0 := x.IntStringMapPtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "IntStringPtrMapPtr" {
			x0 := x.IntStringPtrMapPtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "IntPtrStringPtrMapPtr" {
			x0 := x.IntPtrStringPtrMapPtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(*k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "StringFloatMap" {
			x0 := x.StringFloatMap
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = append((*buf)[:0], k...)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "StringFloatPtrMap" {
			x0 := x.StringFloatPtrMap
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = append((*buf)[:0], k...)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "StringFloatMapPtr" {
			x0 := x.StringFloatMapPtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = append((*buf)[:0], k...)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "StringFloatPtrMapPtr" {
			x0 := x.StringFloatPtrMapPtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = append((*buf)[:0], k...)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "StringPtrFloatPtrMapPtr" {
			x0 := x.StringPtrFloatPtrMapPtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = append((*buf)[:0], *k...)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((*x0)[k], &inspector.StaticInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "FloatStructMap" {
			x0 := x.FloatStructMap
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendFloat((*buf)[:0], float64(k), 'f', -1, 64)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((x0)[k], &TestStructInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "FloatStructPtrMap" {
			x0 := x.FloatStructPtrMap
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendFloat((*buf)[:0], float64(k), 'f', -1, 64)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((x0)[k], &TestStructInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "FloatPtrStructMap" {
			x0 := x.FloatPtrStructMap
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendFloat((*buf)[:0], float64(*k), 'f', -1, 64)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((x0)[k], &TestStructInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "FloatPtrStructPtrMap" {
			x0 := x.FloatPtrStructPtrMap
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendFloat((*buf)[:0], float64(*k), 'f', -1, 64)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((x0)[k], &TestStructInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
		if path[0] == "FloatPtrStructPtrMapPtr" {
			x0 := x.FloatPtrStructPtrMapPtr
			_ = x0
			if x0 == nil {
				return
			}
			for k := range *x0 {
				if l.RequireKey() {
					*buf = strconv.AppendFloat((*buf)[:0], float64(*k), 'f', -1, 64)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal((*x0)[k], &TestStructInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
	}
	return
}

func (i6 TestObject1Inspector) SetWB(dst, value interface{}, buf inspector.AccumulativeBuffer, path ...string) error {
	if len(path) == 0 {
		return nil
	}
	if dst == nil {
		return nil
	}
	var x *testobj.TestObject1
	_ = x
	if p, ok := dst.(**testobj.TestObject1); ok {
		x = *p
	} else if p, ok := dst.(*testobj.TestObject1); ok {
		x = p
	} else if v, ok := dst.(testobj.TestObject1); ok {
		x = &v
	} else {
		return nil
	}

	if len(path) > 0 {
		if path[0] == "IntSlice" {
			x0 := x.IntSlice
			if uvalue, ok := value.(*[]int32); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make([]int32, 0)
				x0 = z
				x.IntSlice = x0
			}
			_ = x0
			if len(path) > 1 {
				var i int
				t236, err236 := strconv.ParseInt(path[1], 0, 0)
				if err236 != nil {
					return err236
				}
				i = int(t236)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					inspector.AssignBuf(&x1, value, buf)
					return nil
					(x0)[i] = x1
					return nil
				}
			}
			x.IntSlice = x0
		}
		if path[0] == "IntPtrSlice" {
			x0 := x.IntPtrSlice
			if uvalue, ok := value.(*[]*int32); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make([]*int32, 0)
				x0 = z
				x.IntPtrSlice = x0
			}
			_ = x0
			if len(path) > 1 {
				var i int
				t237, err237 := strconv.ParseInt(path[1], 0, 0)
				if err237 != nil {
					return err237
				}
				i = int(t237)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return nil
					}
					inspector.AssignBuf(x1, value, buf)
					return nil
					(x0)[i] = x1
					return nil
				}
			}
			x.IntPtrSlice = x0
		}
		if path[0] == "IntSlicePtr" {
			x0 := x.IntSlicePtr
			if uvalue, ok := value.(*[]int32); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make([]int32, 0)
				x0 = &z
				x.IntSlicePtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var i int
				t238, err238 := strconv.ParseInt(path[1], 0, 0)
				if err238 != nil {
					return err238
				}
				i = int(t238)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					inspector.AssignBuf(&x1, value, buf)
					return nil
					(*x0)[i] = x1
					return nil
				}
			}
			x.IntSlicePtr = x0
		}
		if path[0] == "IntPtrSlicePtr" {
			x0 := x.IntPtrSlicePtr
			if uvalue, ok := value.(*[]*int32); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make([]*int32, 0)
				x0 = &z
				x.IntPtrSlicePtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var i int
				t239, err239 := strconv.ParseInt(path[1], 0, 0)
				if err239 != nil {
					return err239
				}
				i = int(t239)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if x1 == nil {
						return nil
					}
					inspector.AssignBuf(x1, value, buf)
					return nil
					(*x0)[i] = x1
					return nil
				}
			}
			x.IntPtrSlicePtr = x0
		}
		if path[0] == "ByteSlice" {
			inspector.AssignBuf(&x.ByteSlice, value, buf)
			return nil
		}
		if path[0] == "BytePtrSlice" {
			x0 := x.BytePtrSlice
			if uvalue, ok := value.(*[]*byte); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make([]*byte, 0)
				x0 = z
				x.BytePtrSlice = x0
			}
			_ = x0
			if len(path) > 1 {
				var i int
				t240, err240 := strconv.ParseInt(path[1], 0, 0)
				if err240 != nil {
					return err240
				}
				i = int(t240)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return nil
					}
					inspector.AssignBuf(x1, value, buf)
					return nil
					(x0)[i] = x1
					return nil
				}
			}
			x.BytePtrSlice = x0
		}
		if path[0] == "ByteSlicePtr" {
			inspector.AssignBuf(x.ByteSlicePtr, value, buf)
			return nil
		}
		if path[0] == "BytePtrSlicePtr" {
			x0 := x.BytePtrSlicePtr
			if uvalue, ok := value.(*[]*byte); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make([]*byte, 0)
				x0 = &z
				x.BytePtrSlicePtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var i int
				t241, err241 := strconv.ParseInt(path[1], 0, 0)
				if err241 != nil {
					return err241
				}
				i = int(t241)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if x1 == nil {
						return nil
					}
					inspector.AssignBuf(x1, value, buf)
					return nil
					(*x0)[i] = x1
					return nil
				}
			}
			x.BytePtrSlicePtr = x0
		}
		if path[0] == "FloatSlice" {
			x0 := x.FloatSlice
			if uvalue, ok := value.(*testobj.TestFloatSlice); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make(testobj.TestFloatSlice, 0)
				x0 = z
				x.FloatSlice = x0
			}
			_ = x0
			if len(path) > 1 {
				var i int
				t242, err242 := strconv.ParseInt(path[1], 0, 0)
				if err242 != nil {
					return err242
				}
				i = int(t242)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					inspector.AssignBuf(&x1, value, buf)
					return nil
					(x0)[i] = x1
					return nil
				}
			}
			x.FloatSlice = x0
		}
		if path[0] == "FloatPtrSlice" {
			x0 := x.FloatPtrSlice
			if uvalue, ok := value.(*testobj.TestFloatPtrSlice); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make(testobj.TestFloatPtrSlice, 0)
				x0 = z
				x.FloatPtrSlice = x0
			}
			_ = x0
			if len(path) > 1 {
				var i int
				t243, err243 := strconv.ParseInt(path[1], 0, 0)
				if err243 != nil {
					return err243
				}
				i = int(t243)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if x1 == nil {
						return nil
					}
					inspector.AssignBuf(x1, value, buf)
					return nil
					(x0)[i] = x1
					return nil
				}
			}
			x.FloatPtrSlice = x0
		}
		if path[0] == "FloatSlicePtr" {
			x0 := x.FloatSlicePtr
			if uvalue, ok := value.(*testobj.TestFloatSlice); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(testobj.TestFloatSlice, 0)
				x0 = &z
				x.FloatSlicePtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var i int
				t244, err244 := strconv.ParseInt(path[1], 0, 0)
				if err244 != nil {
					return err244
				}
				i = int(t244)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					inspector.AssignBuf(&x1, value, buf)
					return nil
					(*x0)[i] = x1
					return nil
				}
			}
			x.FloatSlicePtr = x0
		}
		if path[0] == "FloatPtrSlicePtr" {
			x0 := x.FloatPtrSlicePtr
			if uvalue, ok := value.(*testobj.TestFloatPtrSlice); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(testobj.TestFloatPtrSlice, 0)
				x0 = &z
				x.FloatPtrSlicePtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var i int
				t245, err245 := strconv.ParseInt(path[1], 0, 0)
				if err245 != nil {
					return err245
				}
				i = int(t245)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if x1 == nil {
						return nil
					}
					inspector.AssignBuf(x1, value, buf)
					return nil
					(*x0)[i] = x1
					return nil
				}
			}
			x.FloatPtrSlicePtr = x0
		}
		if path[0] == "StructSlice" {
			x0 := x.StructSlice
			if uvalue, ok := value.(*[]testobj.TestStruct); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make([]testobj.TestStruct, 0)
				x0 = z
				x.StructSlice = x0
			}
			_ = x0
			if len(path) > 1 {
				var i int
				t246, err246 := strconv.ParseInt(path[1], 0, 0)
				if err246 != nil {
					return err246
				}
				i = int(t246)
				if len(x0) > i {
					x1 := &(x0)[i]
					_ = x1
					if len(path) > 2 {
						if path[2] == "A" {
							inspector.AssignBuf(&x1.A, value, buf)
							return nil
						}
						if path[2] == "S" {
							inspector.AssignBuf(&x1.S, value, buf)
							return nil
						}
						if path[2] == "B" {
							inspector.AssignBuf(&x1.B, value, buf)
							return nil
						}
						if path[2] == "I" {
							inspector.AssignBuf(&x1.I, value, buf)
							return nil
						}
						if path[2] == "I8" {
							inspector.AssignBuf(&x1.I8, value, buf)
							return nil
						}
						if path[2] == "I16" {
							inspector.AssignBuf(&x1.I16, value, buf)
							return nil
						}
						if path[2] == "I32" {
							inspector.AssignBuf(&x1.I32, value, buf)
							return nil
						}
						if path[2] == "I64" {
							inspector.AssignBuf(&x1.I64, value, buf)
							return nil
						}
						if path[2] == "U" {
							inspector.AssignBuf(&x1.U, value, buf)
							return nil
						}
						if path[2] == "U8" {
							inspector.AssignBuf(&x1.U8, value, buf)
							return nil
						}
						if path[2] == "U16" {
							inspector.AssignBuf(&x1.U16, value, buf)
							return nil
						}
						if path[2] == "U32" {
							inspector.AssignBuf(&x1.U32, value, buf)
							return nil
						}
						if path[2] == "U64" {
							inspector.AssignBuf(&x1.U64, value, buf)
							return nil
						}
						if path[2] == "F" {
							inspector.AssignBuf(&x1.F, value, buf)
							return nil
						}
						if path[2] == "D" {
							inspector.AssignBuf(&x1.D, value, buf)
							return nil
						}
					}
					(x0)[i] = *x1
					return nil
				}
			}
			x.StructSlice = x0
		}
		if path[0] == "StructPtrSlice" {
			x0 := x.StructPtrSlice
			if uvalue, ok := value.(*[]*testobj.TestStruct); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make([]*testobj.TestStruct, 0)
				x0 = z
				x.StructPtrSlice = x0
			}
			_ = x0
			if len(path) > 1 {
				var i int
				t247, err247 := strconv.ParseInt(path[1], 0, 0)
				if err247 != nil {
					return err247
				}
				i = int(t247)
				if len(x0) > i {
					x1 := (x0)[i]
					_ = x1
					if len(path) > 2 {
						if x1 == nil {
							return nil
						}
						if path[2] == "A" {
							inspector.AssignBuf(&x1.A, value, buf)
							return nil
						}
						if path[2] == "S" {
							inspector.AssignBuf(&x1.S, value, buf)
							return nil
						}
						if path[2] == "B" {
							inspector.AssignBuf(&x1.B, value, buf)
							return nil
						}
						if path[2] == "I" {
							inspector.AssignBuf(&x1.I, value, buf)
							return nil
						}
						if path[2] == "I8" {
							inspector.AssignBuf(&x1.I8, value, buf)
							return nil
						}
						if path[2] == "I16" {
							inspector.AssignBuf(&x1.I16, value, buf)
							return nil
						}
						if path[2] == "I32" {
							inspector.AssignBuf(&x1.I32, value, buf)
							return nil
						}
						if path[2] == "I64" {
							inspector.AssignBuf(&x1.I64, value, buf)
							return nil
						}
						if path[2] == "U" {
							inspector.AssignBuf(&x1.U, value, buf)
							return nil
						}
						if path[2] == "U8" {
							inspector.AssignBuf(&x1.U8, value, buf)
							return nil
						}
						if path[2] == "U16" {
							inspector.AssignBuf(&x1.U16, value, buf)
							return nil
						}
						if path[2] == "U32" {
							inspector.AssignBuf(&x1.U32, value, buf)
							return nil
						}
						if path[2] == "U64" {
							inspector.AssignBuf(&x1.U64, value, buf)
							return nil
						}
						if path[2] == "F" {
							inspector.AssignBuf(&x1.F, value, buf)
							return nil
						}
						if path[2] == "D" {
							inspector.AssignBuf(&x1.D, value, buf)
							return nil
						}
					}
					(x0)[i] = x1
					return nil
				}
			}
			x.StructPtrSlice = x0
		}
		if path[0] == "StructSlicePtr" {
			x0 := x.StructSlicePtr
			if uvalue, ok := value.(*[]testobj.TestStruct); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make([]testobj.TestStruct, 0)
				x0 = &z
				x.StructSlicePtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var i int
				t248, err248 := strconv.ParseInt(path[1], 0, 0)
				if err248 != nil {
					return err248
				}
				i = int(t248)
				if len(*x0) > i {
					x1 := &(*x0)[i]
					_ = x1
					if len(path) > 2 {
						if path[2] == "A" {
							inspector.AssignBuf(&x1.A, value, buf)
							return nil
						}
						if path[2] == "S" {
							inspector.AssignBuf(&x1.S, value, buf)
							return nil
						}
						if path[2] == "B" {
							inspector.AssignBuf(&x1.B, value, buf)
							return nil
						}
						if path[2] == "I" {
							inspector.AssignBuf(&x1.I, value, buf)
							return nil
						}
						if path[2] == "I8" {
							inspector.AssignBuf(&x1.I8, value, buf)
							return nil
						}
						if path[2] == "I16" {
							inspector.AssignBuf(&x1.I16, value, buf)
							return nil
						}
						if path[2] == "I32" {
							inspector.AssignBuf(&x1.I32, value, buf)
							return nil
						}
						if path[2] == "I64" {
							inspector.AssignBuf(&x1.I64, value, buf)
							return nil
						}
						if path[2] == "U" {
							inspector.AssignBuf(&x1.U, value, buf)
							return nil
						}
						if path[2] == "U8" {
							inspector.AssignBuf(&x1.U8, value, buf)
							return nil
						}
						if path[2] == "U16" {
							inspector.AssignBuf(&x1.U16, value, buf)
							return nil
						}
						if path[2] == "U32" {
							inspector.AssignBuf(&x1.U32, value, buf)
							return nil
						}
						if path[2] == "U64" {
							inspector.AssignBuf(&x1.U64, value, buf)
							return nil
						}
						if path[2] == "F" {
							inspector.AssignBuf(&x1.F, value, buf)
							return nil
						}
						if path[2] == "D" {
							inspector.AssignBuf(&x1.D, value, buf)
							return nil
						}
					}
					(*x0)[i] = *x1
					return nil
				}
			}
			x.StructSlicePtr = x0
		}
		if path[0] == "StructPtrSlicePtr" {
			x0 := x.StructPtrSlicePtr
			if uvalue, ok := value.(*[]*testobj.TestStruct); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make([]*testobj.TestStruct, 0)
				x0 = &z
				x.StructPtrSlicePtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var i int
				t249, err249 := strconv.ParseInt(path[1], 0, 0)
				if err249 != nil {
					return err249
				}
				i = int(t249)
				if len(*x0) > i {
					x1 := (*x0)[i]
					_ = x1
					if len(path) > 2 {
						if x1 == nil {
							return nil
						}
						if path[2] == "A" {
							inspector.AssignBuf(&x1.A, value, buf)
							return nil
						}
						if path[2] == "S" {
							inspector.AssignBuf(&x1.S, value, buf)
							return nil
						}
						if path[2] == "B" {
							inspector.AssignBuf(&x1.B, value, buf)
							return nil
						}
						if path[2] == "I" {
							inspector.AssignBuf(&x1.I, value, buf)
							return nil
						}
						if path[2] == "I8" {
							inspector.AssignBuf(&x1.I8, value, buf)
							return nil
						}
						if path[2] == "I16" {
							inspector.AssignBuf(&x1.I16, value, buf)
							return nil
						}
						if path[2] == "I32" {
							inspector.AssignBuf(&x1.I32, value, buf)
							return nil
						}
						if path[2] == "I64" {
							inspector.AssignBuf(&x1.I64, value, buf)
							return nil
						}
						if path[2] == "U" {
							inspector.AssignBuf(&x1.U, value, buf)
							return nil
						}
						if path[2] == "U8" {
							inspector.AssignBuf(&x1.U8, value, buf)
							return nil
						}
						if path[2] == "U16" {
							inspector.AssignBuf(&x1.U16, value, buf)
							return nil
						}
						if path[2] == "U32" {
							inspector.AssignBuf(&x1.U32, value, buf)
							return nil
						}
						if path[2] == "U64" {
							inspector.AssignBuf(&x1.U64, value, buf)
							return nil
						}
						if path[2] == "F" {
							inspector.AssignBuf(&x1.F, value, buf)
							return nil
						}
						if path[2] == "D" {
							inspector.AssignBuf(&x1.D, value, buf)
							return nil
						}
					}
					(*x0)[i] = x1
					return nil
				}
			}
			x.StructPtrSlicePtr = x0
		}
		if path[0] == "IntStringMap" {
			x0 := x.IntStringMap
			if uvalue, ok := value.(*map[int]string); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make(map[int]string)
				x0 = z
				x.IntStringMap = x0
			}
			_ = x0
			if len(path) > 1 {
				var k int
				t250, err250 := strconv.ParseInt(path[1], 0, 0)
				if err250 != nil {
					return err250
				}
				k = int(t250)
				x1 := (x0)[k]
				_ = x1
				inspector.AssignBuf(&x1, value, buf)
				(x0)[k] = x1
				return nil
			}
			x.IntStringMap = x0
		}
		if path[0] == "IntStringPtrMap" {
			x0 := x.IntStringPtrMap
			if uvalue, ok := value.(*map[int]*string); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make(map[int]*string)
				x0 = z
				x.IntStringPtrMap = x0
			}
			_ = x0
			if len(path) > 1 {
				var k int
				t251, err251 := strconv.ParseInt(path[1], 0, 0)
				if err251 != nil {
					return err251
				}
				k = int(t251)
				x1 := (x0)[k]
				_ = x1
				if x1 == nil {
					return nil
				}
				inspector.AssignBuf(x1, value, buf)
				(x0)[k] = x1
				return nil
			}
			x.IntStringPtrMap = x0
		}
		if path[0] == "IntStringMapPtr" {
			x0 := x.IntStringMapPtr
			if uvalue, ok := value.(*map[int]string); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(map[int]string)
				x0 = &z
				x.IntStringMapPtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var k int
				t252, err252 := strconv.ParseInt(path[1], 0, 0)
				if err252 != nil {
					return err252
				}
				k = int(t252)
				x1 := (*x0)[k]
				_ = x1
				inspector.AssignBuf(&x1, value, buf)
				(*x0)[k] = x1
				return nil
			}
			x.IntStringMapPtr = x0
		}
		if path[0] == "IntStringPtrMapPtr" {
			x0 := x.IntStringPtrMapPtr
			if uvalue, ok := value.(*map[int]*string); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(map[int]*string)
				x0 = &z
				x.IntStringPtrMapPtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var k int
				t253, err253 := strconv.ParseInt(path[1], 0, 0)
				if err253 != nil {
					return err253
				}
				k = int(t253)
				x1 := (*x0)[k]
				_ = x1
				if x1 == nil {
					return nil
				}
				inspector.AssignBuf(x1, value, buf)
				(*x0)[k] = x1
				return nil
			}
			x.IntStringPtrMapPtr = x0
		}
		if path[0] == "IntPtrStringPtrMapPtr" {
			x0 := x.IntPtrStringPtrMapPtr
			if uvalue, ok := value.(*map[*int]*string); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(map[*int]*string)
				x0 = &z
				x.IntPtrStringPtrMapPtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var k int
				t254, err254 := strconv.ParseInt(path[1], 0, 0)
				if err254 != nil {
					return err254
				}
				k = int(t254)
				x1 := (*x0)[&k]
				_ = x1
				if x1 == nil {
					return nil
				}
				inspector.AssignBuf(x1, value, buf)
				(*x0)[&k] = x1
				return nil
			}
			x.IntPtrStringPtrMapPtr = x0
		}
		if path[0] == "StringFloatMap" {
			x0 := x.StringFloatMap
			if uvalue, ok := value.(*testobj.TestStringFloatMap); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make(testobj.TestStringFloatMap)
				x0 = z
				x.StringFloatMap = x0
			}
			_ = x0
			if len(path) > 1 {
				x1 := (x0)[path[1]]
				_ = x1
				inspector.AssignBuf(&x1, value, buf)
				(x0)[path[1]] = x1
				return nil
			}
			x.StringFloatMap = x0
		}
		if path[0] == "StringFloatPtrMap" {
			x0 := x.StringFloatPtrMap
			if uvalue, ok := value.(*testobj.TestStringFloatPtrMap); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make(testobj.TestStringFloatPtrMap)
				x0 = z
				x.StringFloatPtrMap = x0
			}
			_ = x0
			if len(path) > 1 {
				x1 := (x0)[path[1]]
				_ = x1
				if x1 == nil {
					return nil
				}
				inspector.AssignBuf(x1, value, buf)
				(x0)[path[1]] = x1
				return nil
			}
			x.StringFloatPtrMap = x0
		}
		if path[0] == "StringFloatMapPtr" {
			x0 := x.StringFloatMapPtr
			if uvalue, ok := value.(*testobj.TestStringFloatMap); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(testobj.TestStringFloatMap)
				x0 = &z
				x.StringFloatMapPtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				x1 := (*x0)[path[1]]
				_ = x1
				inspector.AssignBuf(&x1, value, buf)
				(*x0)[path[1]] = x1
				return nil
			}
			x.StringFloatMapPtr = x0
		}
		if path[0] == "StringFloatPtrMapPtr" {
			x0 := x.StringFloatPtrMapPtr
			if uvalue, ok := value.(*testobj.TestStringFloatPtrMap); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(testobj.TestStringFloatPtrMap)
				x0 = &z
				x.StringFloatPtrMapPtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				x1 := (*x0)[path[1]]
				_ = x1
				if x1 == nil {
					return nil
				}
				inspector.AssignBuf(x1, value, buf)
				(*x0)[path[1]] = x1
				return nil
			}
			x.StringFloatPtrMapPtr = x0
		}
		if path[0] == "StringPtrFloatPtrMapPtr" {
			x0 := x.StringPtrFloatPtrMapPtr
			if uvalue, ok := value.(*testobj.TestStringPtrFloatPtrMap); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(testobj.TestStringPtrFloatPtrMap)
				x0 = &z
				x.StringPtrFloatPtrMapPtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				x1 := (*x0)[&path[1]]
				_ = x1
				if x1 == nil {
					return nil
				}
				inspector.AssignBuf(x1, value, buf)
				(*x0)[&path[1]] = x1
				return nil
			}
			x.StringPtrFloatPtrMapPtr = x0
		}
		if path[0] == "FloatStructMap" {
			x0 := x.FloatStructMap
			if uvalue, ok := value.(*map[float64]testobj.TestStruct); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make(map[float64]testobj.TestStruct)
				x0 = z
				x.FloatStructMap = x0
			}
			_ = x0
			if len(path) > 1 {
				var k float64
				t255, err255 := strconv.ParseFloat(path[1], 0)
				if err255 != nil {
					return err255
				}
				k = float64(t255)
				x1 := (x0)[k]
				_ = x1
				if len(path) > 2 {
					if path[2] == "A" {
						inspector.AssignBuf(&x1.A, value, buf)
						return nil
					}
					if path[2] == "S" {
						inspector.AssignBuf(&x1.S, value, buf)
						return nil
					}
					if path[2] == "B" {
						inspector.AssignBuf(&x1.B, value, buf)
						return nil
					}
					if path[2] == "I" {
						inspector.AssignBuf(&x1.I, value, buf)
						return nil
					}
					if path[2] == "I8" {
						inspector.AssignBuf(&x1.I8, value, buf)
						return nil
					}
					if path[2] == "I16" {
						inspector.AssignBuf(&x1.I16, value, buf)
						return nil
					}
					if path[2] == "I32" {
						inspector.AssignBuf(&x1.I32, value, buf)
						return nil
					}
					if path[2] == "I64" {
						inspector.AssignBuf(&x1.I64, value, buf)
						return nil
					}
					if path[2] == "U" {
						inspector.AssignBuf(&x1.U, value, buf)
						return nil
					}
					if path[2] == "U8" {
						inspector.AssignBuf(&x1.U8, value, buf)
						return nil
					}
					if path[2] == "U16" {
						inspector.AssignBuf(&x1.U16, value, buf)
						return nil
					}
					if path[2] == "U32" {
						inspector.AssignBuf(&x1.U32, value, buf)
						return nil
					}
					if path[2] == "U64" {
						inspector.AssignBuf(&x1.U64, value, buf)
						return nil
					}
					if path[2] == "F" {
						inspector.AssignBuf(&x1.F, value, buf)
						return nil
					}
					if path[2] == "D" {
						inspector.AssignBuf(&x1.D, value, buf)
						return nil
					}
				}
				(x0)[k] = x1
				return nil
			}
			x.FloatStructMap = x0
		}
		if path[0] == "FloatStructPtrMap" {
			x0 := x.FloatStructPtrMap
			if uvalue, ok := value.(*map[float64]*testobj.TestStruct); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make(map[float64]*testobj.TestStruct)
				x0 = z
				x.FloatStructPtrMap = x0
			}
			_ = x0
			if len(path) > 1 {
				var k float64
				t256, err256 := strconv.ParseFloat(path[1], 0)
				if err256 != nil {
					return err256
				}
				k = float64(t256)
				x1 := (x0)[k]
				_ = x1
				if len(path) > 2 {
					if x1 == nil {
						return nil
					}
					if path[2] == "A" {
						inspector.AssignBuf(&x1.A, value, buf)
						return nil
					}
					if path[2] == "S" {
						inspector.AssignBuf(&x1.S, value, buf)
						return nil
					}
					if path[2] == "B" {
						inspector.AssignBuf(&x1.B, value, buf)
						return nil
					}
					if path[2] == "I" {
						inspector.AssignBuf(&x1.I, value, buf)
						return nil
					}
					if path[2] == "I8" {
						inspector.AssignBuf(&x1.I8, value, buf)
						return nil
					}
					if path[2] == "I16" {
						inspector.AssignBuf(&x1.I16, value, buf)
						return nil
					}
					if path[2] == "I32" {
						inspector.AssignBuf(&x1.I32, value, buf)
						return nil
					}
					if path[2] == "I64" {
						inspector.AssignBuf(&x1.I64, value, buf)
						return nil
					}
					if path[2] == "U" {
						inspector.AssignBuf(&x1.U, value, buf)
						return nil
					}
					if path[2] == "U8" {
						inspector.AssignBuf(&x1.U8, value, buf)
						return nil
					}
					if path[2] == "U16" {
						inspector.AssignBuf(&x1.U16, value, buf)
						return nil
					}
					if path[2] == "U32" {
						inspector.AssignBuf(&x1.U32, value, buf)
						return nil
					}
					if path[2] == "U64" {
						inspector.AssignBuf(&x1.U64, value, buf)
						return nil
					}
					if path[2] == "F" {
						inspector.AssignBuf(&x1.F, value, buf)
						return nil
					}
					if path[2] == "D" {
						inspector.AssignBuf(&x1.D, value, buf)
						return nil
					}
				}
				(x0)[k] = x1
				return nil
			}
			x.FloatStructPtrMap = x0
		}
		if path[0] == "FloatPtrStructMap" {
			x0 := x.FloatPtrStructMap
			if uvalue, ok := value.(*map[*float64]testobj.TestStruct); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make(map[*float64]testobj.TestStruct)
				x0 = z
				x.FloatPtrStructMap = x0
			}
			_ = x0
			if len(path) > 1 {
				var k float64
				t257, err257 := strconv.ParseFloat(path[1], 0)
				if err257 != nil {
					return err257
				}
				k = float64(t257)
				x1 := (x0)[&k]
				_ = x1
				if len(path) > 2 {
					if path[2] == "A" {
						inspector.AssignBuf(&x1.A, value, buf)
						return nil
					}
					if path[2] == "S" {
						inspector.AssignBuf(&x1.S, value, buf)
						return nil
					}
					if path[2] == "B" {
						inspector.AssignBuf(&x1.B, value, buf)
						return nil
					}
					if path[2] == "I" {
						inspector.AssignBuf(&x1.I, value, buf)
						return nil
					}
					if path[2] == "I8" {
						inspector.AssignBuf(&x1.I8, value, buf)
						return nil
					}
					if path[2] == "I16" {
						inspector.AssignBuf(&x1.I16, value, buf)
						return nil
					}
					if path[2] == "I32" {
						inspector.AssignBuf(&x1.I32, value, buf)
						return nil
					}
					if path[2] == "I64" {
						inspector.AssignBuf(&x1.I64, value, buf)
						return nil
					}
					if path[2] == "U" {
						inspector.AssignBuf(&x1.U, value, buf)
						return nil
					}
					if path[2] == "U8" {
						inspector.AssignBuf(&x1.U8, value, buf)
						return nil
					}
					if path[2] == "U16" {
						inspector.AssignBuf(&x1.U16, value, buf)
						return nil
					}
					if path[2] == "U32" {
						inspector.AssignBuf(&x1.U32, value, buf)
						return nil
					}
					if path[2] == "U64" {
						inspector.AssignBuf(&x1.U64, value, buf)
						return nil
					}
					if path[2] == "F" {
						inspector.AssignBuf(&x1.F, value, buf)
						return nil
					}
					if path[2] == "D" {
						inspector.AssignBuf(&x1.D, value, buf)
						return nil
					}
				}
				(x0)[&k] = x1
				return nil
			}
			x.FloatPtrStructMap = x0
		}
		if path[0] == "FloatPtrStructPtrMap" {
			x0 := x.FloatPtrStructPtrMap
			if uvalue, ok := value.(*map[*float64]*testobj.TestStruct); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make(map[*float64]*testobj.TestStruct)
				x0 = z
				x.FloatPtrStructPtrMap = x0
			}
			_ = x0
			if len(path) > 1 {
				var k float64
				t258, err258 := strconv.ParseFloat(path[1], 0)
				if err258 != nil {
					return err258
				}
				k = float64(t258)
				x1 := (x0)[&k]
				_ = x1
				if len(path) > 2 {
					if x1 == nil {
						return nil
					}
					if path[2] == "A" {
						inspector.AssignBuf(&x1.A, value, buf)
						return nil
					}
					if path[2] == "S" {
						inspector.AssignBuf(&x1.S, value, buf)
						return nil
					}
					if path[2] == "B" {
						inspector.AssignBuf(&x1.B, value, buf)
						return nil
					}
					if path[2] == "I" {
						inspector.AssignBuf(&x1.I, value, buf)
						return nil
					}
					if path[2] == "I8" {
						inspector.AssignBuf(&x1.I8, value, buf)
						return nil
					}
					if path[2] == "I16" {
						inspector.AssignBuf(&x1.I16, value, buf)
						return nil
					}
					if path[2] == "I32" {
						inspector.AssignBuf(&x1.I32, value, buf)
						return nil
					}
					if path[2] == "I64" {
						inspector.AssignBuf(&x1.I64, value, buf)
						return nil
					}
					if path[2] == "U" {
						inspector.AssignBuf(&x1.U, value, buf)
						return nil
					}
					if path[2] == "U8" {
						inspector.AssignBuf(&x1.U8, value, buf)
						return nil
					}
					if path[2] == "U16" {
						inspector.AssignBuf(&x1.U16, value, buf)
						return nil
					}
					if path[2] == "U32" {
						inspector.AssignBuf(&x1.U32, value, buf)
						return nil
					}
					if path[2] == "U64" {
						inspector.AssignBuf(&x1.U64, value, buf)
						return nil
					}
					if path[2] == "F" {
						inspector.AssignBuf(&x1.F, value, buf)
						return nil
					}
					if path[2] == "D" {
						inspector.AssignBuf(&x1.D, value, buf)
						return nil
					}
				}
				(x0)[&k] = x1
				return nil
			}
			x.FloatPtrStructPtrMap = x0
		}
		if path[0] == "FloatPtrStructPtrMapPtr" {
			x0 := x.FloatPtrStructPtrMapPtr
			if uvalue, ok := value.(*map[*float64]*testobj.TestStruct); ok {
				x0 = uvalue
			}
			if x0 == nil {
				z := make(map[*float64]*testobj.TestStruct)
				x0 = &z
				x.FloatPtrStructPtrMapPtr = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				var k float64
				t259, err259 := strconv.ParseFloat(path[1], 0)
				if err259 != nil {
					return err259
				}
				k = float64(t259)
				x1 := (*x0)[&k]
				_ = x1
				if len(path) > 2 {
					if x1 == nil {
						return nil
					}
					if path[2] == "A" {
						inspector.AssignBuf(&x1.A, value, buf)
						return nil
					}
					if path[2] == "S" {
						inspector.AssignBuf(&x1.S, value, buf)
						return nil
					}
					if path[2] == "B" {
						inspector.AssignBuf(&x1.B, value, buf)
						return nil
					}
					if path[2] == "I" {
						inspector.AssignBuf(&x1.I, value, buf)
						return nil
					}
					if path[2] == "I8" {
						inspector.AssignBuf(&x1.I8, value, buf)
						return nil
					}
					if path[2] == "I16" {
						inspector.AssignBuf(&x1.I16, value, buf)
						return nil
					}
					if path[2] == "I32" {
						inspector.AssignBuf(&x1.I32, value, buf)
						return nil
					}
					if path[2] == "I64" {
						inspector.AssignBuf(&x1.I64, value, buf)
						return nil
					}
					if path[2] == "U" {
						inspector.AssignBuf(&x1.U, value, buf)
						return nil
					}
					if path[2] == "U8" {
						inspector.AssignBuf(&x1.U8, value, buf)
						return nil
					}
					if path[2] == "U16" {
						inspector.AssignBuf(&x1.U16, value, buf)
						return nil
					}
					if path[2] == "U32" {
						inspector.AssignBuf(&x1.U32, value, buf)
						return nil
					}
					if path[2] == "U64" {
						inspector.AssignBuf(&x1.U64, value, buf)
						return nil
					}
					if path[2] == "F" {
						inspector.AssignBuf(&x1.F, value, buf)
						return nil
					}
					if path[2] == "D" {
						inspector.AssignBuf(&x1.D, value, buf)
						return nil
					}
				}
				(*x0)[&k] = x1
				return nil
			}
			x.FloatPtrStructPtrMapPtr = x0
		}
	}
	return nil
}

func (i6 TestObject1Inspector) Set(dst, value interface{}, path ...string) error {
	return i6.SetWB(dst, value, nil, path...)
}

func (i6 TestObject1Inspector) DeepEqual(l, r interface{}) bool {
	return i6.DeepEqualWithOptions(l, r, nil)
}

func (i6 TestObject1Inspector) DeepEqualWithOptions(l, r interface{}, opts *inspector.DEQOptions) bool {
	var (
		lx, rx   *testobj.TestObject1
		leq, req bool
	)
	_, _, _, _ = lx, rx, leq, req
	if lp, ok := l.(**testobj.TestObject1); ok {
		lx, leq = *lp, true
	} else if lp, ok := l.(*testobj.TestObject1); ok {
		lx, leq = lp, true
	} else if lp, ok := l.(testobj.TestObject1); ok {
		lx, leq = &lp, true
	}
	if rp, ok := r.(**testobj.TestObject1); ok {
		rx, req = *rp, true
	} else if rp, ok := r.(*testobj.TestObject1); ok {
		rx, req = rp, true
	} else if rp, ok := r.(testobj.TestObject1); ok {
		rx, req = &rp, true
	}
	if !leq || !req {
		return false
	}
	if lx == nil && rx == nil {
		return true
	}
	if (lx == nil && rx != nil) || (lx != nil && rx == nil) {
		return false
	}

	lx1 := lx.IntSlice
	rx1 := rx.IntSlice
	_, _ = lx1, rx1
	if inspector.DEQMustCheck("IntSlice", opts) {
		if len(lx1) != len(rx1) {
			return false
		}
		for i := 0; i < len(lx1); i++ {
			lx2 := (lx1)[i]
			rx2 := (rx1)[i]
			_, _ = lx2, rx2
			if lx2 != rx2 {
				return false
			}
		}
	}
	lx3 := lx.IntPtrSlice
	rx3 := rx.IntPtrSlice
	_, _ = lx3, rx3
	if inspector.DEQMustCheck("IntPtrSlice", opts) {
		if len(lx3) != len(rx3) {
			return false
		}
		for i := 0; i < len(lx3); i++ {
			lx4 := (lx3)[i]
			rx4 := (rx3)[i]
			_, _ = lx4, rx4
			if (lx4 == nil && rx4 != nil) || (lx4 != nil && rx4 == nil) {
				return false
			}
			if lx4 != nil && rx4 != nil {
				if *lx4 != *rx4 {
					return false
				}
			}
		}
	}
	lx5 := lx.IntSlicePtr
	rx5 := rx.IntSlicePtr
	_, _ = lx5, rx5
	if (lx5 == nil && rx5 != nil) || (lx5 != nil && rx5 == nil) {
		return false
	}
	if lx5 != nil && rx5 != nil {
		if inspector.DEQMustCheck("IntSlicePtr", opts) {
			if len(*lx5) != len(*rx5) {
				return false
			}
			for i := 0; i < len(*lx5); i++ {
				lx6 := (*lx5)[i]
				rx6 := (*rx5)[i]
				_, _ = lx6, rx6
				if lx6 != rx6 {
					return false
				}
			}
		}
	}
	lx7 := lx.IntPtrSlicePtr
	rx7 := rx.IntPtrSlicePtr
	_, _ = lx7, rx7
	if (lx7 == nil && rx7 != nil) || (lx7 != nil && rx7 == nil) {
		return false
	}
	if lx7 != nil && rx7 != nil {
		if inspector.DEQMustCheck("IntPtrSlicePtr", opts) {
			if len(*lx7) != len(*rx7) {
				return false
			}
			for i := 0; i < len(*lx7); i++ {
				lx8 := (*lx7)[i]
				rx8 := (*rx7)[i]
				_, _ = lx8, rx8
				if (lx8 == nil && rx8 != nil) || (lx8 != nil && rx8 == nil) {
					return false
				}
				if lx8 != nil && rx8 != nil {
					if *lx8 != *rx8 {
						return false
					}
				}
			}
		}
	}
	if !bytes.Equal(lx.ByteSlice, rx.ByteSlice) && inspector.DEQMustCheck("ByteSlice", opts) {
		return false
	}
	lx9 := lx.BytePtrSlice
	rx9 := rx.BytePtrSlice
	_, _ = lx9, rx9
	if inspector.DEQMustCheck("BytePtrSlice", opts) {
		if len(lx9) != len(rx9) {
			return false
		}
		for i := 0; i < len(lx9); i++ {
			lx10 := (lx9)[i]
			rx10 := (rx9)[i]
			_, _ = lx10, rx10
			if (lx10 == nil && rx10 != nil) || (lx10 != nil && rx10 == nil) {
				return false
			}
			if lx10 != nil && rx10 != nil {
				if *lx10 != *rx10 {
					return false
				}
			}
		}
	}
	if (lx == nil && rx != nil) || (lx != nil && rx == nil) {
		return false
	}
	if lx != nil && rx != nil {
		if !bytes.Equal(*lx.ByteSlicePtr, *rx.ByteSlicePtr) && inspector.DEQMustCheck("ByteSlicePtr", opts) {
			return false
		}
	}
	lx11 := lx.BytePtrSlicePtr
	rx11 := rx.BytePtrSlicePtr
	_, _ = lx11, rx11
	if (lx11 == nil && rx11 != nil) || (lx11 != nil && rx11 == nil) {
		return false
	}
	if lx11 != nil && rx11 != nil {
		if inspector.DEQMustCheck("BytePtrSlicePtr", opts) {
			if len(*lx11) != len(*rx11) {
				return false
			}
			for i := 0; i < len(*lx11); i++ {
				lx12 := (*lx11)[i]
				rx12 := (*rx11)[i]
				_, _ = lx12, rx12
				if (lx12 == nil && rx12 != nil) || (lx12 != nil && rx12 == nil) {
					return false
				}
				if lx12 != nil && rx12 != nil {
					if *lx12 != *rx12 {
						return false
					}
				}
			}
		}
	}
	lx13 := lx.FloatSlice
	rx13 := rx.FloatSlice
	_, _ = lx13, rx13
	if inspector.DEQMustCheck("FloatSlice", opts) {
		if len(lx13) != len(rx13) {
			return false
		}
		for i := 0; i < len(lx13); i++ {
			lx14 := (lx13)[i]
			rx14 := (rx13)[i]
			_, _ = lx14, rx14
			if lx14 != rx14 {
				return false
			}
		}
	}
	lx15 := lx.FloatPtrSlice
	rx15 := rx.FloatPtrSlice
	_, _ = lx15, rx15
	if inspector.DEQMustCheck("FloatPtrSlice", opts) {
		if len(lx15) != len(rx15) {
			return false
		}
		for i := 0; i < len(lx15); i++ {
			lx16 := (lx15)[i]
			rx16 := (rx15)[i]
			_, _ = lx16, rx16
			if (lx16 == nil && rx16 != nil) || (lx16 != nil && rx16 == nil) {
				return false
			}
			if lx16 != nil && rx16 != nil {
				if *lx16 != *rx16 {
					return false
				}
			}
		}
	}
	lx17 := lx.FloatSlicePtr
	rx17 := rx.FloatSlicePtr
	_, _ = lx17, rx17
	if (lx17 == nil && rx17 != nil) || (lx17 != nil && rx17 == nil) {
		return false
	}
	if lx17 != nil && rx17 != nil {
		if inspector.DEQMustCheck("FloatSlicePtr", opts) {
			if len(*lx17) != len(*rx17) {
				return false
			}
			for i := 0; i < len(*lx17); i++ {
				lx18 := (*lx17)[i]
				rx18 := (*rx17)[i]
				_, _ = lx18, rx18
				if lx18 != rx18 {
					return false
				}
			}
		}
	}
	lx19 := lx.FloatPtrSlicePtr
	rx19 := rx.FloatPtrSlicePtr
	_, _ = lx19, rx19
	if (lx19 == nil && rx19 != nil) || (lx19 != nil && rx19 == nil) {
		return false
	}
	if lx19 != nil && rx19 != nil {
		if inspector.DEQMustCheck("FloatPtrSlicePtr", opts) {
			if len(*lx19) != len(*rx19) {
				return false
			}
			for i := 0; i < len(*lx19); i++ {
				lx20 := (*lx19)[i]
				rx20 := (*rx19)[i]
				_, _ = lx20, rx20
				if (lx20 == nil && rx20 != nil) || (lx20 != nil && rx20 == nil) {
					return false
				}
				if lx20 != nil && rx20 != nil {
					if *lx20 != *rx20 {
						return false
					}
				}
			}
		}
	}
	lx21 := lx.StructSlice
	rx21 := rx.StructSlice
	_, _ = lx21, rx21
	if inspector.DEQMustCheck("StructSlice", opts) {
		if len(lx21) != len(rx21) {
			return false
		}
		for i := 0; i < len(lx21); i++ {
			lx22 := (lx21)[i]
			rx22 := (rx21)[i]
			_, _ = lx22, rx22
			if lx22.A != rx22.A && inspector.DEQMustCheck("StructSlice.A", opts) {
				return false
			}
			if lx22.S != rx22.S && inspector.DEQMustCheck("StructSlice.S", opts) {
				return false
			}
			if !bytes.Equal(lx22.B, rx22.B) && inspector.DEQMustCheck("StructSlice.B", opts) {
				return false
			}
			if lx22.I != rx22.I && inspector.DEQMustCheck("StructSlice.I", opts) {
				return false
			}
			if lx22.I8 != rx22.I8 && inspector.DEQMustCheck("StructSlice.I8", opts) {
				return false
			}
			if lx22.I16 != rx22.I16 && inspector.DEQMustCheck("StructSlice.I16", opts) {
				return false
			}
			if lx22.I32 != rx22.I32 && inspector.DEQMustCheck("StructSlice.I32", opts) {
				return false
			}
			if lx22.I64 != rx22.I64 && inspector.DEQMustCheck("StructSlice.I64", opts) {
				return false
			}
			if lx22.U != rx22.U && inspector.DEQMustCheck("StructSlice.U", opts) {
				return false
			}
			if lx22.U8 != rx22.U8 && inspector.DEQMustCheck("StructSlice.U8", opts) {
				return false
			}
			if lx22.U16 != rx22.U16 && inspector.DEQMustCheck("StructSlice.U16", opts) {
				return false
			}
			if lx22.U32 != rx22.U32 && inspector.DEQMustCheck("StructSlice.U32", opts) {
				return false
			}
			if lx22.U64 != rx22.U64 && inspector.DEQMustCheck("StructSlice.U64", opts) {
				return false
			}
			if !inspector.EqualFloat32(lx22.F, rx22.F, opts) && inspector.DEQMustCheck("StructSlice.F", opts) {
				return false
			}
			if !inspector.EqualFloat64(lx22.D, rx22.D, opts) && inspector.DEQMustCheck("StructSlice.D", opts) {
				return false
			}
		}
	}
	lx23 := lx.StructPtrSlice
	rx23 := rx.StructPtrSlice
	_, _ = lx23, rx23
	if inspector.DEQMustCheck("StructPtrSlice", opts) {
		if len(lx23) != len(rx23) {
			return false
		}
		for i := 0; i < len(lx23); i++ {
			lx24 := (lx23)[i]
			rx24 := (rx23)[i]
			_, _ = lx24, rx24
			if (lx24 == nil && rx24 != nil) || (lx24 != nil && rx24 == nil) {
				return false
			}
			if lx24 != nil && rx24 != nil {
				if lx24.A != rx24.A && inspector.DEQMustCheck("StructPtrSlice.A", opts) {
					return false
				}
				if lx24.S != rx24.S && inspector.DEQMustCheck("StructPtrSlice.S", opts) {
					return false
				}
				if !bytes.Equal(lx24.B, rx24.B) && inspector.DEQMustCheck("StructPtrSlice.B", opts) {
					return false
				}
				if lx24.I != rx24.I && inspector.DEQMustCheck("StructPtrSlice.I", opts) {
					return false
				}
				if lx24.I8 != rx24.I8 && inspector.DEQMustCheck("StructPtrSlice.I8", opts) {
					return false
				}
				if lx24.I16 != rx24.I16 && inspector.DEQMustCheck("StructPtrSlice.I16", opts) {
					return false
				}
				if lx24.I32 != rx24.I32 && inspector.DEQMustCheck("StructPtrSlice.I32", opts) {
					return false
				}
				if lx24.I64 != rx24.I64 && inspector.DEQMustCheck("StructPtrSlice.I64", opts) {
					return false
				}
				if lx24.U != rx24.U && inspector.DEQMustCheck("StructPtrSlice.U", opts) {
					return false
				}
				if lx24.U8 != rx24.U8 && inspector.DEQMustCheck("StructPtrSlice.U8", opts) {
					return false
				}
				if lx24.U16 != rx24.U16 && inspector.DEQMustCheck("StructPtrSlice.U16", opts) {
					return false
				}
				if lx24.U32 != rx24.U32 && inspector.DEQMustCheck("StructPtrSlice.U32", opts) {
					return false
				}
				if lx24.U64 != rx24.U64 && inspector.DEQMustCheck("StructPtrSlice.U64", opts) {
					return false
				}
				if !inspector.EqualFloat32(lx24.F, rx24.F, opts) && inspector.DEQMustCheck("StructPtrSlice.F", opts) {
					return false
				}
				if !inspector.EqualFloat64(lx24.D, rx24.D, opts) && inspector.DEQMustCheck("StructPtrSlice.D", opts) {
					return false
				}
			}
		}
	}
	lx25 := lx.StructSlicePtr
	rx25 := rx.StructSlicePtr
	_, _ = lx25, rx25
	if (lx25 == nil && rx25 != nil) || (lx25 != nil && rx25 == nil) {
		return false
	}
	if lx25 != nil && rx25 != nil {
		if inspector.DEQMustCheck("StructSlicePtr", opts) {
			if len(*lx25) != len(*rx25) {
				return false
			}
			for i := 0; i < len(*lx25); i++ {
				lx26 := (*lx25)[i]
				rx26 := (*rx25)[i]
				_, _ = lx26, rx26
				if lx26.A != rx26.A && inspector.DEQMustCheck("StructSlicePtr.A", opts) {
					return false
				}
				if lx26.S != rx26.S && inspector.DEQMustCheck("StructSlicePtr.S", opts) {
					return false
				}
				if !bytes.Equal(lx26.B, rx26.B) && inspector.DEQMustCheck("StructSlicePtr.B", opts) {
					return false
				}
				if lx26.I != rx26.I && inspector.DEQMustCheck("StructSlicePtr.I", opts) {
					return false
				}
				if lx26.I8 != rx26.I8 && inspector.DEQMustCheck("StructSlicePtr.I8", opts) {
					return false
				}
				if lx26.I16 != rx26.I16 && inspector.DEQMustCheck("StructSlicePtr.I16", opts) {
					return false
				}
				if lx26.I32 != rx26.I32 && inspector.DEQMustCheck("StructSlicePtr.I32", opts) {
					return false
				}
				if lx26.I64 != rx26.I64 && inspector.DEQMustCheck("StructSlicePtr.I64", opts) {
					return false
				}
				if lx26.U != rx26.U && inspector.DEQMustCheck("StructSlicePtr.U", opts) {
					return false
				}
				if lx26.U8 != rx26.U8 && inspector.DEQMustCheck("StructSlicePtr.U8", opts) {
					return false
				}
				if lx26.U16 != rx26.U16 && inspector.DEQMustCheck("StructSlicePtr.U16", opts) {
					return false
				}
				if lx26.U32 != rx26.U32 && inspector.DEQMustCheck("StructSlicePtr.U32", opts) {
					return false
				}
				if lx26.U64 != rx26.U64 && inspector.DEQMustCheck("StructSlicePtr.U64", opts) {
					return false
				}
				if !inspector.EqualFloat32(lx26.F, rx26.F, opts) && inspector.DEQMustCheck("StructSlicePtr.F", opts) {
					return false
				}
				if !inspector.EqualFloat64(lx26.D, rx26.D, opts) && inspector.DEQMustCheck("StructSlicePtr.D", opts) {
					return false
				}
			}
		}
	}
	lx27 := lx.StructPtrSlicePtr
	rx27 := rx.StructPtrSlicePtr
	_, _ = lx27, rx27
	if (lx27 == nil && rx27 != nil) || (lx27 != nil && rx27 == nil) {
		return false
	}
	if lx27 != nil && rx27 != nil {
		if inspector.DEQMustCheck("StructPtrSlicePtr", opts) {
			if len(*lx27) != len(*rx27) {
				return false
			}
			for i := 0; i < len(*lx27); i++ {
				lx28 := (*lx27)[i]
				rx28 := (*rx27)[i]
				_, _ = lx28, rx28
				if (lx28 == nil && rx28 != nil) || (lx28 != nil && rx28 == nil) {
					return false
				}
				if lx28 != nil && rx28 != nil {
					if lx28.A != rx28.A && inspector.DEQMustCheck("StructPtrSlicePtr.A", opts) {
						return false
					}
					if lx28.S != rx28.S && inspector.DEQMustCheck("StructPtrSlicePtr.S", opts) {
						return false
					}
					if !bytes.Equal(lx28.B, rx28.B) && inspector.DEQMustCheck("StructPtrSlicePtr.B", opts) {
						return false
					}
					if lx28.I != rx28.I && inspector.DEQMustCheck("StructPtrSlicePtr.I", opts) {
						return false
					}
					if lx28.I8 != rx28.I8 && inspector.DEQMustCheck("StructPtrSlicePtr.I8", opts) {
						return false
					}
					if lx28.I16 != rx28.I16 && inspector.DEQMustCheck("StructPtrSlicePtr.I16", opts) {
						return false
					}
					if lx28.I32 != rx28.I32 && inspector.DEQMustCheck("StructPtrSlicePtr.I32", opts) {
						return false
					}
					if lx28.I64 != rx28.I64 && inspector.DEQMustCheck("StructPtrSlicePtr.I64", opts) {
						return false
					}
					if lx28.U != rx28.U && inspector.DEQMustCheck("StructPtrSlicePtr.U", opts) {
						return false
					}
					if lx28.U8 != rx28.U8 && inspector.DEQMustCheck("StructPtrSlicePtr.U8", opts) {
						return false
					}
					if lx28.U16 != rx28.U16 && inspector.DEQMustCheck("StructPtrSlicePtr.U16", opts) {
						return false
					}
					if lx28.U32 != rx28.U32 && inspector.DEQMustCheck("StructPtrSlicePtr.U32", opts) {
						return false
					}
					if lx28.U64 != rx28.U64 && inspector.DEQMustCheck("StructPtrSlicePtr.U64", opts) {
						return false
					}
					if !inspector.EqualFloat32(lx28.F, rx28.F, opts) && inspector.DEQMustCheck("StructPtrSlicePtr.F", opts) {
						return false
					}
					if !inspector.EqualFloat64(lx28.D, rx28.D, opts) && inspector.DEQMustCheck("StructPtrSlicePtr.D", opts) {
						return false
					}
				}
			}
		}
	}
	lx29 := lx.IntStringMap
	rx29 := rx.IntStringMap
	_, _ = lx29, rx29
	if inspector.DEQMustCheck("IntStringMap", opts) {
		if len(lx29) != len(rx29) {
			return false
		}
		for k := range lx29 {
			lx30 := (lx29)[k]
			rx30, ok30 := (rx29)[k]
			_, _, _ = lx30, rx30, ok30
			if !ok30 {
				return false
			}
			if lx30 != rx30 {
				return false
			}
		}
	}
	lx31 := lx.IntStringPtrMap
	rx31 := rx.IntStringPtrMap
	_, _ = lx31, rx31
	if inspector.DEQMustCheck("IntStringPtrMap", opts) {
		if len(lx31) != len(rx31) {
			return false
		}
		for k := range lx31 {
			lx32 := (lx31)[k]
			rx32, ok32 := (rx31)[k]
			_, _, _ = lx32, rx32, ok32
			if !ok32 {
				return false
			}
			if (lx32 == nil && rx32 != nil) || (lx32 != nil && rx32 == nil) {
				return false
			}
			if lx32 != nil && rx32 != nil {
				if *lx32 != *rx32 {
					return false
				}
			}
		}
	}
	lx33 := lx.IntStringMapPtr
	rx33 := rx.IntStringMapPtr
	_, _ = lx33, rx33
	if (lx33 == nil && rx33 != nil) || (lx33 != nil && rx33 == nil) {
		return false
	}
	if lx33 != nil && rx33 != nil {
		if inspector.DEQMustCheck("IntStringMapPtr", opts) {
			if len(*lx33) != len(*rx33) {
				return false
			}
			for k := range *lx33 {
				lx34 := (*lx33)[k]
				rx34, ok34 := (*rx33)[k]
				_, _, _ = lx34, rx34, ok34
				if !ok34 {
					return false
				}
				if lx34 != rx34 {
					return false
				}
			}
		}
	}
	lx35 := lx.IntStringPtrMapPtr
	rx35 := rx.IntStringPtrMapPtr
	_, _ = lx35, rx35
	if (lx35 == nil && rx35 != nil) || (lx35 != nil && rx35 == nil) {
		return false
	}
	if lx35 != nil && rx35 != nil {
		if inspector.DEQMustCheck("IntStringPtrMapPtr", opts) {
			if len(*lx35) != len(*rx35) {
				return false
			}
			for k := range *lx35 {
				lx36 := (*lx35)[k]
				rx36, ok36 := (*rx35)[k]
				_, _, _ = lx36, rx36, ok36
				if !ok36 {
					return false
				}
				if (lx36 == nil && rx36 != nil) || (lx36 != nil && rx36 == nil) {
					return false
				}
				if lx36 != nil && rx36 != nil {
					if *lx36 != *rx36 {
						return false
					}
				}
			}
		}
	}
	lx37 := lx.IntPtrStringPtrMapPtr
	rx37 := rx.IntPtrStringPtrMapPtr
	_, _ = lx37, rx37
	if (lx37 == nil && rx37 != nil) || (lx37 != nil && rx37 == nil) {
		return false
	}
	if lx37 != nil && rx37 != nil {
		if inspector.DEQMustCheck("IntPtrStringPtrMapPtr", opts) {
			if len(*lx37) != len(*rx37) {
				return false
			}
			for k := range *lx37 {
				lx38 := (*lx37)[k]
				rx38, ok38 := (*rx37)[k]
				_, _, _ = lx38, rx38, ok38
				if !ok38 {
					return false
				}
				if (lx38 == nil && rx38 != nil) || (lx38 != nil && rx38 == nil) {
					return false
				}
				if lx38 != nil && rx38 != nil {
					if *lx38 != *rx38 {
						return false
					}
				}
			}
		}
	}
	lx39 := lx.StringFloatMap
	rx39 := rx.StringFloatMap
	_, _ = lx39, rx39
	if inspector.DEQMustCheck("StringFloatMap", opts) {
		if len(lx39) != len(rx39) {
			return false
		}
		for k := range lx39 {
			lx40 := (lx39)[k]
			rx40, ok40 := (rx39)[k]
			_, _, _ = lx40, rx40, ok40
			if !ok40 {
				return false
			}
			if lx40 != rx40 {
				return false
			}
		}
	}
	lx41 := lx.StringFloatPtrMap
	rx41 := rx.StringFloatPtrMap
	_, _ = lx41, rx41
	if inspector.DEQMustCheck("StringFloatPtrMap", opts) {
		if len(lx41) != len(rx41) {
			return false
		}
		for k := range lx41 {
			lx42 := (lx41)[k]
			rx42, ok42 := (rx41)[k]
			_, _, _ = lx42, rx42, ok42
			if !ok42 {
				return false
			}
			if (lx42 == nil && rx42 != nil) || (lx42 != nil && rx42 == nil) {
				return false
			}
			if lx42 != nil && rx42 != nil {
				if *lx42 != *rx42 {
					return false
				}
			}
		}
	}
	lx43 := lx.StringFloatMapPtr
	rx43 := rx.StringFloatMapPtr
	_, _ = lx43, rx43
	if (lx43 == nil && rx43 != nil) || (lx43 != nil && rx43 == nil) {
		return false
	}
	if lx43 != nil && rx43 != nil {
		if inspector.DEQMustCheck("StringFloatMapPtr", opts) {
			if len(*lx43) != len(*rx43) {
				return false
			}
			for k := range *lx43 {
				lx44 := (*lx43)[k]
				rx44, ok44 := (*rx43)[k]
				_, _, _ = lx44, rx44, ok44
				if !ok44 {
					return false
				}
				if lx44 != rx44 {
					return false
				}
			}
		}
	}
	lx45 := lx.StringFloatPtrMapPtr
	rx45 := rx.StringFloatPtrMapPtr
	_, _ = lx45, rx45
	if (lx45 == nil && rx45 != nil) || (lx45 != nil && rx45 == nil) {
		return false
	}
	if lx45 != nil && rx45 != nil {
		if inspector.DEQMustCheck("StringFloatPtrMapPtr", opts) {
			if len(*lx45) != len(*rx45) {
				return false
			}
			for k := range *lx45 {
				lx46 := (*lx45)[k]
				rx46, ok46 := (*rx45)[k]
				_, _, _ = lx46, rx46, ok46
				if !ok46 {
					return false
				}
				if (lx46 == nil && rx46 != nil) || (lx46 != nil && rx46 == nil) {
					return false
				}
				if lx46 != nil && rx46 != nil {
					if *lx46 != *rx46 {
						return false
					}
				}
			}
		}
	}
	lx47 := lx.StringPtrFloatPtrMapPtr
	rx47 := rx.StringPtrFloatPtrMapPtr
	_, _ = lx47, rx47
	if (lx47 == nil && rx47 != nil) || (lx47 != nil && rx47 == nil) {
		return false
	}
	if lx47 != nil && rx47 != nil {
		if inspector.DEQMustCheck("StringPtrFloatPtrMapPtr", opts) {
			if len(*lx47) != len(*rx47) {
				return false
			}
			for k := range *lx47 {
				lx48 := (*lx47)[k]
				rx48, ok48 := (*rx47)[k]
				_, _, _ = lx48, rx48, ok48
				if !ok48 {
					return false
				}
				if (lx48 == nil && rx48 != nil) || (lx48 != nil && rx48 == nil) {
					return false
				}
				if lx48 != nil && rx48 != nil {
					if *lx48 != *rx48 {
						return false
					}
				}
			}
		}
	}
	lx49 := lx.FloatStructMap
	rx49 := rx.FloatStructMap
	_, _ = lx49, rx49
	if inspector.DEQMustCheck("FloatStructMap", opts) {
		if len(lx49) != len(rx49) {
			return false
		}
		for k := range lx49 {
			lx50 := (lx49)[k]
			rx50, ok50 := (rx49)[k]
			_, _, _ = lx50, rx50, ok50
			if !ok50 {
				return false
			}
			if lx50.A != rx50.A && inspector.DEQMustCheck("FloatStructMap.A", opts) {
				return false
			}
			if lx50.S != rx50.S && inspector.DEQMustCheck("FloatStructMap.S", opts) {
				return false
			}
			if !bytes.Equal(lx50.B, rx50.B) && inspector.DEQMustCheck("FloatStructMap.B", opts) {
				return false
			}
			if lx50.I != rx50.I && inspector.DEQMustCheck("FloatStructMap.I", opts) {
				return false
			}
			if lx50.I8 != rx50.I8 && inspector.DEQMustCheck("FloatStructMap.I8", opts) {
				return false
			}
			if lx50.I16 != rx50.I16 && inspector.DEQMustCheck("FloatStructMap.I16", opts) {
				return false
			}
			if lx50.I32 != rx50.I32 && inspector.DEQMustCheck("FloatStructMap.I32", opts) {
				return false
			}
			if lx50.I64 != rx50.I64 && inspector.DEQMustCheck("FloatStructMap.I64", opts) {
				return false
			}
			if lx50.U != rx50.U && inspector.DEQMustCheck("FloatStructMap.U", opts) {
				return false
			}
			if lx50.U8 != rx50.U8 && inspector.DEQMustCheck("FloatStructMap.U8", opts) {
				return false
			}
			if lx50.U16 != rx50.U16 && inspector.DEQMustCheck("FloatStructMap.U16", opts) {
				return false
			}
			if lx50.U32 != rx50.U32 && inspector.DEQMustCheck("FloatStructMap.U32", opts) {
				return false
			}
			if lx50.U64 != rx50.U64 && inspector.DEQMustCheck("FloatStructMap.U64", opts) {
				return false
			}
			if !inspector.EqualFloat32(lx50.F, rx50.F, opts) && inspector.DEQMustCheck("FloatStructMap.F", opts) {
				return false
			}
			if !inspector.EqualFloat64(lx50.D, rx50.D, opts) && inspector.DEQMustCheck("FloatStructMap.D", opts) {
				return false
			}
		}
	}
	lx51 := lx.FloatStructPtrMap
	rx51 := rx.FloatStructPtrMap
	_, _ = lx51, rx51
	if inspector.DEQMustCheck("FloatStructPtrMap", opts) {
		if len(lx51) != len(rx51) {
			return false
		}
		for k := range lx51 {
			lx52 := (lx51)[k]
			rx52, ok52 := (rx51)[k]
			_, _, _ = lx52, rx52, ok52
			if !ok52 {
				return false
			}
			if (lx52 == nil && rx52 != nil) || (lx52 != nil && rx52 == nil) {
				return false
			}
			if lx52 != nil && rx52 != nil {
				if lx52.A != rx52.A && inspector.DEQMustCheck("FloatStructPtrMap.A", opts) {
					return false
				}
				if lx52.S != rx52.S && inspector.DEQMustCheck("FloatStructPtrMap.S", opts) {
					return false
				}
				if !bytes.Equal(lx52.B, rx52.B) && inspector.DEQMustCheck("FloatStructPtrMap.B", opts) {
					return false
				}
				if lx52.I != rx52.I && inspector.DEQMustCheck("FloatStructPtrMap.I", opts) {
					return false
				}
				if lx52.I8 != rx52.I8 && inspector.DEQMustCheck("FloatStructPtrMap.I8", opts) {
					return false
				}
				if lx52.I16 != rx52.I16 && inspector.DEQMustCheck("FloatStructPtrMap.I16", opts) {
					return false
				}
				if lx52.I32 != rx52.I32 && inspector.DEQMustCheck("FloatStructPtrMap.I32", opts) {
					return false
				}
				if lx52.I64 != rx52.I64 && inspector.DEQMustCheck("FloatStructPtrMap.I64", opts) {
					return false
				}
				if lx52.U != rx52.U && inspector.DEQMustCheck("FloatStructPtrMap.U", opts) {
					return false
				}
				if lx52.U8 != rx52.U8 && inspector.DEQMustCheck("FloatStructPtrMap.U8", opts) {
					return false
				}
				if lx52.U16 != rx52.U16 && inspector.DEQMustCheck("FloatStructPtrMap.U16", opts) {
					return false
				}
				if lx52.U32 != rx52.U32 && inspector.DEQMustCheck("FloatStructPtrMap.U32", opts) {
					return false
				}
				if lx52.U64 != rx52.U64 && inspector.DEQMustCheck("FloatStructPtrMap.U64", opts) {
					return false
				}
				if !inspector.EqualFloat32(lx52.F, rx52.F, opts) && inspector.DEQMustCheck("FloatStructPtrMap.F", opts) {
					return false
				}
				if !inspector.EqualFloat64(lx52.D, rx52.D, opts) && inspector.DEQMustCheck("FloatStructPtrMap.D", opts) {
					return false
				}
			}
		}
	}
	lx53 := lx.FloatPtrStructMap
	rx53 := rx.FloatPtrStructMap
	_, _ = lx53, rx53
	if inspector.DEQMustCheck("FloatPtrStructMap", opts) {
		if len(lx53) != len(rx53) {
			return false
		}
		for k := range lx53 {
			lx54 := (lx53)[k]
			rx54, ok54 := (rx53)[k]
			_, _, _ = lx54, rx54, ok54
			if !ok54 {
				return false
			}
			if lx54.A != rx54.A && inspector.DEQMustCheck("FloatPtrStructMap.A", opts) {
				return false
			}
			if lx54.S != rx54.S && inspector.DEQMustCheck("FloatPtrStructMap.S", opts) {
				return false
			}
			if !bytes.Equal(lx54.B, rx54.B) && inspector.DEQMustCheck("FloatPtrStructMap.B", opts) {
				return false
			}
			if lx54.I != rx54.I && inspector.DEQMustCheck("FloatPtrStructMap.I", opts) {
				return false
			}
			if lx54.I8 != rx54.I8 && inspector.DEQMustCheck("FloatPtrStructMap.I8", opts) {
				return false
			}
			if lx54.I16 != rx54.I16 && inspector.DEQMustCheck("FloatPtrStructMap.I16", opts) {
				return false
			}
			if lx54.I32 != rx54.I32 && inspector.DEQMustCheck("FloatPtrStructMap.I32", opts) {
				return false
			}
			if lx54.I64 != rx54.I64 && inspector.DEQMustCheck("FloatPtrStructMap.I64", opts) {
				return false
			}
			if lx54.U != rx54.U && inspector.DEQMustCheck("FloatPtrStructMap.U", opts) {
				return false
			}
			if lx54.U8 != rx54.U8 && inspector.DEQMustCheck("FloatPtrStructMap.U8", opts) {
				return false
			}
			if lx54.U16 != rx54.U16 && inspector.DEQMustCheck("FloatPtrStructMap.U16", opts) {
				return false
			}
			if lx54.U32 != rx54.U32 && inspector.DEQMustCheck("FloatPtrStructMap.U32", opts) {
				return false
			}
			if lx54.U64 != rx54.U64 && inspector.DEQMustCheck("FloatPtrStructMap.U64", opts) {
				return false
			}
			if !inspector.EqualFloat32(lx54.F, rx54.F, opts) && inspector.DEQMustCheck("FloatPtrStructMap.F", opts) {
				return false
			}
			if !inspector.EqualFloat64(lx54.D, rx54.D, opts) && inspector.DEQMustCheck("FloatPtrStructMap.D", opts) {
				return false
			}
		}
	}
	lx55 := lx.FloatPtrStructPtrMap
	rx55 := rx.FloatPtrStructPtrMap
	_, _ = lx55, rx55
	if inspector.DEQMustCheck("FloatPtrStructPtrMap", opts) {
		if len(lx55) != len(rx55) {
			return false
		}
		for k := range lx55 {
			lx56 := (lx55)[k]
			rx56, ok56 := (rx55)[k]
			_, _, _ = lx56, rx56, ok56
			if !ok56 {
				return false
			}
			if (lx56 == nil && rx56 != nil) || (lx56 != nil && rx56 == nil) {
				return false
			}
			if lx56 != nil && rx56 != nil {
				if lx56.A != rx56.A && inspector.DEQMustCheck("FloatPtrStructPtrMap.A", opts) {
					return false
				}
				if lx56.S != rx56.S && inspector.DEQMustCheck("FloatPtrStructPtrMap.S", opts) {
					return false
				}
				if !bytes.Equal(lx56.B, rx56.B) && inspector.DEQMustCheck("FloatPtrStructPtrMap.B", opts) {
					return false
				}
				if lx56.I != rx56.I && inspector.DEQMustCheck("FloatPtrStructPtrMap.I", opts) {
					return false
				}
				if lx56.I8 != rx56.I8 && inspector.DEQMustCheck("FloatPtrStructPtrMap.I8", opts) {
					return false
				}
				if lx56.I16 != rx56.I16 && inspector.DEQMustCheck("FloatPtrStructPtrMap.I16", opts) {
					return false
				}
				if lx56.I32 != rx56.I32 && inspector.DEQMustCheck("FloatPtrStructPtrMap.I32", opts) {
					return false
				}
				if lx56.I64 != rx56.I64 && inspector.DEQMustCheck("FloatPtrStructPtrMap.I64", opts) {
					return false
				}
				if lx56.U != rx56.U && inspector.DEQMustCheck("FloatPtrStructPtrMap.U", opts) {
					return false
				}
				if lx56.U8 != rx56.U8 && inspector.DEQMustCheck("FloatPtrStructPtrMap.U8", opts) {
					return false
				}
				if lx56.U16 != rx56.U16 && inspector.DEQMustCheck("FloatPtrStructPtrMap.U16", opts) {
					return false
				}
				if lx56.U32 != rx56.U32 && inspector.DEQMustCheck("FloatPtrStructPtrMap.U32", opts) {
					return false
				}
				if lx56.U64 != rx56.U64 && inspector.DEQMustCheck("FloatPtrStructPtrMap.U64", opts) {
					return false
				}
				if !inspector.EqualFloat32(lx56.F, rx56.F, opts) && inspector.DEQMustCheck("FloatPtrStructPtrMap.F", opts) {
					return false
				}
				if !inspector.EqualFloat64(lx56.D, rx56.D, opts) && inspector.DEQMustCheck("FloatPtrStructPtrMap.D", opts) {
					return false
				}
			}
		}
	}
	lx57 := lx.FloatPtrStructPtrMapPtr
	rx57 := rx.FloatPtrStructPtrMapPtr
	_, _ = lx57, rx57
	if (lx57 == nil && rx57 != nil) || (lx57 != nil && rx57 == nil) {
		return false
	}
	if lx57 != nil && rx57 != nil {
		if inspector.DEQMustCheck("FloatPtrStructPtrMapPtr", opts) {
			if len(*lx57) != len(*rx57) {
				return false
			}
			for k := range *lx57 {
				lx58 := (*lx57)[k]
				rx58, ok58 := (*rx57)[k]
				_, _, _ = lx58, rx58, ok58
				if !ok58 {
					return false
				}
				if (lx58 == nil && rx58 != nil) || (lx58 != nil && rx58 == nil) {
					return false
				}
				if lx58 != nil && rx58 != nil {
					if lx58.A != rx58.A && inspector.DEQMustCheck("FloatPtrStructPtrMapPtr.A", opts) {
						return false
					}
					if lx58.S != rx58.S && inspector.DEQMustCheck("FloatPtrStructPtrMapPtr.S", opts) {
						return false
					}
					if !bytes.Equal(lx58.B, rx58.B) && inspector.DEQMustCheck("FloatPtrStructPtrMapPtr.B", opts) {
						return false
					}
					if lx58.I != rx58.I && inspector.DEQMustCheck("FloatPtrStructPtrMapPtr.I", opts) {
						return false
					}
					if lx58.I8 != rx58.I8 && inspector.DEQMustCheck("FloatPtrStructPtrMapPtr.I8", opts) {
						return false
					}
					if lx58.I16 != rx58.I16 && inspector.DEQMustCheck("FloatPtrStructPtrMapPtr.I16", opts) {
						return false
					}
					if lx58.I32 != rx58.I32 && inspector.DEQMustCheck("FloatPtrStructPtrMapPtr.I32", opts) {
						return false
					}
					if lx58.I64 != rx58.I64 && inspector.DEQMustCheck("FloatPtrStructPtrMapPtr.I64", opts) {
						return false
					}
					if lx58.U != rx58.U && inspector.DEQMustCheck("FloatPtrStructPtrMapPtr.U", opts) {
						return false
					}
					if lx58.U8 != rx58.U8 && inspector.DEQMustCheck("FloatPtrStructPtrMapPtr.U8", opts) {
						return false
					}
					if lx58.U16 != rx58.U16 && inspector.DEQMustCheck("FloatPtrStructPtrMapPtr.U16", opts) {
						return false
					}
					if lx58.U32 != rx58.U32 && inspector.DEQMustCheck("FloatPtrStructPtrMapPtr.U32", opts) {
						return false
					}
					if lx58.U64 != rx58.U64 && inspector.DEQMustCheck("FloatPtrStructPtrMapPtr.U64", opts) {
						return false
					}
					if !inspector.EqualFloat32(lx58.F, rx58.F, opts) && inspector.DEQMustCheck("FloatPtrStructPtrMapPtr.F", opts) {
						return false
					}
					if !inspector.EqualFloat64(lx58.D, rx58.D, opts) && inspector.DEQMustCheck("FloatPtrStructPtrMapPtr.D", opts) {
						return false
					}
				}
			}
		}
	}
	return true
}

func (i6 TestObject1Inspector) Unmarshal(p []byte, typ inspector.Encoding) (interface{}, error) {
	var x testobj.TestObject1
	switch typ {
	case inspector.EncodingJSON:
		err := json.Unmarshal(p, &x)
		return &x, err
	default:
		return nil, inspector.ErrUnknownEncodingType
	}
}

func (i6 TestObject1Inspector) Copy(x interface{}) (interface{}, error) {
	var origin, cpy testobj.TestObject1
	switch x.(type) {
	case testobj.TestObject1:
		origin = x.(testobj.TestObject1)
	case *testobj.TestObject1:
		origin = *x.(*testobj.TestObject1)
	case **testobj.TestObject1:
		origin = **x.(**testobj.TestObject1)
	default:
		return nil, inspector.ErrUnsupportedType
	}
	bc := i6.calcBytes(&origin)
	buf1 := make([]byte, 0, bc)
	if err := i6.cpy(buf1, &cpy, &origin); err != nil {
		return nil, err
	}
	return cpy, nil
}

func (i6 TestObject1Inspector) CopyWB(x interface{}, buf inspector.AccumulativeBuffer) (interface{}, error) {
	var origin, cpy testobj.TestObject1
	switch x.(type) {
	case testobj.TestObject1:
		origin = x.(testobj.TestObject1)
	case *testobj.TestObject1:
		origin = *x.(*testobj.TestObject1)
	case **testobj.TestObject1:
		origin = **x.(**testobj.TestObject1)
	default:
		return nil, inspector.ErrUnsupportedType
	}
	buf1 := buf.AcquireBytes()
	defer buf.ReleaseBytes(buf1)
	if err := i6.cpy(buf1, &cpy, &origin); err != nil {
		return nil, err
	}
	return cpy, nil
}

func (i6 TestObject1Inspector) calcBytes(x *testobj.TestObject1) (c int) {
	c += len(x.ByteSlice)
	if x.ByteSlicePtr != nil {
		c += len(*x.ByteSlicePtr)
	}
	for i1 := 0; i1 < len(x.StructSlice); i1++ {
		x1 := &(x.StructSlice)[i1]
		c += len(x1.S)
		c += len(x1.B)
	}
	for i1 := 0; i1 < len(x.StructPtrSlice); i1++ {
		x1 := (x.StructPtrSlice)[i1]
		c += len(x1.S)
		c += len(x1.B)
	}
	if x.StructSlicePtr != nil {
		for i1 := 0; i1 < len(*x.StructSlicePtr); i1++ {
			x1 := &(*x.StructSlicePtr)[i1]
			c += len(x1.S)
			c += len(x1.B)
		}
	}
	if x.StructPtrSlicePtr != nil {
		for i1 := 0; i1 < len(*x.StructPtrSlicePtr); i1++ {
			x1 := (*x.StructPtrSlicePtr)[i1]
			c += len(x1.S)
			c += len(x1.B)
		}
	}
	for k1, v1 := range x.IntStringMap {
		_, _ = k1, v1
		c += len(v1)
	}
	for k1, v1 := range x.IntStringPtrMap {
		_, _ = k1, v1
		c += len(*v1)
	}
	if x.IntStringMapPtr != nil {
		for k1, v1 := range *x.IntStringMapPtr {
			_, _ = k1, v1
			c += len(v1)
		}
	}
	if x.IntStringPtrMapPtr != nil {
		for k1, v1 := range *x.IntStringPtrMapPtr {
			_, _ = k1, v1
			c += len(*v1)
		}
	}
	if x.IntPtrStringPtrMapPtr != nil {
		for k1, v1 := range *x.IntPtrStringPtrMapPtr {
			_, _ = k1, v1
			c += len(*v1)
		}
	}
	for k1, v1 := range x.StringFloatMap {
		_, _ = k1, v1
		c += len(k1)
	}
	for k1, v1 := range x.StringFloatPtrMap {
		_, _ = k1, v1
		c += len(k1)
	}
	if x.StringFloatMapPtr != nil {
		for k1, v1 := range *x.StringFloatMapPtr {
			_, _ = k1, v1
			c += len(k1)
		}
	}
	if x.StringFloatPtrMapPtr != nil {
		for k1, v1 := range *x.StringFloatPtrMapPtr {
			_, _ = k1, v1
			c += len(k1)
		}
	}
	if x.StringPtrFloatPtrMapPtr != nil {
		for k1, v1 := range *x.StringPtrFloatPtrMapPtr {
			_, _ = k1, v1
			c += len(*k1)
		}
	}
	for k1, v1 := range x.FloatStructMap {
		_, _ = k1, v1
		c += len(v1.S)
		c += len(v1.B)
	}
	for k1, v1 := range x.FloatStructPtrMap {
		_, _ = k1, v1
		c += len(v1.S)
		c += len(v1.B)
	}
	for k1, v1 := range x.FloatPtrStructMap {
		_, _ = k1, v1
		c += len(v1.S)
		c += len(v1.B)
	}
	for k1, v1 := range x.FloatPtrStructPtrMap {
		_, _ = k1, v1
		c += len(v1.S)
		c += len(v1.B)
	}
	if x.FloatPtrStructPtrMapPtr != nil {
		for k1, v1 := range *x.FloatPtrStructPtrMapPtr {
			_, _ = k1, v1
			c += len(v1.S)
			c += len(v1.B)
		}
	}
	return c
}

func (i6 TestObject1Inspector) cpy(buf []byte, l, r *testobj.TestObject1) error {
	if len(r.IntSlice) > 0 {
		buf1 := make([]int32, 0, len(r.IntSlice))
		for i1 := 0; i1 < len(r.IntSlice); i1++ {
			var b1 int32
			x1 := (l.IntSlice)[i1]
			b1 = x1
			buf1 = append(buf1, b1)
		}
		l.IntSlice = buf1
	}
	if len(r.IntPtrSlice) > 0 {
		buf1 := make([]*int32, 0, len(r.IntPtrSlice))
		for i1 := 0; i1 < len(r.IntPtrSlice); i1++ {
			var b1 *int32
			x1 := (l.IntPtrSlice)[i1]
			b1 = x1
			buf1 = append(buf1, b1)
		}
		l.IntPtrSlice = buf1
	}
	if l.IntSlicePtr != nil {
		if len(*r.IntSlicePtr) > 0 {
			buf1 := make([]int32, 0, len(*r.IntSlicePtr))
			for i1 := 0; i1 < len(*r.IntSlicePtr); i1++ {
				var b1 int32
				x1 := (*l.IntSlicePtr)[i1]
				b1 = x1
				buf1 = append(buf1, b1)
			}
			l.IntSlicePtr = &buf1
		}
	}
	if l.IntPtrSlicePtr != nil {
		if len(*r.IntPtrSlicePtr) > 0 {
			buf1 := make([]*int32, 0, len(*r.IntPtrSlicePtr))
			for i1 := 0; i1 < len(*r.IntPtrSlicePtr); i1++ {
				var b1 *int32
				x1 := (*l.IntPtrSlicePtr)[i1]
				b1 = x1
				buf1 = append(buf1, b1)
			}
			l.IntPtrSlicePtr = &buf1
		}
	}
	buf, l.ByteSlice = inspector.Bufferize(buf, r.ByteSlice)
	if len(r.BytePtrSlice) > 0 {
		buf1 := make([]*byte, 0, len(r.BytePtrSlice))
		for i1 := 0; i1 < len(r.BytePtrSlice); i1++ {
			var b1 *byte
			x1 := (l.BytePtrSlice)[i1]
			b1 = x1
			buf1 = append(buf1, b1)
		}
		l.BytePtrSlice = buf1
	}
	if l.ByteSlicePtr != nil {
		buf, *l.ByteSlicePtr = inspector.Bufferize(buf, *r.ByteSlicePtr)
	}
	if l.BytePtrSlicePtr != nil {
		if len(*r.BytePtrSlicePtr) > 0 {
			buf1 := make([]*byte, 0, len(*r.BytePtrSlicePtr))
			for i1 := 0; i1 < len(*r.BytePtrSlicePtr); i1++ {
				var b1 *byte
				x1 := (*l.BytePtrSlicePtr)[i1]
				b1 = x1
				buf1 = append(buf1, b1)
			}
			l.BytePtrSlicePtr = &buf1
		}
	}
	if len(r.FloatSlice) > 0 {
		buf1 := make(testobj.TestFloatSlice, 0, len(r.FloatSlice))
		for i1 := 0; i1 < len(r.FloatSlice); i1++ {
			var b1 float32
			x1 := (l.FloatSlice)[i1]
			b1 = x1
			buf1 = append(buf1, b1)
		}
		l.FloatSlice = buf1
	}
	if len(r.FloatPtrSlice) > 0 {
		buf1 := make(testobj.TestFloatPtrSlice, 0, len(r.FloatPtrSlice))
		for i1 := 0; i1 < len(r.FloatPtrSlice); i1++ {
			var b1 *float32
			x1 := (l.FloatPtrSlice)[i1]
			b1 = x1
			buf1 = append(buf1, b1)
		}
		l.FloatPtrSlice = buf1
	}
	if l.FloatSlicePtr != nil {
		if len(*r.FloatSlicePtr) > 0 {
			buf1 := make(testobj.TestFloatSlice, 0, len(*r.FloatSlicePtr))
			for i1 := 0; i1 < len(*r.FloatSlicePtr); i1++ {
				var b1 float32
				x1 := (*l.FloatSlicePtr)[i1]
				b1 = x1
				buf1 = append(buf1, b1)
			}
			l.FloatSlicePtr = &buf1
		}
	}
	if l.FloatPtrSlicePtr != nil {
		if len(*r.FloatPtrSlicePtr) > 0 {
			buf1 := make(testobj.TestFloatPtrSlice, 0, len(*r.FloatPtrSlicePtr))
			for i1 := 0; i1 < len(*r.FloatPtrSlicePtr); i1++ {
				var b1 *float32
				x1 := (*l.FloatPtrSlicePtr)[i1]
				b1 = x1
				buf1 = append(buf1, b1)
			}
			l.FloatPtrSlicePtr = &buf1
		}
	}
	if len(r.StructSlice) > 0 {
		buf1 := make([]testobj.TestStruct, 0, len(r.StructSlice))
		for i1 := 0; i1 < len(r.StructSlice); i1++ {
			var b1 testobj.TestStruct
			x1 := &(l.StructSlice)[i1]
			b1.A = x1.A
			buf, b1.S = inspector.BufferizeString(buf, x1.S)
			buf, b1.B = inspector.Bufferize(buf, x1.B)
			b1.I = x1.I
			b1.I8 = x1.I8
			b1.I16 = x1.I16
			b1.I32 = x1.I32
			b1.I64 = x1.I64
			b1.U = x1.U
			b1.U8 = x1.U8
			b1.U16 = x1.U16
			b1.U32 = x1.U32
			b1.U64 = x1.U64
			b1.F = x1.F
			b1.D = x1.D
			buf1 = append(buf1, b1)
		}
		l.StructSlice = buf1
	}
	if len(r.StructPtrSlice) > 0 {
		buf1 := make([]*testobj.TestStruct, 0, len(r.StructPtrSlice))
		for i1 := 0; i1 < len(r.StructPtrSlice); i1++ {
			var b1 testobj.TestStruct
			x1 := (l.StructPtrSlice)[i1]
			b1.A = x1.A
			buf, b1.S = inspector.BufferizeString(buf, x1.S)
			buf, b1.B = inspector.Bufferize(buf, x1.B)
			b1.I = x1.I
			b1.I8 = x1.I8
			b1.I16 = x1.I16
			b1.I32 = x1.I32
			b1.I64 = x1.I64
			b1.U = x1.U
			b1.U8 = x1.U8
			b1.U16 = x1.U16
			b1.U32 = x1.U32
			b1.U64 = x1.U64
			b1.F = x1.F
			b1.D = x1.D
			buf1 = append(buf1, &b1)
		}
		l.StructPtrSlice = buf1
	}
	if l.StructSlicePtr != nil {
		if len(*r.StructSlicePtr) > 0 {
			buf1 := make([]testobj.TestStruct, 0, len(*r.StructSlicePtr))
			for i1 := 0; i1 < len(*r.StructSlicePtr); i1++ {
				var b1 testobj.TestStruct
				x1 := &(*l.StructSlicePtr)[i1]
				b1.A = x1.A
				buf, b1.S = inspector.BufferizeString(buf, x1.S)
				buf, b1.B = inspector.Bufferize(buf, x1.B)
				b1.I = x1.I
				b1.I8 = x1.I8
				b1.I16 = x1.I16
				b1.I32 = x1.I32
				b1.I64 = x1.I64
				b1.U = x1.U
				b1.U8 = x1.U8
				b1.U16 = x1.U16
				b1.U32 = x1.U32
				b1.U64 = x1.U64
				b1.F = x1.F
				b1.D = x1.D
				buf1 = append(buf1, b1)
			}
			l.StructSlicePtr = &buf1
		}
	}
	if l.StructPtrSlicePtr != nil {
		if len(*r.StructPtrSlicePtr) > 0 {
			buf1 := make([]*testobj.TestStruct, 0, len(*r.StructPtrSlicePtr))
			for i1 := 0; i1 < len(*r.StructPtrSlicePtr); i1++ {
				var b1 testobj.TestStruct
				x1 := (*l.StructPtrSlicePtr)[i1]
				b1.A = x1.A
				buf, b1.S = inspector.BufferizeString(buf, x1.S)
				buf, b1.B = inspector.Bufferize(buf, x1.B)
				b1.I = x1.I
				b1.I8 = x1.I8
				b1.I16 = x1.I16
				b1.I32 = x1.I32
				b1.I64 = x1.I64
				b1.U = x1.U
				b1.U8 = x1.U8
				b1.U16 = x1.U16
				b1.U32 = x1.U32
				b1.U64 = x1.U64
				b1.F = x1.F
				b1.D = x1.D
				buf1 = append(buf1, &b1)
			}
			l.StructPtrSlicePtr = &buf1
		}
	}
	if len(r.IntStringMap) > 0 {
		buf1 := make(map[int]string, len(r.IntStringMap))
		_ = buf1
		for rk, rv := range r.IntStringMap {
			_, _ = rk, rv
			var lk int
			lk = rk
			var lv string
			buf, lv = inspector.BufferizeString(buf, rv)
			(l.IntStringMap)[lk] = lv
		}
	}
	if len(r.IntStringPtrMap) > 0 {
		buf1 := make(map[int]*string, len(r.IntStringPtrMap))
		_ = buf1
		for rk, rv := range r.IntStringPtrMap {
			_, _ = rk, rv
			var lk int
			lk = rk
			var lv *string
			buf, *lv = inspector.BufferizeString(buf, *rv)
			(l.IntStringPtrMap)[lk] = lv
		}
	}
	if l.IntStringMapPtr != nil {
		if len(*r.IntStringMapPtr) > 0 {
			buf1 := make(map[int]string, len(*r.IntStringMapPtr))
			_ = buf1
			for rk, rv := range *r.IntStringMapPtr {
				_, _ = rk, rv
				var lk int
				lk = rk
				var lv string
				buf, lv = inspector.BufferizeString(buf, rv)
				(*l.IntStringMapPtr)[lk] = lv
			}
		}
	}
	if l.IntStringPtrMapPtr != nil {
		if len(*r.IntStringPtrMapPtr) > 0 {
			buf1 := make(map[int]*string, len(*r.IntStringPtrMapPtr))
			_ = buf1
			for rk, rv := range *r.IntStringPtrMapPtr {
				_, _ = rk, rv
				var lk int
				lk = rk
				var lv *string
				buf, *lv = inspector.BufferizeString(buf, *rv)
				(*l.IntStringPtrMapPtr)[lk] = lv
			}
		}
	}
	if l.IntPtrStringPtrMapPtr != nil {
		if len(*r.IntPtrStringPtrMapPtr) > 0 {
			buf1 := make(map[*int]*string, len(*r.IntPtrStringPtrMapPtr))
			_ = buf1
			for rk, rv := range *r.IntPtrStringPtrMapPtr {
				_, _ = rk, rv
				var lk *int
				lk = rk
				var lv *string
				buf, *lv = inspector.BufferizeString(buf, *rv)
				(*l.IntPtrStringPtrMapPtr)[lk] = lv
			}
		}
	}
	if len(r.StringFloatMap) > 0 {
		buf1 := make(testobj.TestStringFloatMap, len(r.StringFloatMap))
		_ = buf1
		for rk, rv := range r.StringFloatMap {
			_, _ = rk, rv
			var lk string
			buf, lk = inspector.BufferizeString(buf, rk)
			var lv float64
			lv = rv
			(l.StringFloatMap)[lk] = lv
		}
	}
	if len(r.StringFloatPtrMap) > 0 {
		buf1 := make(testobj.TestStringFloatPtrMap, len(r.StringFloatPtrMap))
		_ = buf1
		for rk, rv := range r.StringFloatPtrMap {
			_, _ = rk, rv
			var lk string
			buf, lk = inspector.BufferizeString(buf, rk)
			var lv *float64
			lv = rv
			(l.StringFloatPtrMap)[lk] = lv
		}
	}
	if l.StringFloatMapPtr != nil {
		if len(*r.StringFloatMapPtr) > 0 {
			buf1 := make(testobj.TestStringFloatMap, len(*r.StringFloatMapPtr))
			_ = buf1
			for rk, rv := range *r.StringFloatMapPtr {
				_, _ = rk, rv
				var lk string
				buf, lk = inspector.BufferizeString(buf, rk)
				var lv float64
				lv = rv
				(*l.StringFloatMapPtr)[lk] = lv
			}
		}
	}
	if l.StringFloatPtrMapPtr != nil {
		if len(*r.StringFloatPtrMapPtr) > 0 {
			buf1 := make(testobj.TestStringFloatPtrMap, len(*r.StringFloatPtrMapPtr))
			_ = buf1
			for rk, rv := range *r.StringFloatPtrMapPtr {
				_, _ = rk, rv
				var lk string
				buf, lk = inspector.BufferizeString(buf, rk)
				var lv *float64
				lv = rv
				(*l.StringFloatPtrMapPtr)[lk] = lv
			}
		}
	}
	if l.StringPtrFloatPtrMapPtr != nil {
		if len(*r.StringPtrFloatPtrMapPtr) > 0 {
			buf1 := make(testobj.TestStringPtrFloatPtrMap, len(*r.StringPtrFloatPtrMapPtr))
			_ = buf1
			for rk, rv := range *r.StringPtrFloatPtrMapPtr {
				_, _ = rk, rv
				var lk *string
				buf, *lk = inspector.BufferizeString(buf, *rk)
				var lv *float64
				lv = rv
				(*l.StringPtrFloatPtrMapPtr)[lk] = lv
			}
		}
	}
	if len(r.FloatStructMap) > 0 {
		buf1 := make(map[float64]testobj.TestStruct, len(r.FloatStructMap))
		_ = buf1
		for rk, rv := range r.FloatStructMap {
			_, _ = rk, rv
			var lk float64
			lk = rk
			var lv testobj.TestStruct
			lv.A = rv.A
			buf, lv.S = inspector.BufferizeString(buf, rv.S)
			buf, lv.B = inspector.Bufferize(buf, rv.B)
			lv.I = rv.I
			lv.I8 = rv.I8
			lv.I16 = rv.I16
			lv.I32 = rv.I32
			lv.I64 = rv.I64
			lv.U = rv.U
			lv.U8 = rv.U8
			lv.U16 = rv.U16
			lv.U32 = rv.U32
			lv.U64 = rv.U64
			lv.F = rv.F
			lv.D = rv.D
			(l.FloatStructMap)[lk] = lv
		}
	}
	if len(r.FloatStructPtrMap) > 0 {
		buf1 := make(map[float64]*testobj.TestStruct, len(r.FloatStructPtrMap))
		_ = buf1
		for rk, rv := range r.FloatStructPtrMap {
			_, _ = rk, rv
			var lk float64
			lk = rk
			var lv testobj.TestStruct
			lv.A = rv.A
			buf, lv.S = inspector.BufferizeString(buf, rv.S)
			buf, lv.B = inspector.Bufferize(buf, rv.B)
			lv.I = rv.I
			lv.I8 = rv.I8
			lv.I16 = rv.I16
			lv.I32 = rv.I32
			lv.I64 = rv.I64
			lv.U = rv.U
			lv.U8 = rv.U8
			lv.U16 = rv.U16
			lv.U32 = rv.U32
			lv.U64 = rv.U64
			lv.F = rv.F
			lv.D = rv.D
			(l.FloatStructPtrMap)[lk] = &lv
		}
	}
	if len(r.FloatPtrStructMap) > 0 {
		buf1 := make(map[*float64]testobj.TestStruct, len(r.FloatPtrStructMap))
		_ = buf1
		for rk, rv := range r.FloatPtrStructMap {
			_, _ = rk, rv
			var lk *float64
			lk = rk
			var lv testobj.TestStruct
			lv.A = rv.A
			buf, lv.S = inspector.BufferizeString(buf, rv.S)
			buf, lv.B = inspector.Bufferize(buf, rv.B)
			lv.I = rv.I
			lv.I8 = rv.I8
			lv.I16 = rv.I16
			lv.I32 = rv.I32
			lv.I64 = rv.I64
			lv.U = rv.U
			lv.U8 = rv.U8
			lv.U16 = rv.U16
			lv.U32 = rv.U32
			lv.U64 = rv.U64
			lv.F = rv.F
			lv.D = rv.D
			(l.FloatPtrStructMap)[lk] = lv
		}
	}
	if len(r.FloatPtrStructPtrMap) > 0 {
		buf1 := make(map[*float64]*testobj.TestStruct, len(r.FloatPtrStructPtrMap))
		_ = buf1
		for rk, rv := range r.FloatPtrStructPtrMap {
			_, _ = rk, rv
			var lk *float64
			lk = rk
			var lv testobj.TestStruct
			lv.A = rv.A
			buf, lv.S = inspector.BufferizeString(buf, rv.S)
			buf, lv.B = inspector.Bufferize(buf, rv.B)
			lv.I = rv.I
			lv.I8 = rv.I8
			lv.I16 = rv.I16
			lv.I32 = rv.I32
			lv.I64 = rv.I64
			lv.U = rv.U
			lv.U8 = rv.U8
			lv.U16 = rv.U16
			lv.U32 = rv.U32
			lv.U64 = rv.U64
			lv.F = rv.F
			lv.D = rv.D
			(l.FloatPtrStructPtrMap)[lk] = &lv
		}
	}
	if l.FloatPtrStructPtrMapPtr != nil {
		if len(*r.FloatPtrStructPtrMapPtr) > 0 {
			buf1 := make(map[*float64]*testobj.TestStruct, len(*r.FloatPtrStructPtrMapPtr))
			_ = buf1
			for rk, rv := range *r.FloatPtrStructPtrMapPtr {
				_, _ = rk, rv
				var lk *float64
				lk = rk
				var lv testobj.TestStruct
				lv.A = rv.A
				buf, lv.S = inspector.BufferizeString(buf, rv.S)
				buf, lv.B = inspector.Bufferize(buf, rv.B)
				lv.I = rv.I
				lv.I8 = rv.I8
				lv.I16 = rv.I16
				lv.I32 = rv.I32
				lv.I64 = rv.I64
				lv.U = rv.U
				lv.U8 = rv.U8
				lv.U16 = rv.U16
				lv.U32 = rv.U32
				lv.U64 = rv.U64
				lv.F = rv.F
				lv.D = rv.D
				(*l.FloatPtrStructPtrMapPtr)[lk] = &lv
			}
		}
	}
	return nil
}

func (i6 TestObject1Inspector) Reset(x interface{}) {
	var origin testobj.TestObject1
	_ = origin
	switch x.(type) {
	case testobj.TestObject1:
		origin = x.(testobj.TestObject1)
	case *testobj.TestObject1:
		origin = *x.(*testobj.TestObject1)
	case **testobj.TestObject1:
		origin = **x.(**testobj.TestObject1)
	default:
		return
	}
	if l := len((origin.IntSlice)); l > 0 {
		(origin.IntSlice) = (origin.IntSlice)[:0]
	}
	if l := len((origin.IntPtrSlice)); l > 0 {
		(origin.IntPtrSlice) = (origin.IntPtrSlice)[:0]
	}
	if origin.IntSlicePtr != nil {
		if l := len((*origin.IntSlicePtr)); l > 0 {
			(*origin.IntSlicePtr) = (*origin.IntSlicePtr)[:0]
		}
	}
	if origin.IntPtrSlicePtr != nil {
		if l := len((*origin.IntPtrSlicePtr)); l > 0 {
			(*origin.IntPtrSlicePtr) = (*origin.IntPtrSlicePtr)[:0]
		}
	}
	if l := len((origin.ByteSlice)); l > 0 {
		(origin.ByteSlice) = (origin.ByteSlice)[:0]
	}
	if l := len((origin.BytePtrSlice)); l > 0 {
		(origin.BytePtrSlice) = (origin.BytePtrSlice)[:0]
	}
	if origin.ByteSlicePtr != nil {
		if l := len((*origin.ByteSlicePtr)); l > 0 {
			(*origin.ByteSlicePtr) = (*origin.ByteSlicePtr)[:0]
		}
	}
	if origin.BytePtrSlicePtr != nil {
		if l := len((*origin.BytePtrSlicePtr)); l > 0 {
			(*origin.BytePtrSlicePtr) = (*origin.BytePtrSlicePtr)[:0]
		}
	}
	if l := len((origin.FloatSlice)); l > 0 {
		(origin.FloatSlice) = (origin.FloatSlice)[:0]
	}
	if l := len((origin.FloatPtrSlice)); l > 0 {
		(origin.FloatPtrSlice) = (origin.FloatPtrSlice)[:0]
	}
	if origin.FloatSlicePtr != nil {
		if l := len((*origin.FloatSlicePtr)); l > 0 {
			(*origin.FloatSlicePtr) = (*origin.FloatSlicePtr)[:0]
		}
	}
	if origin.FloatPtrSlicePtr != nil {
		if l := len((*origin.FloatPtrSlicePtr)); l > 0 {
			(*origin.FloatPtrSlicePtr) = (*origin.FloatPtrSlicePtr)[:0]
		}
	}
	if l := len((origin.StructSlice)); l > 0 {
		_ = (origin.StructSlice)[l-1]
		for i := 0; i < l; i++ {
			x1 := &(origin.StructSlice)[i]
			x1.A = 0
			x1.S = ""
			if l := len((x1.B)); l > 0 {
				(x1.B) = (x1.B)[:0]
			}
			x1.I = 0
			x1.I8 = 0
			x1.I16 = 0
			x1.I32 = 0
			x1.I64 = 0
			x1.U = 0
			x1.U8 = 0
			x1.U16 = 0
			x1.U32 = 0
			x1.U64 = 0
			x1.F = 0
			x1.D = 0
		}
		(origin.StructSlice) = (origin.StructSlice)[:0]
	}
	if l := len((origin.StructPtrSlice)); l > 0 {
		_ = (origin.StructPtrSlice)[l-1]
		for i := 0; i < l; i++ {
			x1 := (origin.StructPtrSlice)[i]
			x1.A = 0
			x1.S = ""
			if l := len((x1.B)); l > 0 {
				(x1.B) = (x1.B)[:0]
			}
			x1.I = 0
			x1.I8 = 0
			x1.I16 = 0
			x1.I32 = 0
			x1.I64 = 0
			x1.U = 0
			x1.U8 = 0
			x1.U16 = 0
			x1.U32 = 0
			x1.U64 = 0
			x1.F = 0
			x1.D = 0
		}
		(origin.StructPtrSlice) = (origin.StructPtrSlice)[:0]
	}
	if origin.StructSlicePtr != nil {
		if l := len((*origin.StructSlicePtr)); l > 0 {
			_ = (*origin.StructSlicePtr)[l-1]
			for i := 0; i < l; i++ {
				x1 := &(*origin.StructSlicePtr)[i]
				x1.A = 0
				x1.S = ""
				if l := len((x1.B)); l > 0 {
					(x1.B) = (x1.B)[:0]
				}
				x1.I = 0
				x1.I8 = 0
				x1.I16 = 0
				x1.I32 = 0
				x1.I64 = 0
				x1.U = 0
				x1.U8 = 0
				x1.U16 = 0
				x1.U32 = 0
				x1.U64 = 0
				x1.F = 0
				x1.D = 0
			}
			(*origin.StructSlicePtr) = (*origin.StructSlicePtr)[:0]
		}
	}
	if origin.StructPtrSlicePtr != nil {
		if l := len((*origin.StructPtrSlicePtr)); l > 0 {
			_ = (*origin.StructPtrSlicePtr)[l-1]
			for i := 0; i < l; i++ {
				x1 := (*origin.StructPtrSlicePtr)[i]
				x1.A = 0
				x1.S = ""
				if l := len((x1.B)); l > 0 {
					(x1.B) = (x1.B)[:0]
				}
				x1.I = 0
				x1.I8 = 0
				x1.I16 = 0
				x1.I32 = 0
				x1.I64 = 0
				x1.U = 0
				x1.U8 = 0
				x1.U16 = 0
				x1.U32 = 0
				x1.U64 = 0
				x1.F = 0
				x1.D = 0
			}
			(*origin.StructPtrSlicePtr) = (*origin.StructPtrSlicePtr)[:0]
		}
	}
	if origin.IntStringMapPtr != nil {
	}
	if origin.IntStringPtrMapPtr != nil {
	}
	if origin.IntPtrStringPtrMapPtr != nil {
	}
	if origin.StringFloatMapPtr != nil {
	}
	if origin.StringFloatPtrMapPtr != nil {
	}
	if origin.StringPtrFloatPtrMapPtr != nil {
	}
	if origin.FloatPtrStructPtrMapPtr != nil {
	}
}
