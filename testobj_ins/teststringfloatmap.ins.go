// Code generated by inspc. DO NOT EDIT.
// source: github.com/koykov/inspector/testobj

package testobj_ins

import (
	"encoding/json"
	"github.com/koykov/inspector"
	"github.com/koykov/inspector/testobj"
	"strconv"
)

type TestStringFloatMapInspector struct {
	inspector.BaseInspector
}

func (i8 TestStringFloatMapInspector) TypeName() string {
	return "TestStringFloatMap"
}

func (i8 TestStringFloatMapInspector) Get(src any, path ...string) (any, error) {
	var buf any
	err := i8.GetTo(src, &buf, path...)
	return buf, err
}

func (i8 TestStringFloatMapInspector) GetTo(src any, buf *any, path ...string) (err error) {
	if src == nil {
		return
	}
	var x *testobj.TestStringFloatMap
	_ = x
	if p, ok := src.(**testobj.TestStringFloatMap); ok {
		x = *p
	} else if p, ok := src.(*testobj.TestStringFloatMap); ok {
		x = p
	} else if v, ok := src.(testobj.TestStringFloatMap); ok {
		x = &v
	} else {
		return
	}
	if len(path) == 0 {
		*buf = &(*x)
		return
	}

	if len(path) > 0 {
		if x0, ok := (*x)[path[0]]; ok {
			_ = x0
			*buf = &x0
			return
		}
	}
	return
}

func (i8 TestStringFloatMapInspector) Cmp(src any, cond inspector.Op, right string, result *bool, path ...string) (err error) {
	if len(path) == 0 {
		return
	}
	if src == nil {
		return
	}
	var x *testobj.TestStringFloatMap
	_ = x
	if p, ok := src.(**testobj.TestStringFloatMap); ok {
		x = *p
	} else if p, ok := src.(*testobj.TestStringFloatMap); ok {
		x = p
	} else if v, ok := src.(testobj.TestStringFloatMap); ok {
		x = &v
	} else {
		return
	}

	if len(path) > 0 {
		if x0, ok := (*x)[path[0]]; ok {
			_ = x0
			var rightExact float64
			t319, err319 := strconv.ParseFloat(right, 0)
			if err319 != nil {
				return err319
			}
			rightExact = float64(t319)
			switch cond {
			case inspector.OpEq:
				*result = x0 == rightExact
			case inspector.OpNq:
				*result = x0 != rightExact
			case inspector.OpGt:
				*result = x0 > rightExact
			case inspector.OpGtq:
				*result = x0 >= rightExact
			case inspector.OpLt:
				*result = x0 < rightExact
			case inspector.OpLtq:
				*result = x0 <= rightExact
			}
			return
		}
	}
	return
}

func (i8 TestStringFloatMapInspector) Loop(src any, l inspector.Iterator, buf *[]byte, path ...string) (err error) {
	if len(path) == 0 {
		return
	}
	if src == nil {
		return
	}
	var x *testobj.TestStringFloatMap
	_ = x
	if p, ok := src.(**testobj.TestStringFloatMap); ok {
		x = *p
	} else if p, ok := src.(*testobj.TestStringFloatMap); ok {
		x = p
	} else if v, ok := src.(testobj.TestStringFloatMap); ok {
		x = &v
	} else {
		return
	}

	for k := range *x {
		if l.RequireKey() {
			*buf = append((*buf)[:0], k...)
			l.SetKey(buf, &inspector.StaticInspector{})
		}
		l.SetVal((*x)[k], &inspector.StaticInspector{})
		ctl := l.Iterate()
		if ctl == inspector.LoopCtlBrk {
			break
		}
		if ctl == inspector.LoopCtlCnt {
			continue
		}
	}
	return
	return
}

func (i8 TestStringFloatMapInspector) SetWB(dst, value any, buf inspector.AccumulativeBuffer, path ...string) error {
	if len(path) == 0 {
		return nil
	}
	if dst == nil {
		return nil
	}
	var x *testobj.TestStringFloatMap
	_ = x
	if p, ok := dst.(**testobj.TestStringFloatMap); ok {
		x = *p
	} else if p, ok := dst.(*testobj.TestStringFloatMap); ok {
		x = p
	} else if v, ok := dst.(testobj.TestStringFloatMap); ok {
		x = &v
	} else {
		return nil
	}

	if len(path) > 0 {
		x0 := (*x)[path[0]]
		_ = x0
		inspector.AssignBuf(&x0, value, buf)
		(*x)[path[0]] = x0
		return nil
	}
	return nil
}

func (i8 TestStringFloatMapInspector) Set(dst, value any, path ...string) error {
	return i8.SetWB(dst, value, nil, path...)
}

func (i8 TestStringFloatMapInspector) DeepEqual(l, r any) bool {
	return i8.DeepEqualWithOptions(l, r, nil)
}

func (i8 TestStringFloatMapInspector) DeepEqualWithOptions(l, r any, opts *inspector.DEQOptions) bool {
	var (
		lx, rx   *testobj.TestStringFloatMap
		leq, req bool
	)
	_, _, _, _ = lx, rx, leq, req
	if lp, ok := l.(**testobj.TestStringFloatMap); ok {
		lx, leq = *lp, true
	} else if lp, ok := l.(*testobj.TestStringFloatMap); ok {
		lx, leq = lp, true
	} else if lp, ok := l.(testobj.TestStringFloatMap); ok {
		lx, leq = &lp, true
	}
	if rp, ok := r.(**testobj.TestStringFloatMap); ok {
		rx, req = *rp, true
	} else if rp, ok := r.(*testobj.TestStringFloatMap); ok {
		rx, req = rp, true
	} else if rp, ok := r.(testobj.TestStringFloatMap); ok {
		rx, req = &rp, true
	}
	if !leq || !req {
		return false
	}
	if lx == nil && rx == nil {
		return true
	}
	if (lx == nil && rx != nil) || (lx != nil && rx == nil) {
		return false
	}

	if len(*lx) != len(*rx) {
		return false
	}
	for k := range *lx {
		lx1 := (*lx)[k]
		rx1, ok1 := (*rx)[k]
		_, _, _ = lx1, rx1, ok1
		if !ok1 {
			return false
		}
		if lx1 != rx1 {
			return false
		}
	}
	return true
}

func (i8 TestStringFloatMapInspector) Unmarshal(p []byte, typ inspector.Encoding) (any, error) {
	var x testobj.TestStringFloatMap
	switch typ {
	case inspector.EncodingJSON:
		err := json.Unmarshal(p, &x)
		return &x, err
	default:
		return nil, inspector.ErrUnknownEncodingType
	}
}

func (i8 TestStringFloatMapInspector) Copy(x any) (any, error) {
	var r testobj.TestStringFloatMap
	switch x.(type) {
	case testobj.TestStringFloatMap:
		r = x.(testobj.TestStringFloatMap)
	case *testobj.TestStringFloatMap:
		r = *x.(*testobj.TestStringFloatMap)
	case **testobj.TestStringFloatMap:
		r = **x.(**testobj.TestStringFloatMap)
	default:
		return nil, inspector.ErrUnsupportedType
	}
	bc := i8.countBytes(&r)
	var l testobj.TestStringFloatMap
	err := i8.CopyTo(&r, &l, inspector.NewByteBuffer(bc))
	return &l, err
}

func (i8 TestStringFloatMapInspector) CopyTo(src, dst any, buf inspector.AccumulativeBuffer) error {
	var r testobj.TestStringFloatMap
	switch src.(type) {
	case testobj.TestStringFloatMap:
		r = src.(testobj.TestStringFloatMap)
	case *testobj.TestStringFloatMap:
		r = *src.(*testobj.TestStringFloatMap)
	case **testobj.TestStringFloatMap:
		r = **src.(**testobj.TestStringFloatMap)
	default:
		return inspector.ErrUnsupportedType
	}
	var l *testobj.TestStringFloatMap
	switch dst.(type) {
	case testobj.TestStringFloatMap:
		return inspector.ErrMustPointerType
	case *testobj.TestStringFloatMap:
		l = dst.(*testobj.TestStringFloatMap)
	case **testobj.TestStringFloatMap:
		l = *dst.(**testobj.TestStringFloatMap)
	default:
		return inspector.ErrUnsupportedType
	}
	bb := buf.AcquireBytes()
	var err error
	if bb, err = i8.cpy(bb, l, &r); err != nil {
		return err
	}
	buf.ReleaseBytes(bb)
	return nil
}

func (i8 TestStringFloatMapInspector) countBytes(x *testobj.TestStringFloatMap) (c int) {
	for k0, v0 := range *x {
		_, _ = k0, v0
		c += len(k0)
	}
	return c
}

func (i8 TestStringFloatMapInspector) cpy(buf []byte, l, r *testobj.TestStringFloatMap) ([]byte, error) {
	if len(*r) > 0 {
		if l == nil {
			buf0 := make(testobj.TestStringFloatMap, len(*r))
			l = &buf0
		}
		for rk0, rv0 := range *r {
			_, _ = rk0, rv0
			var lk0 string
			buf, lk0 = inspector.BufferizeString(buf, rk0)
			var lv0 float64
			lv0 = rv0
			(*l)[lk0] = lv0
		}
	}
	return buf, nil
}

func (i8 TestStringFloatMapInspector) Reset(x any) error {
	var origin *testobj.TestStringFloatMap
	_ = origin
	switch x.(type) {
	case testobj.TestStringFloatMap:
		return inspector.ErrMustPointerType
	case *testobj.TestStringFloatMap:
		origin = x.(*testobj.TestStringFloatMap)
	case **testobj.TestStringFloatMap:
		origin = *x.(**testobj.TestStringFloatMap)
	default:
		return inspector.ErrUnsupportedType
	}
	if l := len((*origin)); l > 0 {
		for k, _ := range *origin {
			delete((*origin), k)
		}
	}
	return nil
}
